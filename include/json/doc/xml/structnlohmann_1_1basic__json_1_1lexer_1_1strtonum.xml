<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum" kind="struct" language="C++" prot="public">
    <compoundname>nlohmann::basic_json::lexer::strtonum</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a4878c8bc7756e8ff1cde8b7aa50c85c8" prot="private" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::m_end</definition>
        <argsstring></argsstring>
        <name>m_end</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11953" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a325d967d65cab640cabbea12c8531c28" prot="private" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::m_start</definition>
        <argsstring></argsstring>
        <name>m_start</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11952" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11952" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_ae065098e24b08ea79a359950190006d8_1ae065098e24b08ea79a359950190006d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::strtonum</definition>
        <argsstring>(const char *start, const char *end)</argsstring>
        <name>strtonum</name>
        <param>
          <type>const char *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11935" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11935" bodyend="11937"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_a37861c33c4470e36afd77275338b6706_1a37861c33c4470e36afd77275338b6706" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_arithmetic&lt;T&gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>&gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::to</definition>
        <argsstring>(T &amp;val) const </argsstring>
        <name>to</name>
        <param>
          <type>T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true iff parsed successfully as number of type T</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">val</parametername>
</parameternamelist>
<parameterdescription>
<para>shall contain parsed value, or undefined value if could not parse </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11946" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11946" bodyend="11949"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1ad6996c1546ef27c8a241d2326dd46455" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::strtof</definition>
        <argsstring>(float &amp;f, const char *str, char **endptr)</argsstring>
        <name>strtof</name>
        <param>
          <type>float &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11959" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11959" bodyend="11962"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1ad0978eee3e7d2e0478a5f15e584fdb2f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::strtof</definition>
        <argsstring>(double &amp;f, const char *str, char **endptr)</argsstring>
        <name>strtof</name>
        <param>
          <type>double &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11964" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11964" bodyend="11967"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a454daac40de04902038556764a69d6f2" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::strtof</definition>
        <argsstring>(long double &amp;f, const char *str, char **endptr)</argsstring>
        <name>strtof</name>
        <param>
          <type>long double &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11969" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11969" bodyend="11972"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1addbfb4e3375cff89ce6df9cff5f72a66" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::parse</definition>
        <argsstring>(T &amp;value, std::false_type) const </argsstring>
        <name>parse</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11975" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11975" bodyend="12037"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a5ebb74b2fa58eb4a919b4c2162976043" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::parse</definition>
        <argsstring>(T &amp;value, std::true_type) const </argsstring>
        <name>parse</name>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12052" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12052" bodyend="12069"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1aff2fcd33714586966fefd02038a5a727" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>signed long long</type>
        <definition>signed long long nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::parse_integral</definition>
        <argsstring>(char **endptr, std::true_type) const </argsstring>
        <name>parse_integral</name>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12041" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12041" bodyend="12044"/>
      </memberdef>
      <memberdef kind="function" id="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a3d4e3ab26435025329ec35a16c55c1b5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long</type>
        <definition>unsigned long long nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum::parse_integral</definition>
        <argsstring>(char **endptr, std::false_type) const </argsstring>
        <name>parse_integral</name>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12046" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12046" bodyend="12049"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>parse string into a built-in arithmetic type as if the current locale is POSIX. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>in floating-point case strtod may parse past the token&apos;s end - this is not an error</para></simplesect>
<simplesect kind="note"><para>any leading blanks are not handled </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="34">
        <label>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::lexer::strtonum</label>
        <link refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum"/>
      </node>
    </collaborationgraph>
    <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="11933" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="11932" bodyend="12070"/>
    <listofallmembers>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a4878c8bc7756e8ff1cde8b7aa50c85c8" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>m_end</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a325d967d65cab640cabbea12c8531c28" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>m_start</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1addbfb4e3375cff89ce6df9cff5f72a66" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>parse</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a5ebb74b2fa58eb4a919b4c2162976043" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>parse</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1aff2fcd33714586966fefd02038a5a727" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>parse_integral</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a3d4e3ab26435025329ec35a16c55c1b5" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>parse_integral</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1ad6996c1546ef27c8a241d2326dd46455" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>strtof</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1ad0978eee3e7d2e0478a5f15e584fdb2f" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>strtof</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_1a454daac40de04902038556764a69d6f2" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>strtof</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_ae065098e24b08ea79a359950190006d8_1ae065098e24b08ea79a359950190006d8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>strtonum</name></member>
      <member refid="structnlohmann_1_1basic__json_1_1lexer_1_1strtonum_a37861c33c4470e36afd77275338b6706_1a37861c33c4470e36afd77275338b6706" prot="public" virt="non-virtual"><scope>nlohmann::basic_json::lexer::strtonum</scope><name>to</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
