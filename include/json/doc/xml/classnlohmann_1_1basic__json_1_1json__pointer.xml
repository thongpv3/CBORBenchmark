<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classnlohmann_1_1basic__json_1_1json__pointer" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::basic_json::json_pointer</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_1_1json__pointer_ada3100cdb8700566051828f1355fa745_1ada3100cdb8700566051828f1355fa745" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class basic_json</definition>
        <argsstring></argsstring>
        <name>basic_json</name>
        <briefdescription>
<para>allow basic_json to access private members </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12506" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_1_1json__pointer_a6779edcf28e6f018a3bbb29c0b4b5e1e_1a6779edcf28e6f018a3bbb29c0b4b5e1e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(json_pointer const &amp;lhs, json_pointer const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13165" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13165" bodyend="13169"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_1_1json__pointer_a4667ef558c8c3f8a646bfda0c6654653_1a4667ef558c8c3f8a646bfda0c6654653" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(json_pointer const &amp;lhs, json_pointer const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13159" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13159" bodyend="13163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnlohmann_1_1basic__json_1_1json__pointer_1a04832c52ff9b4237ec15d437390f7637" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::reference_tokens</definition>
        <argsstring></argsstring>
        <name>reference_tokens</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>the reference tokens </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13172" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_abaa66b0d30811b8a8670a673c686b75a_1abaa66b0d30811b8a8670a673c686b75a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::json_pointer</definition>
        <argsstring>(const std::string &amp;s=&quot;&quot;)</argsstring>
        <name>json_pointer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>create JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para>Create a JSON pointer according to the syntax described in <ulink url="https://tools.ietf.org/html/rfc6901#section-3">Section 3 of RFC6901</ulink>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string representing the JSON pointer; if omitted, the empty string is assumed which references the whole JSON value</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.107</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given JSON pointer <emphasis>s</emphasis> is nonempty and does not begin with a slash (<computeroutput>/</computeroutput>); see example below</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.108</parametername>
</parameternamelist>
<parameterdescription>
<para>if a tilde (<computeroutput>~</computeroutput>) in the given JSON pointer <emphasis>s</emphasis> is not followed by <computeroutput>0</computeroutput> (representing <computeroutput>~</computeroutput>) or <computeroutput>1</computeroutput> (representing <computeroutput>/</computeroutput>); see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The example shows the construction several valid JSON pointers as well as the exceptional behavior. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>JSON<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p1;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p2(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p3(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p4(</highlight><highlight class="stringliteral">&quot;//&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p5(</highlight><highlight class="stringliteral">&quot;/foo/bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p6(</highlight><highlight class="stringliteral">&quot;/foo/bar/-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p7(</highlight><highlight class="stringliteral">&quot;/foo/~0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p8(</highlight><highlight class="stringliteral">&quot;/foo/~1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error:<sp/>JSON<sp/>pointer<sp/>does<sp/>not<sp/>begin<sp/>with<sp/>a<sp/>slash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p9(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" kindref="member">json::parse_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error:<sp/>JSON<sp/>pointer<sp/>uses<sp/>escape<sp/>symbol<sp/>~<sp/>not<sp/>followed<sp/>by<sp/>0<sp/>or<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p10(</highlight><highlight class="stringliteral">&quot;/foo/~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" kindref="member">json::parse_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error:<sp/>JSON<sp/>pointer<sp/>uses<sp/>escape<sp/>symbol<sp/>~<sp/>not<sp/>followed<sp/>by<sp/>0<sp/>or<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>json::json_pointer<sp/>p11(</highlight><highlight class="stringliteral">&quot;/foo/~3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" kindref="member">json::parse_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Wlvqfd3JpEXTv2iH&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[json.exception.parse_error.107] parse error at 1: JSON pointer must be empty or begin with &apos;/&apos; - was: &apos;foo&apos;
[json.exception.parse_error.108] parse error: escape character &apos;~&apos; must be followed with &apos;0&apos; or &apos;1&apos;
[json.exception.parse_error.108] parse error: escape character &apos;~&apos; must be followed with &apos;0&apos; or &apos;1&apos;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/json_pointer.cpp -o json_pointer </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12531" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12531" bodyend="12533"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_aeae296947e77ea9eb55c30d6a6379806_1aeae296947e77ea9eb55c30d6a6379806" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::operator std::string</definition>
        <argsstring>() const </argsstring>
        <name>operator std::string</name>
        <briefdescription>
<para>return a string representation of the JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="invariant"><para>For each JSON pointer <computeroutput>ptr</computeroutput>, it holds: <programlisting><codeline><highlight class="normal">ptr<sp/>==<sp/><ref refid="classnlohmann_1_1basic__json_1_1json__pointer_abaa66b0d30811b8a8670a673c686b75a_1abaa66b0d30811b8a8670a673c686b75a" kindref="member">json_pointer</ref>(ptr.<ref refid="classnlohmann_1_1basic__json_1_1json__pointer_adf63cdde9493796d8aa61bd948984b6d_1adf63cdde9493796d8aa61bd948984b6d" kindref="member">to_string</ref>());</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="return"><para>a string representation of the JSON pointer</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the result of <computeroutput>to_string</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>JSON<sp/>Pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr1(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr2(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr3(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr4(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr5(</highlight><highlight class="stringliteral">&quot;/a~1b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr6(</highlight><highlight class="stringliteral">&quot;/c%d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr7(</highlight><highlight class="stringliteral">&quot;/e^f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr8(</highlight><highlight class="stringliteral">&quot;/g|h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr9(</highlight><highlight class="stringliteral">&quot;/i\\j&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr10(</highlight><highlight class="stringliteral">&quot;/k\&quot;l&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr11(</highlight><highlight class="stringliteral">&quot;/<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr12(</highlight><highlight class="stringliteral">&quot;/m~0n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>ptr1.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr2.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr3.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr4.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr5.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr6.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr7.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr8.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr9.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr10.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr11.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr12.to_string()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/O4FbKx0TbZioFhfU&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>
/foo
/foo/0
/
/a~1b
/c%d
/e^f
/g|h
/i\j
/k&quot;l
/ 
/m~0n
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/
json_pointer__to_string.cpp -o 
json_pointer__to_string </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12565" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12565" bodyend="12568"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_adf63cdde9493796d8aa61bd948984b6d_1adf63cdde9493796d8aa61bd948984b6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::to_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>return a string representation of the JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="invariant"><para>For each JSON pointer <computeroutput>ptr</computeroutput>, it holds: <programlisting><codeline><highlight class="normal">ptr<sp/>==<sp/><ref refid="classnlohmann_1_1basic__json_1_1json__pointer_abaa66b0d30811b8a8670a673c686b75a_1abaa66b0d30811b8a8670a673c686b75a" kindref="member">json_pointer</ref>(ptr.<ref refid="classnlohmann_1_1basic__json_1_1json__pointer_adf63cdde9493796d8aa61bd948984b6d_1adf63cdde9493796d8aa61bd948984b6d" kindref="member">to_string</ref>());</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="return"><para>a string representation of the JSON pointer</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the result of <computeroutput>to_string</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>JSON<sp/>Pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr1(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr2(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr3(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr4(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr5(</highlight><highlight class="stringliteral">&quot;/a~1b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr6(</highlight><highlight class="stringliteral">&quot;/c%d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr7(</highlight><highlight class="stringliteral">&quot;/e^f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr8(</highlight><highlight class="stringliteral">&quot;/g|h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr9(</highlight><highlight class="stringliteral">&quot;/i\\j&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr10(</highlight><highlight class="stringliteral">&quot;/k\&quot;l&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr11(</highlight><highlight class="stringliteral">&quot;/<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>json::json_pointer<sp/>ptr12(</highlight><highlight class="stringliteral">&quot;/m~0n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>ptr1.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr2.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr3.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr4.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr5.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr6.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr7.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr8.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr9.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr10.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr11.to_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ptr12.to_string()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/O4FbKx0TbZioFhfU&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>
/foo
/foo/0
/
/a~1b
/c%d
/e^f
/g|h
/i\j
/k&quot;l
/ 
/m~0n
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/
json_pointer__to_string.cpp -o 
json_pointer__to_string </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12554" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12554" bodyend="12562"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a099736051cf0b34f6873e1652ae5d3d7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::get_and_create</definition>
        <argsstring>(reference j) const </argsstring>
        <name>get_and_create</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create and return a reference to the pointed to value </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Complexity</title><para>Linear in the number of reference tokens.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if array index is not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.313</parametername>
</parameternamelist>
<parameterdescription>
<para>if value cannot be unflattened </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12613" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12613" bodyend="12674"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a37626f753ab61b25f5425eefd50e4558" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::get_checked</definition>
        <argsstring>(pointer ptr) const </argsstring>
        <name>get_checked</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_aefee1f777198c68724bd127e0c8abbe4_1aefee1f777198c68724bd127e0c8abbe4" kindref="member">pointer</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12775" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12775" bodyend="12824"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a36db449f5835b3ac40c5d5b394d586fa" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::get_checked</definition>
        <argsstring>(const_pointer ptr) const </argsstring>
        <name>get_checked</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_aff3d5cd2a75612364b888d8693231b58_1aff3d5cd2a75612364b888d8693231b58" kindref="member">const_pointer</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12896" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12896" bodyend="12945"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1adcf1a24c7ef9ee3d32a06cc7e3225212" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::get_unchecked</definition>
        <argsstring>(pointer ptr) const </argsstring>
        <name>get_unchecked</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_aefee1f777198c68724bd127e0c8abbe4_1aefee1f777198c68724bd127e0c8abbe4" kindref="member">pointer</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>return a reference to the pointed to value </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This version does not throw if a value is not present, but tries to create nested values instead. For instance, calling this function with pointer <computeroutput>&quot;/this/that&quot;</computeroutput> on a null value is equivalent to calling <computeroutput>operator[](&quot;this&quot;).operator[](&quot;that&quot;)</computeroutput> on that value, effectively changing the null value to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the JSON value pointed to by the JSON pointer</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the JSON pointer.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12695" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12695" bodyend="12767"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a373efa63de41df1c90f5e57af54e01af" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::get_unchecked</definition>
        <argsstring>(const_pointer ptr) const </argsstring>
        <name>get_unchecked</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_aff3d5cd2a75612364b888d8693231b58_1aff3d5cd2a75612364b888d8693231b58" kindref="member">const_pointer</ref></type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>return a const reference to the pointed to value </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the JSON value pointed to by the JSON pointer</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12839" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12839" bodyend="12888"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a5883f87acafd27901c18323d2411f154" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::is_root</definition>
        <argsstring>() const </argsstring>
        <name>is_root</name>
        <briefdescription>
<para>return whether pointer points to the root document </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12588" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12588" bodyend="12591"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1ad4ccd113ac7edcdb6c3aaa8f5978db59" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>remove and return last reference pointer </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range.405</parametername>
</parameternamelist>
<parameterdescription>
<para>if JSON pointer has no parent </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12575" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12575" bodyend="12585"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1ad48f6d7a5c95ff1eabd0ae38c083c3ee" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref></type>
        <definition>json_pointer nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::top</definition>
        <argsstring>() const </argsstring>
        <name>top</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12593" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12593" bodyend="12603"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a7d41132aab61ed2fe8a6b05d53016a70" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::escape</definition>
        <argsstring>(std::string s)</argsstring>
        <name>escape</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>escape tilde and slash </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13044" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13044" bodyend="13050"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1adc3a9cbcb4ce12bf4661caf48cd2b30c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::flatten</definition>
        <argsstring>(const std::string &amp;reference_string, const basic_json &amp;value, basic_json &amp;result)</argsstring>
        <name>flatten</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference_string</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reference_string</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference string to the current value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">result</parametername>
</parameternamelist>
<parameterdescription>
<para>the result object to insert values to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Empty objects or arrays are flattened to <computeroutput>null</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13068" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13068" bodyend="13119"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1afc5dd65e2855e09f46bad1882b2b7ce0" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::replace_substring</definition>
        <argsstring>(std::string &amp;s, const std::string &amp;f, const std::string &amp;t)</argsstring>
        <name>replace_substring</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>replace all occurrences of a substring by another string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to manipulate; changed so that all occurrences of <emphasis>f</emphasis> are replaced with <emphasis>t</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring to replace with <emphasis>t</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace <emphasis>f</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The search string <emphasis>f</emphasis> must not be empty. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13029" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13029" bodyend="13041"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a9ad9f3ed25e1e3cf82b05973d3ecafac" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::split</definition>
        <argsstring>(const std::string &amp;reference_string)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reference_string</declname>
        </param>
        <briefdescription>
<para>split the string input to reference tokens </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is only called by the json_pointer constructor. All exceptions below are documented there.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.107</parametername>
</parameternamelist>
<parameterdescription>
<para>if the pointer is not empty or begins with &apos;/&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.108</parametername>
</parameternamelist>
<parameterdescription>
<para>if character &apos;~&apos; is not followed by &apos;0&apos; or &apos;1&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12956" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12956" bodyend="13014"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a412a0baf28b38a77cfb44ebb8c8daecc" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::unescape</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>unescape</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>unescape tilde and slash </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13053" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13053" bodyend="13059"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1_1json__pointer_1a81c5b2e1721430c1bcd2a1fb76a6046e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer::unflatten</definition>
        <argsstring>(const basic_json &amp;value)</argsstring>
        <name>unflatten</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>flattened JSON</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unflattened JSON</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if array index is not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.314</parametername>
</parameternamelist>
<parameterdescription>
<para>if value is not an object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.315</parametername>
</parameternamelist>
<parameterdescription>
<para>if object values are not primitive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.313</parametername>
</parameternamelist>
<parameterdescription>
<para>if value cannot be unflattened </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13131" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13131" bodyend="13157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>JSON Pointer. </para>    </briefdescription>
    <detaileddescription>
<para>A JSON pointer defines a string syntax for identifying a specific value within a JSON document. It can be used with functions <computeroutput>at</computeroutput> and <computeroutput>operator[]</computeroutput>. Furthermore, JSON pointers are the base for JSON patches.</para><para><simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="18">
        <label>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_pointer</label>
        <link refid="classnlohmann_1_1basic__json_1_1json__pointer"/>
      </node>
    </collaborationgraph>
    <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="12504" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="12503" bodyend="13173"/>
    <listofallmembers>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_ada3100cdb8700566051828f1355fa745_1ada3100cdb8700566051828f1355fa745" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a7d41132aab61ed2fe8a6b05d53016a70" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>escape</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1adc3a9cbcb4ce12bf4661caf48cd2b30c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>flatten</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a099736051cf0b34f6873e1652ae5d3d7" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>get_and_create</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a37626f753ab61b25f5425eefd50e4558" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>get_checked</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a36db449f5835b3ac40c5d5b394d586fa" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>get_checked</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1adcf1a24c7ef9ee3d32a06cc7e3225212" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>get_unchecked</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a373efa63de41df1c90f5e57af54e01af" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>get_unchecked</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a5883f87acafd27901c18323d2411f154" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>is_root</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_abaa66b0d30811b8a8670a673c686b75a_1abaa66b0d30811b8a8670a673c686b75a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>json_pointer</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_aeae296947e77ea9eb55c30d6a6379806_1aeae296947e77ea9eb55c30d6a6379806" prot="public" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>operator std::string</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_a6779edcf28e6f018a3bbb29c0b4b5e1e_1a6779edcf28e6f018a3bbb29c0b4b5e1e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>operator!=</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_a4667ef558c8c3f8a646bfda0c6654653_1a4667ef558c8c3f8a646bfda0c6654653" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>operator==</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1ad4ccd113ac7edcdb6c3aaa8f5978db59" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>pop_back</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a04832c52ff9b4237ec15d437390f7637" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>reference_tokens</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1afc5dd65e2855e09f46bad1882b2b7ce0" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>replace_substring</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a9ad9f3ed25e1e3cf82b05973d3ecafac" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>split</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_adf63cdde9493796d8aa61bd948984b6d_1adf63cdde9493796d8aa61bd948984b6d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>to_string</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1ad48f6d7a5c95ff1eabd0ae38c083c3ee" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>top</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a412a0baf28b38a77cfb44ebb8c8daecc" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>unescape</name></member>
      <member refid="classnlohmann_1_1basic__json_1_1json__pointer_1a81c5b2e1721430c1bcd2a1fb76a6046e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json::json_pointer</scope><name>unflatten</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
