<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classnlohmann_1_1basic__json" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::basic_json</compoundname>
    <includes refid="json_8hpp" local="no">json.hpp</includes>
    <innerclass refid="structnlohmann_1_1basic__json_1_1internal__iterator" prot="private">nlohmann::basic_json::internal_iterator</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1iter__impl" prot="public">nlohmann::basic_json::iter_impl</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1iteration__proxy" prot="private">nlohmann::basic_json::iteration_proxy</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1json__pointer" prot="public">nlohmann::basic_json::json_pointer</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1json__reverse__iterator" prot="public">nlohmann::basic_json::json_reverse_iterator</innerclass>
    <innerclass refid="unionnlohmann_1_1basic__json_1_1json__value" prot="private">nlohmann::basic_json::json_value</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1lexer" prot="private">nlohmann::basic_json::lexer</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1parser" prot="private">nlohmann::basic_json::parser</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1primitive__iterator__t" prot="private">nlohmann::basic_json::primitive_iterator_t</innerclass>
    <innerclass refid="classnlohmann_1_1basic__json_1_1serializer" prot="private">nlohmann::basic_json::serializer</innerclass>
    <templateparamlist>
      <param>
        <type>template&lt; typename U, typename V, typename...Args &gt; class</type>
        <declname>ObjectType</declname>
        <defname>ObjectType</defname>
        <defval>std::map</defval>
      </param>
      <param>
        <type>template&lt; typename U, typename...Args &gt; class</type>
        <declname>ArrayType</declname>
        <defname>ArrayType</defname>
        <defval>std::vector</defval>
      </param>
      <param>
        <type>class StringType</type>
        <defval>std::string</defval>
      </param>
      <param>
        <type>class BooleanType</type>
        <defval>bool</defval>
      </param>
      <param>
        <type>class NumberIntegerType</type>
        <defval>std::int64_t</defval>
      </param>
      <param>
        <type>class NumberUnsignedType</type>
        <defval>std::uint64_t</defval>
      </param>
      <param>
        <type>class NumberFloatType</type>
        <defval>double</defval>
      </param>
      <param>
        <type>template&lt; typename U &gt; class</type>
        <declname>AllocatorType</declname>
        <defname>AllocatorType</defname>
        <defval>std::allocator</defval>
      </param>
      <param>
        <type>template&lt; typename T, typename SFINAE=void &gt; class</type>
        <declname>JSONSerializer</declname>
        <defname>JSONSerializer</defname>
        <defval><ref refid="structnlohmann_1_1adl__serializer" kindref="compound">adl_serializer</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>exceptions</header>
      <description><para>Classes to implement user-defined exceptions. </para></description>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a9a0aced019cb1d65bb49703406c84970_1a9a0aced019cb1d65bb49703406c84970" prot="public" static="no">
        <type>detail::exception</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::exception =  detail::exception</definition>
        <argsstring></argsstring>
        <name>exception</name>
        <briefdescription>
<para>general exception of the <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> class </para>        </briefdescription>
        <detaileddescription>
<para>Extension of std::exception objects with a member <emphasis>id</emphasis> for exception ids.</para><para><simplesect kind="note"><para>To have nothrow-copy-constructible exceptions, we internally use std::runtime_error which can cope with arbitrary-length error messages. Intermediate strings are built with static functions and then passed to the actual constructor.</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1316" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" prot="public" static="no">
        <type>detail::parse_error</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse_error =  detail::parse_error</definition>
        <argsstring></argsstring>
        <name>parse_error</name>
        <briefdescription>
<para>exception indicating a parse error </para>        </briefdescription>
        <detaileddescription>
<para>This excpetion is thrown by the library when a parse error occurs. Parse errors can occur during the deserialization of JSON text as well as when using JSON Patch.</para><para>Member <emphasis>byte</emphasis> holds the byte index of the last read character in the input file.</para><para><simplesect kind="note"><para>For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file. This also holds true when reading a byte vector (CBOR or MessagePack).</para></simplesect>
Exceptions have ids 1xx.</para><para><table rows="14" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example massage </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.101 </para></entry><entry thead="no"><para>parse error at 2: unexpected end of input; expected string literal </para></entry><entry thead="no"><para>This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member <emphasis>byte</emphasis> indicates the error position. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.102 </para></entry><entry thead="no"><para>parse error at 14: missing or wrong low surrogate </para></entry><entry thead="no"><para>JSON uses the <computeroutput>\uxxxx</computeroutput> format to describe Unicode characters. Code points above above 0xFFFF are split into two <computeroutput>\uxxxx</computeroutput> entries (&quot;surrogate pairs&quot;). This error indicates that the surrogate pair is incomplete or contains an invalid code point. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.103 </para></entry><entry thead="no"><para>parse error: code points above 0x10FFFF are invalid </para></entry><entry thead="no"><para>Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.104 </para></entry><entry thead="no"><para>parse error: JSON patch must be an array of objects </para></entry><entry thead="no"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902</ulink> requires a JSON Patch document to be a JSON document that represents an array of objects. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.105 </para></entry><entry thead="no"><para>parse error: operation must have string member &apos;op&apos; </para></entry><entry thead="no"><para>An operation of a JSON Patch document must contain exactly one &quot;op&quot; member, whose value indicates the operation to perform. Its value must be one of &quot;add&quot;, &quot;remove&quot;, &quot;replace&quot;, &quot;move&quot;, &quot;copy&quot;, or &quot;test&quot;; other values are errors. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.106 </para></entry><entry thead="no"><para>parse error: array index &apos;01&apos; must not begin with &apos;0&apos; </para></entry><entry thead="no"><para>An array index in a JSON Pointer (<ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>) may be <computeroutput>0</computeroutput> or any number wihtout a leading <computeroutput>0</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.107 </para></entry><entry thead="no"><para>parse error: JSON pointer must be empty or begin with &apos;/&apos; - was: &apos;foo&apos; </para></entry><entry thead="no"><para>A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a <computeroutput>/</computeroutput> character. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.108 </para></entry><entry thead="no"><para>parse error: escape character &apos;~&apos; must be followed with &apos;0&apos; or &apos;1&apos; </para></entry><entry thead="no"><para>In a JSON Pointer, only <computeroutput>~0</computeroutput> and <computeroutput>~1</computeroutput> are valid escape sequences. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.109 </para></entry><entry thead="no"><para>parse error: array index &apos;one&apos; is not a number </para></entry><entry thead="no"><para>A JSON Pointer array index must be a number. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.110 </para></entry><entry thead="no"><para>parse error at 1: cannot read 2 bytes from vector </para></entry><entry thead="no"><para>When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.111 </para></entry><entry thead="no"><para>parse error: bad input stream </para></entry><entry thead="no"><para>Parsing CBOR or MessagePack from an input stream where the <ulink url="http://en.cppreference.com/w/cpp/io/ios_base/iostate"><computeroutput>badbit</computeroutput> or <computeroutput>failbit</computeroutput></ulink> is set. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.112 </para></entry><entry thead="no"><para>parse error at 1: error reading CBOR; last byte: 0xf8 </para></entry><entry thead="no"><para>Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.113 </para></entry><entry thead="no"><para>parse error at 2: expected a CBOR string; last byte: 0x98 </para></entry><entry thead="no"><para>While parsing a map key, a value that is not a string has been read. </para></entry></row>
</table>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1318" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_ac13d32f7cbd02d616e71d8dc30dadcbf_1ac13d32f7cbd02d616e71d8dc30dadcbf" prot="public" static="no">
        <type>detail::invalid_iterator</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::invalid_iterator =  detail::invalid_iterator</definition>
        <argsstring></argsstring>
        <name>invalid_iterator</name>
        <briefdescription>
<para>exception indicating errors with iterators </para>        </briefdescription>
        <detaileddescription>
<para>Exceptions have ids 2xx.</para><para><table rows="15" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example massage </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.201 </para></entry><entry thead="no"><para>iterators are not compatible </para></entry><entry thead="no"><para>The iterators passed to constructor <ref refid="classnlohmann_1_1basic__json_abe197e9f3184487805cfb5bba6fd5938_1abe197e9f3184487805cfb5bba6fd5938" kindref="member">basic_json(InputIT first, InputIT last)</ref> are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.202 </para></entry><entry thead="no"><para>iterator does not fit current value </para></entry><entry thead="no"><para>In an erase or insert function, the passed iterator <emphasis>pos</emphasis> does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.203 </para></entry><entry thead="no"><para>iterators do not fit current value </para></entry><entry thead="no"><para>Either iterator passed to function <ref refid="classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_1a4b3f7eb2d4625d95a51fbbdceb7c5f39" kindref="member">erase(IteratorType first, IteratorType last)</ref> does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.204 </para></entry><entry thead="no"><para>iterators out of range </para></entry><entry thead="no"><para>When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (<ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref>, <ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref>), because this is the only way the single stored value is expressed. All other ranges are invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.205 </para></entry><entry thead="no"><para>iterator out of range </para></entry><entry thead="no"><para>When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the <ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref> iterator, because it is the only way to address the stored value. All other iterators are invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.206 </para></entry><entry thead="no"><para>cannot construct with iterators from null </para></entry><entry thead="no"><para>The iterators passed to constructor <ref refid="classnlohmann_1_1basic__json_abe197e9f3184487805cfb5bba6fd5938_1abe197e9f3184487805cfb5bba6fd5938" kindref="member">basic_json(InputIT first, InputIT last)</ref> belong to a JSON null value and hence to not define a valid range. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.207 </para></entry><entry thead="no"><para>cannot use key() for non-object iterators </para></entry><entry thead="no"><para>The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.208 </para></entry><entry thead="no"><para>cannot use operator[] for object iterators </para></entry><entry thead="no"><para>The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.209 </para></entry><entry thead="no"><para>cannot use offsets with object iterators </para></entry><entry thead="no"><para>The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.210 </para></entry><entry thead="no"><para>iterators do not fit </para></entry><entry thead="no"><para>The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.211 </para></entry><entry thead="no"><para>passed iterators may not belong to container </para></entry><entry thead="no"><para>The iterator range passed to the insert function must not be a subrange of the container to insert to. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.212 </para></entry><entry thead="no"><para>cannot compare iterators of different containers </para></entry><entry thead="no"><para>When two iterators are compared, they must belong to the same container. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.213 </para></entry><entry thead="no"><para>cannot compare order of object iterators </para></entry><entry thead="no"><para>The order of object iterators cannot be compated, because JSON objects are unordered. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.214 </para></entry><entry thead="no"><para>cannot get value </para></entry><entry thead="no"><para>Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to <ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref>. </para></entry></row>
</table>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1320" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" prot="public" static="no">
        <type>detail::type_error</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::type_error =  detail::type_error</definition>
        <argsstring></argsstring>
        <name>type_error</name>
        <briefdescription>
<para>exception indicating executing a member function with a wrong type </para>        </briefdescription>
        <detaileddescription>
<para>Exceptions have ids 3xx.</para><para><table rows="15" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example massage </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.301 </para></entry><entry thead="no"><para>cannot create object from initializer list </para></entry><entry thead="no"><para>To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.302 </para></entry><entry thead="no"><para>type must be object, but is array </para></entry><entry thead="no"><para>During implicit or explicit value conversion, the JSON type must be compatible to the target type. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.303 </para></entry><entry thead="no"><para>incompatible ReferenceType for get_ref, actual type is object </para></entry><entry thead="no"><para>To retrieve a reference to a value stored in a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> object with <ref refid="classnlohmann_1_1basic__json_afbd800010b67619463c0fce6e74f7878_1afbd800010b67619463c0fce6e74f7878" kindref="member">get_ref</ref>, the type of the reference must match the value type. For instance, for a JSON array, the <emphasis>ReferenceType</emphasis> must be <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>&amp;. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.304 </para></entry><entry thead="no"><para>cannot use at() with string </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.305 </para></entry><entry thead="no"><para>cannot use operator[] with string </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_ac871e3b03fb2eeca9a8de4db2bea760f_1ac871e3b03fb2eeca9a8de4db2bea760f" kindref="member">operator[]</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.306 </para></entry><entry thead="no"><para>cannot use value() with string </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.307 </para></entry><entry thead="no"><para>cannot use erase() with string </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_1a068a16e76be178e83da6a192916923ed" kindref="member">erase()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.308 </para></entry><entry thead="no"><para>cannot use push_back() with string </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back()</ref> and <ref refid="classnlohmann_1_1basic__json_aea1085f2d35cc0e1ce119cf0110119e6_1aea1085f2d35cc0e1ce119cf0110119e6" kindref="member">operator+=</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.309 </para></entry><entry thead="no"><para>cannot use insert() with </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_a0136728f5db69d4051c77b94307abd6c_1a0136728f5db69d4051c77b94307abd6c" kindref="member">insert()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.310 </para></entry><entry thead="no"><para>cannot use swap() with number </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_a66d4de311f79f2fe640793ab7a178781_1a66d4de311f79f2fe640793ab7a178781" kindref="member">swap()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.311 </para></entry><entry thead="no"><para>cannot use emplace_back() with string </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_ade45be7a74af7aa2d447e555d48e39ea_1ade45be7a74af7aa2d447e555d48e39ea" kindref="member">emplace_back()</ref> member function can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.313 </para></entry><entry thead="no"><para>invalid value to unflatten </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" kindref="member">unflatten</ref> function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value. The JSON Pointers must not overlap, because then the resulting value would not be well defined. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.314 </para></entry><entry thead="no"><para>only objects can be unflattened </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" kindref="member">unflatten</ref> function only works for an object whose keys are JSON Pointers. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.315 </para></entry><entry thead="no"><para>values in object must be primitive </para></entry><entry thead="no"><para>The <ref refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" kindref="member">unflatten</ref> function only works for an object whose keys are JSON Pointers and whose values are primitive. </para></entry></row>
</table>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1322" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" prot="public" static="no">
        <type>detail::out_of_range</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::out_of_range =  detail::out_of_range</definition>
        <argsstring></argsstring>
        <name>out_of_range</name>
        <briefdescription>
<para>exception indicating access out of the defined range </para>        </briefdescription>
        <detaileddescription>
<para>Exceptions have ids 4xx.</para><para><table rows="7" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example massage </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.401 </para></entry><entry thead="no"><para>array index 3 is out of range </para></entry><entry thead="no"><para>The provided array index <emphasis>i</emphasis> is larger than <emphasis>size-1</emphasis>. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.402 </para></entry><entry thead="no"><para>array index &apos;-&apos; (3) is out of range </para></entry><entry thead="no"><para>The special array index <computeroutput>-</computeroutput> in a JSON Pointer never describes a valid element of the array, but the index past the end. That is, it can only be used to add elements at this position, but not to read it. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.403 </para></entry><entry thead="no"><para>key &apos;foo&apos; not found </para></entry><entry thead="no"><para>The provided key was not found in the JSON object. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.404 </para></entry><entry thead="no"><para>unresolved reference token &apos;foo&apos; </para></entry><entry thead="no"><para>A reference token in a JSON Pointer could not be resolved. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.405 </para></entry><entry thead="no"><para>JSON pointer has no parent </para></entry><entry thead="no"><para>The JSON Patch operations &apos;remove&apos; and &apos;add&apos; can not be applied to the root element of the JSON value. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.406 </para></entry><entry thead="no"><para>number overflow parsing &apos;10E1000&apos; </para></entry><entry thead="no"><para>A parsed number could not be stored as without changing it to NaN or INF. </para></entry></row>
</table>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1324" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a3333a5a8714912adda33a35b369f7b3d_1a3333a5a8714912adda33a35b369f7b3d" prot="public" static="no">
        <type>detail::other_error</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::other_error =  detail::other_error</definition>
        <argsstring></argsstring>
        <name>other_error</name>
        <briefdescription>
<para>exception indicating other errors </para>        </briefdescription>
        <detaileddescription>
<para>Exceptions have ids 5xx.</para><para><table rows="2" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example massage </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.other_error.501 </para></entry><entry thead="no"><para>unsuccessful: {&quot;op&quot;:&quot;test&quot;,&quot;path&quot;:&quot;/baz&quot;, &quot;value&quot;:&quot;bar&quot;} </para></entry><entry thead="no"><para>A JSON Patch operation &apos;test&apos; failed. The unsuccessful operation is also printed. </para></entry></row>
</table>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1326" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1326" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>container types</header>
      <description><para>The canonic container types to use <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> like any other STL container. </para></description>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a2b3297873b70c080837e8eedc4fec32f_1a2b3297873b70c080837e8eedc4fec32f" prot="public" static="no">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value_type =  basic_json</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>the type of elements in a basic_json container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1341" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" prot="public" static="no">
        <type><ref refid="classnlohmann_1_1basic__json_a2b3297873b70c080837e8eedc4fec32f_1a2b3297873b70c080837e8eedc4fec32f" kindref="member">value_type</ref> &amp;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>the type of an element reference </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1344" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" prot="public" static="no">
        <type>const <ref refid="classnlohmann_1_1basic__json_a2b3297873b70c080837e8eedc4fec32f_1a2b3297873b70c080837e8eedc4fec32f" kindref="member">value_type</ref> &amp;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::const_reference =  const value_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>the type of an element const reference </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1346" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_afe7c1303357e19cea9527af4e9a31d8f_1afe7c1303357e19cea9527af4e9a31d8f" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>a type to represent differences between iterators </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1349" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>a type to represent container sizes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1351" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a86ce930490cf7773b26f5ef49c04a350_1a86ce930490cf7773b26f5ef49c04a350" prot="public" static="no">
        <type>AllocatorType&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::allocator_type =  AllocatorType&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
<para>the allocator type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1354" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_aefee1f777198c68724bd127e0c8abbe4_1aefee1f777198c68724bd127e0c8abbe4" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classnlohmann_1_1basic__json_a86ce930490cf7773b26f5ef49c04a350_1a86ce930490cf7773b26f5ef49c04a350" kindref="member">allocator_type</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_aefee1f777198c68724bd127e0c8abbe4_1aefee1f777198c68724bd127e0c8abbe4" kindref="member">pointer</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::pointer =  typename std::allocator_traits&lt;allocator_type&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>the type of an element pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1357" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_aff3d5cd2a75612364b888d8693231b58_1aff3d5cd2a75612364b888d8693231b58" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="classnlohmann_1_1basic__json_a86ce930490cf7773b26f5ef49c04a350_1a86ce930490cf7773b26f5ef49c04a350" kindref="member">allocator_type</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_aff3d5cd2a75612364b888d8693231b58_1aff3d5cd2a75612364b888d8693231b58" kindref="member">const_pointer</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::const_pointer =  typename std::allocator_traits&lt;allocator_type&gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>the type of an element const pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1359" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" prot="public" static="no">
        <type><ref refid="classnlohmann_1_1basic__json_1_1iter__impl" kindref="compound">iter_impl</ref>&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iterator =  iter_impl&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>an iterator for a basic_json container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1362" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" prot="public" static="no">
        <type><ref refid="classnlohmann_1_1basic__json_1_1iter__impl" kindref="compound">iter_impl</ref>&lt; const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::const_iterator =  iter_impl&lt;const basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>a const iterator for a basic_json container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1364" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_ac223d5560c2b05a208c88de67376c5f2_1ac223d5560c2b05a208c88de67376c5f2" prot="public" static="no">
        <type><ref refid="classnlohmann_1_1basic__json_1_1json__reverse__iterator" kindref="compound">json_reverse_iterator</ref>&lt; typename <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">basic_json::iterator</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::reverse_iterator =  json_reverse_iterator&lt;typename basic_json::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>a reverse iterator for a basic_json container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1366" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" prot="public" static="no">
        <type><ref refid="classnlohmann_1_1basic__json_1_1json__reverse__iterator" kindref="compound">json_reverse_iterator</ref>&lt; typename <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">basic_json::const_iterator</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::const_reverse_iterator =  json_reverse_iterator&lt;typename basic_json::const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>a const reverse iterator for a basic_json container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1368" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1368" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON value data types</header>
      <description><para>The data types to store a JSON value. These types are derived from the template arguments passed to class <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>. </para></description>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" prot="public" static="no">
        <type>ObjectType&lt; StringType, <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, std::less&lt; StringType &gt;, AllocatorType&lt; std::pair&lt; const StringType, <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;&gt;&gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::object_t =  ObjectType&lt;StringType, basic_json, std::less&lt;StringType&gt;, AllocatorType&lt;std::pair&lt;const StringType, basic_json&gt;&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>object_t</name>
        <briefdescription>
<para>a type for an object </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> describes JSON objects as follows: <blockquote><para>An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array. </para></blockquote></para><para>To store objects in C++, a type is defined by the template parameters described below.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ObjectType</parametername>
</parameternamelist>
<parameterdescription>
<para>the container to store objects (e.g., <computeroutput>std::map</computeroutput> or <computeroutput>std::unordered_map</computeroutput>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StringType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the keys or names (e.g., <computeroutput>std::string</computeroutput>). The comparison function <computeroutput>std::less&lt;StringType&gt;</computeroutput> is used to order elements inside the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocatorType</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator to use for objects (e.g., <computeroutput>std::allocator</computeroutput>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>ObjectType</emphasis> (<computeroutput>std::map</computeroutput>), <emphasis>StringType</emphasis> (<computeroutput>std::string</computeroutput>), and <emphasis>AllocatorType</emphasis> (<computeroutput>std::allocator</computeroutput>), the default value for <emphasis>object_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">std::map&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string,<sp/></highlight><highlight class="comment">//<sp/>key_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_1a32124a16dc80729d964d9caf607c2bc8" kindref="member">basic_json</ref>,<sp/></highlight><highlight class="comment">//<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::less&lt;std::string&gt;,<sp/></highlight><highlight class="comment">//<sp/>key_compare</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::allocator&lt;std::pair&lt;const<sp/>std::string,<sp/>basic_json&gt;&gt;<sp/></highlight><highlight class="comment">//<sp/>allocator_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
</programlisting></para><para><heading level="4">Behavior</heading>
</para><para>The choice of <emphasis>object_t</emphasis> influences the behavior of the JSON class. With the default type, objects have the following behavior:</para><para><itemizedlist>
<listitem><para>When all names are unique, objects will be interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings.</para></listitem><listitem><para>When the names within an object are not unique, later stored name/value pairs overwrite previously stored name/value pairs, leaving the used names unique. For instance, <computeroutput>{&quot;key&quot;: 1}</computeroutput> and <computeroutput>{&quot;key&quot;: 2, &quot;key&quot;: 1}</computeroutput> will be treated as equal and both stored as <computeroutput>{&quot;key&quot;: 1}</computeroutput>.</para></listitem><listitem><para>Internally, name/value pairs are stored in lexicographical order of the names. Objects will also be serialized (see <ref refid="classnlohmann_1_1basic__json_a67212c259e9c0e17d47f4c5167e71b9e_1a67212c259e9c0e17d47f4c5167e71b9e" kindref="member">dump</ref>) in this order. For instance, <computeroutput>{&quot;b&quot;: 1, &quot;a&quot;: 2}</computeroutput> and <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput> will be stored and serialized as <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput>.</para></listitem><listitem><para>When comparing objects, the order of the name/value pairs is irrelevant. This makes objects interoperable in the sense that they will not be affected by these differences. For instance, <computeroutput>{&quot;b&quot;: 1, &quot;a&quot;: 2}</computeroutput> and <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput> will be treated as equal.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> specifies: <blockquote><para>An implementation may set limits on the maximum depth of nesting. </para></blockquote></para><para>In this class, the object&apos;s limit of nesting is not constraint explicitly. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <ref refid="classnlohmann_1_1basic__json_a2f47d3c6a441c57dd2be00449fbb88e1_1a2f47d3c6a441c57dd2be00449fbb88e1" kindref="member">max_size</ref> function of a JSON object.</para><para><heading level="4">Storage</heading>
</para><para>Objects are stored as pointers in a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to object values, a pointer of type <computeroutput>object_t*</computeroutput> must be dereferenced.</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> <ndash/> type for an array value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
<simplesect kind="note"><para>The order name/value pairs are added to the object is <emphasis>not</emphasis> preserved by the library. Therefore, iterating an object may return name/value pairs in a different order than they were originally stored. In fact, keys will be traversed in alphabetical order as <computeroutput>std::map</computeroutput> with <computeroutput>std::less</computeroutput> is used by default. Please note this behavior conforms to <ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink>, because any order implements the specified &quot;unordered&quot; nature of JSON objects. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1549" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" prot="public" static="no">
        <type>ArrayType&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, AllocatorType&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;&gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::array_t =  ArrayType&lt;basic_json, AllocatorType&lt;basic_json&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>array_t</name>
        <briefdescription>
<para>a type for an array </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> describes JSON arrays as follows: <blockquote><para>An array is an ordered sequence of zero or more values. </para></blockquote></para><para>To store objects in C++, a type is defined by the template parameters explained below.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ArrayType</parametername>
</parameternamelist>
<parameterdescription>
<para>container type to store arrays (e.g., <computeroutput>std::vector</computeroutput> or <computeroutput>std::list</computeroutput>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocatorType</parametername>
</parameternamelist>
<parameterdescription>
<para>allocator to use for arrays (e.g., <computeroutput>std::allocator</computeroutput>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>ArrayType</emphasis> (<computeroutput>std::vector</computeroutput>) and <emphasis>AllocatorType</emphasis> (<computeroutput>std::allocator</computeroutput>), the default value for <emphasis>array_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">std::vector&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_1a32124a16dc80729d964d9caf607c2bc8" kindref="member">basic_json</ref>,<sp/></highlight><highlight class="comment">//<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::allocator&lt;basic_json&gt;<sp/></highlight><highlight class="comment">//<sp/>allocator_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
</programlisting></para><para><heading level="4">Limits</heading>
</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> specifies: <blockquote><para>An implementation may set limits on the maximum depth of nesting. </para></blockquote></para><para>In this class, the array&apos;s limit of nesting is not constraint explicitly. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <ref refid="classnlohmann_1_1basic__json_a2f47d3c6a441c57dd2be00449fbb88e1_1a2f47d3c6a441c57dd2be00449fbb88e1" kindref="member">max_size</ref> function of a JSON array.</para><para><heading level="4">Storage</heading>
</para><para>Arrays are stored as pointers in a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to array values, a pointer of type <computeroutput>array_t*</computeroutput> must be dereferenced.</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> <ndash/> type for an object value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1599" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" prot="public" static="no">
        <type>StringType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::string_t =  StringType</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
<para>a type for a string </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> describes JSON strings as follows: <blockquote><para>A string is a sequence of zero or more Unicode characters. </para></blockquote></para><para>To store objects in C++, a type is defined by the template parameter described below. Unicode values are split by the JSON class into byte-sized characters during deserialization.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>StringType</parametername>
</parameternamelist>
<parameterdescription>
<para>the container to store strings (e.g., <computeroutput>std::string</computeroutput>). Note this container is used for keys/names in objects, see <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>StringType</emphasis> (<computeroutput>std::string</computeroutput>), the default value for <emphasis>string_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">std::string</highlight></codeline>
</programlisting></para><para><heading level="4">Encoding</heading>
</para><para>Strings are stored in UTF-8 encoding. Therefore, functions like <computeroutput>std::string::size()</computeroutput> or <computeroutput>std::string::length()</computeroutput> return the number of bytes in the string rather than the number of characters or glyphs.</para><para><heading level="4">String comparison</heading>
</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> states: <blockquote><para>Software implementations are typically required to test names of object members for equality. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that <computeroutput>&quot;a\\\\b&quot;</computeroutput> and <computeroutput>&quot;a\\u005Cb&quot;</computeroutput> are not equal. </para></blockquote></para><para>This implementation is interoperable as it does compare strings code unit by code unit.</para><para><heading level="4">Storage</heading>
</para><para>String values are stored as pointers in a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to string values, a pointer of type <computeroutput>string_t*</computeroutput> must be dereferenced.</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1652" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" prot="public" static="no">
        <type>BooleanType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::boolean_t =  BooleanType</definition>
        <argsstring></argsstring>
        <name>boolean_t</name>
        <briefdescription>
<para>a type for a boolean </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> implicitly describes a boolean as a type which differentiates the two literals <computeroutput>true</computeroutput> and <computeroutput>false</computeroutput>.</para><para>To store objects in C++, a type is defined by the template parameter <emphasis>BooleanType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>BooleanType</emphasis> (<computeroutput>bool</computeroutput>), the default value for <emphasis>boolean_t</emphasis> is:</para><para><programlisting><codeline><highlight class="keywordtype">bool</highlight></codeline>
</programlisting></para><para><heading level="4">Storage</heading>
</para><para>Boolean values are stored directly inside a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1678" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" prot="public" static="no">
        <type>NumberIntegerType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::number_integer_t =  NumberIntegerType</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
<para>a type for a number (integer) </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> describes numbers as follows: <blockquote><para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para></blockquote></para><para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> and <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> are used.</para><para>To store integer numbers in C++, a type is defined by the template parameter <emphasis>NumberIntegerType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>NumberIntegerType</emphasis> (<computeroutput>int64_t</computeroutput>), the default value for <emphasis>number_integer_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">int64_t</highlight></codeline>
</programlisting></para><para><heading level="4">Default behavior</heading>
</para><para><itemizedlist>
<listitem><para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <computeroutput>010</computeroutput> will be serialized to <computeroutput>8</computeroutput>. During deserialization, leading zeros yield an error.</para></listitem><listitem><para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> specifies: <blockquote><para>An implementation may set limits on the range and precision of numbers. </para></blockquote></para><para>When the default type is used, the maximal integer number that can be stored is <computeroutput>9223372036854775807</computeroutput> (INT64_MAX) and the minimal integer number that can be stored is <computeroutput>-9223372036854775808</computeroutput> (INT64_MIN). Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>.</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> further states: <blockquote><para>Note that when such software is used, numbers that are integers and are in the range <formula id="0">$[-2^{53}+1, 2^{53}-1]$</formula> are interoperable in the sense that implementations will agree exactly on their numeric values. </para></blockquote></para><para>As this range is a subrange of the exactly supported range [INT64_MIN, INT64_MAX], this class&apos;s integer type is interoperable.</para><para><heading level="4">Storage</heading>
</para><para>Integer number values are stored directly inside a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> <ndash/> type for number values (floating-point)</para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> <ndash/> type for number values (unsigned integer)</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1750" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" prot="public" static="no">
        <type>NumberUnsignedType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::number_unsigned_t =  NumberUnsignedType</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
<para>a type for a number (unsigned) </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> describes numbers as follows: <blockquote><para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para></blockquote></para><para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> and <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> are used.</para><para>To store unsigned integer numbers in C++, a type is defined by the template parameter <emphasis>NumberUnsignedType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>NumberUnsignedType</emphasis> (<computeroutput>uint64_t</computeroutput>), the default value for <emphasis>number_unsigned_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">uint64_t</highlight></codeline>
</programlisting></para><para><heading level="4">Default behavior</heading>
</para><para><itemizedlist>
<listitem><para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <computeroutput>010</computeroutput> will be serialized to <computeroutput>8</computeroutput>. During deserialization, leading zeros yield an error.</para></listitem><listitem><para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> specifies: <blockquote><para>An implementation may set limits on the range and precision of numbers. </para></blockquote></para><para>When the default type is used, the maximal integer number that can be stored is <computeroutput>18446744073709551615</computeroutput> (UINT64_MAX) and the minimal integer number that can be stored is <computeroutput>0</computeroutput>. Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>.</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> further states: <blockquote><para>Note that when such software is used, numbers that are integers and are in the range <formula id="0">$[-2^{53}+1, 2^{53}-1]$</formula> are interoperable in the sense that implementations will agree exactly on their numeric values. </para></blockquote></para><para>As this range is a subrange (when considered in conjunction with the number_integer_t type) of the exactly supported range [0, UINT64_MAX], this class&apos;s integer type is interoperable.</para><para><heading level="4">Storage</heading>
</para><para>Integer number values are stored directly inside a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> <ndash/> type for number values (floating-point) </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> <ndash/> type for number values (integer)</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1821" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" prot="public" static="no">
        <type>NumberFloatType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::number_float_t =  NumberFloatType</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
<para>a type for a number (floating-point) </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> describes numbers as follows: <blockquote><para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para></blockquote></para><para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> and <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> are used.</para><para>To store floating-point numbers in C++, a type is defined by the template parameter <emphasis>NumberFloatType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>NumberFloatType</emphasis> (<computeroutput>double</computeroutput>), the default value for <emphasis>number_float_t</emphasis> is:</para><para><programlisting><codeline><highlight class="keywordtype">double</highlight></codeline>
</programlisting></para><para><heading level="4">Default behavior</heading>
</para><para><itemizedlist>
<listitem><para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in floating-point literals will be ignored. Internally, the value will be stored as decimal number. For instance, the C++ floating-point literal <computeroutput>01.2</computeroutput> will be serialized to <computeroutput>1.2</computeroutput>. During deserialization, leading zeros yield an error.</para></listitem><listitem><para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159</ulink> states: <blockquote><para>This specification allows implementations to set limits on the range and precision of numbers accepted. Since software that implements IEEE 754-2008 binary64 (double precision) numbers is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision. </para></blockquote></para><para>This implementation does exactly follow this approach, as it uses double precision floating-point numbers. Note values smaller than <computeroutput>-1.79769313486232e+308</computeroutput> and values greater than <computeroutput>1.79769313486232e+308</computeroutput> will be stored as NaN internally and be serialized to <computeroutput>null</computeroutput>.</para><para><heading level="4">Storage</heading>
</para><para>Floating-point number values are stored directly inside a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> <ndash/> type for number values (integer)</para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> <ndash/> type for number values (unsigned integer)</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1889" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1889" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>constructors and destructors</header>
      <description><para>Constructors of class <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </para></description>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::array</definition>
        <argsstring>(std::initializer_list&lt; basic_json &gt; init=std::initializer_list&lt; basic_json &gt;())</argsstring>
        <name>array</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>init</declname>
          <defval>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>explicitly create an array from an initializer list </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON array value from a given initializer list. That is, given a list of values <computeroutput>a, b, c</computeroutput>, creates the JSON value <computeroutput>[a, b, c]</computeroutput>. If the initializer list is empty, the empty array <computeroutput>[]</computeroutput> is created.</para><para><simplesect kind="note"><para>This function is only needed to express two edge cases that cannot be realized with the initializer list constructor (<ref refid="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" kindref="member">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</ref>). These cases are:<orderedlist>
<listitem><para>creating an array whose elements are all pairs whose first element is a string <ndash/> in this case, the initializer list constructor would create an object, taking the first elements as keys</para></listitem><listitem><para>creating an empty array <ndash/> passing the empty initializer list to the initializer list constructor yields an empty object</para></listitem></orderedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list with JSON values to create an array from (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON array value</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of <emphasis>init</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for the <computeroutput>array</computeroutput> function. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_no_init_list<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">json::array</ref>();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_empty_init_list<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">json::array</ref>({});</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_nonempty_init_list<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">json::array</ref>({1,<sp/>2,<sp/>3,<sp/>4});</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_list_of_pairs<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">json::array</ref>({<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}<sp/>});</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_no_init_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_empty_init_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_nonempty_init_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_list_of_pairs<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/1fsm4gI55p83DOwU&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[]
[]
[1,2,3,4]
[[&quot;one&quot;,1],[&quot;two&quot;,2]]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/array.cpp -o array </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" kindref="member">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</ref> <ndash/> create a JSON value from an initializer list </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">object(std::initializer_list&lt;basic_json&gt;)</ref> <ndash/> create a JSON object value from an initializer list</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2435" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2435" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::object</definition>
        <argsstring>(std::initializer_list&lt; basic_json &gt; init=std::initializer_list&lt; basic_json &gt;())</argsstring>
        <name>object</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>init</declname>
          <defval>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>explicitly create an object from an initializer list </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON object value from a given initializer list. The initializer lists elements must be pairs, and their first elements must be strings. If the initializer list is empty, the empty object <computeroutput>{}</computeroutput> is created.</para><para><simplesect kind="note"><para>This function is only added for symmetry reasons. In contrast to the related function <ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">array(std::initializer_list&lt;basic_json&gt;)</ref>, there are no cases which can only be expressed by this function. That is, any initializer list <emphasis>init</emphasis> can also be passed to the initializer list constructor <ref refid="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" kindref="member">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list to create an object from (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON object value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.301</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>init</emphasis> is not a list of pairs whose first elements are strings. In this case, no object can be created. When such a value is passed to <ref refid="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" kindref="member">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</ref>, an array would have been created from the passed initializer list <emphasis>init</emphasis>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of <emphasis>init</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for the <computeroutput>object</computeroutput> function. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_no_init_list<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">json::object</ref>();</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_empty_init_list<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">json::object</ref>({});</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_list_of_pairs<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">json::object</ref>({<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}<sp/>});</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_no_init_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_empty_init_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_list_of_pairs<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example<sp/>for<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>only<sp/>create<sp/>an<sp/>object<sp/>from<sp/>a<sp/>list<sp/>of<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_invalid_object<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">json::object</ref>({{<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>2<sp/>}});</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Ub9U5AMbng3oZiao&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{}
{}
{&quot;one&quot;:1,&quot;two&quot;:2}
[json.exception.type_error.301] cannot create object from initializer list
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/object.cpp -o object </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" kindref="member">basic_json(std::initializer_list&lt;basic_json&gt;, bool, value_t)</ref> <ndash/> create a JSON value from an initializer list </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">array(std::initializer_list&lt;basic_json&gt;)</ref> <ndash/> create a JSON array value from an initializer list</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2476" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2476" bodyend="2480"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_1a32124a16dc80729d964d9caf607c2bc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(const value_t value_type)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref></type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
<para>create an empty value with a given type </para>        </briefdescription>
        <detaileddescription>
<para>Create an empty JSON value with a given type. The value will be default initialized with an empty value which depends on the type:</para><para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>initial value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><computeroutput>{}</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><computeroutput>[]</computeroutput> </para></entry></row>
</table>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the value to create</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows the constructor for different <ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref> values <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>different<sp/>JSON<sp/>values<sp/>with<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null(json::value_t::null);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean(json::value_t::boolean);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer(json::value_t::number_integer);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float(json::value_t::number_float);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object(json::value_t::object);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array(json::value_t::array);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string(json::value_t::string);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/RMpEI2o935KgD2o2&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
false
0
0.0
{}
[]
&quot;&quot;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__value_t.cpp -o basic_json__value_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2184" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2184" bodyend="2188"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ae9be9e956bfc4658f35d17c6aa72b063_1ae9be9e956bfc4658f35d17c6aa72b063" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(std::nullptr_t=nullptr) noexcept</argsstring>
        <name>basic_json</name>
        <param>
          <type>std::nullptr_t</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>create a null object </para>        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput>null</computeroutput> JSON value. It either takes a null pointer as parameter (explicitly creating <computeroutput>null</computeroutput>) or no parameter (implicitly creating <computeroutput>null</computeroutput>). The passed null pointer itself is not read <ndash/> it is only used to choose the right constructor.</para><para><simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this constructor never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows the constructor with and without a null pointer parameter. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implicitly<sp/>create<sp/>a<sp/>JSON<sp/>null<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j1;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>create<sp/>a<sp/>JSON<sp/>null<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j2(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>null<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/9Tvfs2dJBW8m8ihA&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
null
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__nullptr_t.cpp -o basic_json__nullptr_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2208" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2208" bodyend="2212"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a7639e0834df2bc719a04ffea89b31abc_1a7639e0834df2bc719a04ffea89b31abc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompatibleType</type>
          </param>
          <param>
            <type>typename U</type>
            <defval>detail::uncvref_t&lt;CompatibleType&gt;</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; not std::is_base_of&lt; std::istream, U &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andnot std::is_same&lt; U, <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andnot detail::is_basic_json_nested_type&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, U &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> anddetail::has_to_json&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, U &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(CompatibleType &amp;&amp;val) noexcept(noexcept(JSONSerializer&lt; U &gt;::to_json(std::declval&lt; basic_json_t &amp; &gt;(), std::forward&lt; CompatibleType &gt;(val))))</argsstring>
        <name>basic_json</name>
        <param>
          <type>CompatibleType &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value </para>        </briefdescription>
        <detaileddescription>
<para>This is a &quot;catch all&quot; constructor for all compatible JSON types; that is, types for which a <computeroutput>to_json()</computeroutput> method exsits. The constructor forwards the parameter <emphasis>val</emphasis> to that method (to <computeroutput>json_serializer&lt;U&gt;to_json</computeroutput> method with <computeroutput>U = uncvref_t&lt;CompatibleType&gt;</computeroutput>, to be exact).</para><para>Template type <emphasis>CompatibleType</emphasis> includes, but is not limited to, the following types:<itemizedlist>
<listitem><para><bold>arrays</bold>: <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> and all kinds of compatible containers such as <computeroutput>std::vector</computeroutput>, <computeroutput>std::deque</computeroutput>, <computeroutput>std::list</computeroutput>, <computeroutput>std::forward_list</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::set</computeroutput>, <computeroutput>std::unordered_set</computeroutput>, <computeroutput>std::multiset</computeroutput>, and <computeroutput>unordered_multiset</computeroutput> with a <computeroutput>value_type</computeroutput> from which a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> value can be constructed.</para></listitem><listitem><para><bold>objects</bold>: <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> and all kinds of compatible associative containers such as <computeroutput>std::map</computeroutput>, <computeroutput>std::unordered_map</computeroutput>, <computeroutput>std::multimap</computeroutput>, and <computeroutput>std::unordered_multimap</computeroutput> with a <computeroutput>key_type</computeroutput> compatible to <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> and a <computeroutput>value_type</computeroutput> from which a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> value can be constructed.</para></listitem><listitem><para><bold>strings</bold>: <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, string literals, and all compatible string containers can be used.</para></listitem><listitem><para><bold>numbers</bold>: <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref>, <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>, and all convertible number types such as <computeroutput>int</computeroutput>, <computeroutput>size_t</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>float</computeroutput> or <computeroutput>double</computeroutput> can be used.</para></listitem><listitem><para><bold>boolean</bold>: <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref> / <computeroutput>bool</computeroutput> can be used.</para></listitem></itemizedlist>
</para><para>See the examples below.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CompatibleType</parametername>
</parameternamelist>
<parameterdescription>
<para>a type such that:<itemizedlist>
<listitem><para><emphasis>CompatibleType</emphasis> is not derived from <computeroutput>std::istream</computeroutput>,</para></listitem><listitem><para><emphasis>CompatibleType</emphasis> is not <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> (to avoid hijacking copy/move constructors),</para></listitem><listitem><para><emphasis>CompatibleType</emphasis> is not a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> nested type (e.g., <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref>, <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref>, etc ...)</para></listitem><listitem><para><ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;U&gt;</ref> has a <computeroutput>to_json(basic_json_t&amp;, CompatibleType&amp;&amp;)</computeroutput> method</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>= <computeroutput>uncvref_t&lt;CompatibleType&gt;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to be forwarded</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Usually linear in the size of the passed <emphasis>val</emphasis>, also depending on the implementation of the called <computeroutput>to_json()</computeroutput> method.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>json_serializer&lt;U&gt;to_json()</computeroutput> throws</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The following code shows the constructor with several compatible types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;forward_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>object<sp/>from<sp/>an<sp/>object_t<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">json::object_t</ref><sp/>object_value<sp/>=<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}<sp/>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_t(object_value);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>object<sp/>from<sp/>std::map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/>c_map</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_map(c_map);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>object<sp/>from<sp/>std::unordered_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;const<sp/>char*,<sp/>double&gt;<sp/>c_umap</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1.2},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2.3},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3.4}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_umap(c_umap);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>object<sp/>from<sp/>std::multimap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::multimap&lt;std::string,<sp/>bool&gt;<sp/>c_mmap</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_mmap(c_mmap);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>entry<sp/>for<sp/>key<sp/>&quot;three&quot;<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>object<sp/>from<sp/>std::unordered_multimap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_multimap&lt;std::string,<sp/>bool&gt;<sp/>c_ummap</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_ummap(c_ummap);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>entry<sp/>for<sp/>key<sp/>&quot;three&quot;<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_map<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_umap<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_mmap<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_ummap<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>an<sp/>array_t<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">json::array_t</ref><sp/>array_value<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>4.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_t(array_value);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>c_vector<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_vec(c_vector);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::deque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;double&gt;<sp/>c_deque<sp/>{1.2,<sp/>2.3,<sp/>3.4,<sp/>5.6};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_deque(c_deque);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;bool&gt;<sp/>c_list<sp/>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_list(c_list);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::forward_list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::forward_list&lt;int64_t&gt;<sp/>c_flist<sp/>{12345678909876,<sp/>23456789098765,<sp/>34567890987654,<sp/>45678909876543};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_flist(c_flist);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;unsigned<sp/>long,<sp/>4&gt;<sp/>c_array<sp/>{{1,<sp/>2,<sp/>3,<sp/>4}};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array(c_array);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>c_set<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_set(c_set);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>entry<sp/>for<sp/>&quot;one&quot;<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::unordered_set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_set&lt;std::string&gt;<sp/>c_uset<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_uset(c_uset);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>entry<sp/>for<sp/>&quot;one&quot;<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::multiset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::multiset&lt;std::string&gt;<sp/>c_mset<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_mset(c_mset);<sp/></highlight><highlight class="comment">//<sp/>both<sp/>entries<sp/>for<sp/>&quot;one&quot;<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>from<sp/>std::unordered_multiset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_multiset&lt;std::string&gt;<sp/>c_umset<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_umset(c_umset);<sp/></highlight><highlight class="comment">//<sp/>both<sp/>entries<sp/>for<sp/>&quot;one&quot;<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_vec<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_deque<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_flist<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_set<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_uset<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_mset<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_umset<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>string<sp/>from<sp/>a<sp/>string_t<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">json::string_t</ref><sp/>string_value<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>quick<sp/>brown<sp/>fox<sp/>jumps<sp/>over<sp/>the<sp/>lazy<sp/>dog.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string_t(string_value);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>string<sp/>directly<sp/>from<sp/>a<sp/>string<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string_literal(</highlight><highlight class="stringliteral">&quot;The<sp/>quick<sp/>brown<sp/>fox<sp/>jumps<sp/>over<sp/>the<sp/>lazy<sp/>dog.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>string<sp/>from<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s_stdstring<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>quick<sp/>brown<sp/>fox<sp/>jumps<sp/>over<sp/>the<sp/>lazy<sp/>dog.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_stdstring(s_stdstring);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string_literal<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_stdstring<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number<sp/>from<sp/>number_integer_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref><sp/>value_integer_t<sp/>=<sp/>-42;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_integer_t(value_integer_t);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number<sp/>from<sp/>number_unsigned_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref><sp/>value_unsigned_t<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_unsigned_t(value_unsigned_t);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number<sp/>from<sp/>an<sp/>anonymous<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>enum_value<sp/>=<sp/>17<sp/>};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_enum(enum_value);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>values<sp/>of<sp/>different<sp/>integer<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n_short<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_int<sp/>=<sp/>-23;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n_long<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>int_least32_t<sp/>n_int_least32_t<sp/>=<sp/>-17;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>n_uint8_t<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>(integer)<sp/>JSON<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_short(n_short);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_int(n_int);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_long(n_long);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_int_least32_t(n_int_least32_t);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_uint8_t(n_uint8_t);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>values<sp/>of<sp/>different<sp/>floating-point<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref><sp/>v_ok<sp/>=<sp/>3.141592653589793;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref><sp/>v_nan<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref><sp/>v_infinity<sp/>=<sp/>INFINITY;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>values<sp/>of<sp/>different<sp/>floating-point<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n_float<sp/>=<sp/>42.23;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n_float_nan<sp/>=<sp/>1.0f<sp/>/<sp/>0.0f;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n_double<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>(floating<sp/>point)<sp/>JSON<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_ok(v_ok);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_nan(v_nan);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_infinity(v_infinity);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_float(n_float);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_float_nan(n_float_nan);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_double(n_double);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_integer_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_unsigned_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_enum<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_short<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_int<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_long<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_int_least32_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_uint8_t<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_ok<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_nan<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_infinity<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_float<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_float_nan<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_double<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boolean<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>boolean<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_truth<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_falsity<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>booleans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_truth<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_falsity<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/VM7W2kpE7sIYJ5DW&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}
{&quot;one&quot;:1,&quot;three&quot;:3,&quot;two&quot;:2}
{&quot;one&quot;:1.2,&quot;three&quot;:3.4,&quot;two&quot;:2.3}
{&quot;one&quot;:true,&quot;three&quot;:false,&quot;two&quot;:true}
{&quot;one&quot;:true,&quot;three&quot;:false,&quot;two&quot;:true}

[&quot;one&quot;,&quot;two&quot;,3,4.5,false]
[1,2,3,4]
[1.2,2.3,3.4,5.6]
[true,true,false,true]
[12345678909876,23456789098765,34567890987654,45678909876543]
[1,2,3,4]
[&quot;four&quot;,&quot;one&quot;,&quot;three&quot;,&quot;two&quot;]
[&quot;four&quot;,&quot;three&quot;,&quot;two&quot;,&quot;one&quot;]
[&quot;four&quot;,&quot;one&quot;,&quot;one&quot;,&quot;two&quot;]
[&quot;four&quot;,&quot;two&quot;,&quot;one&quot;,&quot;one&quot;]

&quot;The quick brown fox jumps over the lazy dog.&quot;
&quot;The quick brown fox jumps over the lazy dog.&quot;
&quot;The quick brown fox jumps over the lazy dog.&quot;

-42
17
17
42
-23
1024
-17
8
3.14159265358979
null
null
42.2299995422363
null
23.42

true
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__CompatibleType.cpp -o basic_json__CompatibleType </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2274" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2274" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(std::initializer_list&lt; basic_json &gt; init, bool type_deduction=true, value_t manual_type=value_t::array)</argsstring>
        <name>basic_json</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>type_deduction</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref></type>
          <declname>manual_type</declname>
          <defval>value_t::array</defval>
        </param>
        <briefdescription>
<para>create a container (array or object) from an initializer list </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON value of type array or object from the passed initializer list <emphasis>init</emphasis>. In case <emphasis>type_deduction</emphasis> is <computeroutput>true</computeroutput> (default), the type of the JSON value to be created is deducted from the initializer list <emphasis>init</emphasis> according to the following rules:</para><para><orderedlist>
<listitem><para>If the list is empty, an empty JSON object value <computeroutput>{}</computeroutput> is created.</para></listitem><listitem><para>If the list consists of pairs whose first element is a string, a JSON object value is created where the first elements of the pairs are treated as keys and the second elements are as values.</para></listitem><listitem><para>In all other cases, an array is created.</para></listitem></orderedlist>
</para><para>The rules aim to create the best fit between a C++ initializer list and JSON values. The rationale is as follows:</para><para><orderedlist>
<listitem><para>The empty initializer list is written as <computeroutput>{}</computeroutput> which is exactly an empty JSON object.</para></listitem><listitem><para>C++ has now way of describing mapped types other than to list a list of pairs. As JSON requires that keys must be of type string, rule 2 is the weakest constraint one can pose on initializer lists to interpret them as an object.</para></listitem><listitem><para>In all other cases, the initializer list could not be interpreted as JSON object type, so interpreting it as JSON array type is safe.</para></listitem></orderedlist>
</para><para>With the rules described above, the following JSON values cannot be expressed by an initializer list:</para><para><itemizedlist>
<listitem><para>the empty array (<computeroutput>[]</computeroutput>): use <ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">array(std::initializer_list&lt;basic_json&gt;)</ref> with an empty initializer list in this case</para></listitem><listitem><para>arrays whose elements satisfy rule 2: use <ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">array(std::initializer_list&lt;basic_json&gt;)</ref> with the same initializer list in this case</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>When used without parentheses around an empty initializer list, <ref refid="classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_1a32124a16dc80729d964d9caf607c2bc8" kindref="member">basic_json()</ref> is called instead of this function, yielding the JSON null value.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list with JSON values</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type_deduction</parametername>
</parameternamelist>
<parameterdescription>
<para>internal parameter; when set to <computeroutput>true</computeroutput>, the type of the JSON value is deducted from the initializer list <emphasis>init</emphasis>; when set to <computeroutput>false</computeroutput>, the type provided via <emphasis>manual_type</emphasis> is forced. This mode is used by the functions <ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">array(std::initializer_list&lt;basic_json&gt;)</ref> and <ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">object(std::initializer_list&lt;basic_json&gt;)</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">manual_type</parametername>
</parameternamelist>
<parameterdescription>
<para>internal parameter; when <emphasis>type_deduction</emphasis> is set to <computeroutput>false</computeroutput>, the created JSON value will use the provided type (only value_t::array and value_t::object are valid); when <emphasis>type_deduction</emphasis> is set to <computeroutput>true</computeroutput>, this parameter has no effect</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.301</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>type_deduction</emphasis> is <computeroutput>false</computeroutput>, <emphasis>manual_type</emphasis> is <computeroutput>value_t::object</computeroutput>, but <emphasis>init</emphasis> contains an element which is not a pair whose first element is a string. In this case, the constructor could not create an object. If <emphasis>type_deduction</emphasis> would have be <computeroutput>true</computeroutput>, an array would have been created. See <ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">object(std::initializer_list&lt;basic_json&gt;)</ref> for an example.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the initializer list <emphasis>init</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how JSON values are created from initializer lists. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_empty_init_list<sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>({});</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}<sp/>};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_nested_object<sp/>=<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>{1}},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2}}<sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_nested_array<sp/>=<sp/>{<sp/>{{1},<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">},<sp/>{{1,<sp/>2},<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">}<sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_empty_init_list<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_nested_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_nested_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/iZzzxEpB7tbhz0cx&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{}
{&quot;one&quot;:1,&quot;two&quot;:2}
[1,2,3,4]
{&quot;one&quot;:[1],&quot;two&quot;:[1,2]}
[[[1],&quot;one&quot;],[[1,2],&quot;two&quot;]]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__list_init_t.cpp -o basic_json__list_init_t </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" kindref="member">array(std::initializer_list&lt;basic_json&gt;)</ref> <ndash/> create a JSON array value from an initializer list </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" kindref="member">object(std::initializer_list&lt;basic_json&gt;)</ref> <ndash/> create a JSON object value from an initializer list</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2352" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2352" bodyend="2399"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ab6816ae5100409254ed0a8bc21c387bb_1ab6816ae5100409254ed0a8bc21c387bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(size_type cnt, const basic_json &amp;val)</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>construct an array with count copies of given value </para>        </briefdescription>
        <detaileddescription>
<para>Constructs a JSON array value by creating <emphasis>cnt</emphasis> copies of a passed value. In case <emphasis>cnt</emphasis> is <computeroutput>0</computeroutput>, an empty array is created. As postcondition, <computeroutput>std::distance(begin(),end()) == cnt</computeroutput> holds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of JSON copies of <emphasis>val</emphasis> to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the JSON value to copy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in <emphasis>cnt</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows examples for the <ref refid="classnlohmann_1_1basic__json_ab6816ae5100409254ed0a8bc21c387bb_1ab6816ae5100409254ed0a8bc21c387bb" kindref="member">basic_json(size_type, const basic_json&amp;)</ref> constructor. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>by<sp/>creating<sp/>copies<sp/>of<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_0<sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>(0,<sp/>value);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>(1,<sp/>value);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_5<sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>(5,<sp/>value);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_0<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_5<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/IFZT4VL0oRotJBxl&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[]
[&quot;Hello&quot;]
[&quot;Hello&quot;,&quot;Hello&quot;,&quot;Hello&quot;,&quot;Hello&quot;,&quot;Hello&quot;]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__size_type_basic_json.cpp -o basic_json__size_type_basic_json </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2500" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2500" bodyend="2505"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abe197e9f3184487805cfb5bba6fd5938_1abe197e9f3184487805cfb5bba6fd5938" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; InputIT, typename <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">basic_json_t::iterator</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> orstd::is_same&lt; InputIT, typename <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">basic_json_t::const_iterator</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(InputIT first, InputIT last)</argsstring>
        <name>basic_json</name>
        <param>
          <type>InputIT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIT</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>construct a JSON container given an iterator range </para>        </briefdescription>
        <detaileddescription>
<para>Constructs the JSON value with the contents of the range <computeroutput>[first, last)</computeroutput>. The semantics depends on the different types a JSON value can have:<itemizedlist>
<listitem><para>In case of primitive types (number, boolean, or string), <emphasis>first</emphasis> must be <computeroutput>begin()</computeroutput> and <emphasis>last</emphasis> must be <computeroutput>end()</computeroutput>. In this case, the value is copied. Otherwise, invalid_iterator.204 is thrown.</para></listitem><listitem><para>In case of structured types (array, object), the constructor behaves as similar versions for <computeroutput>std::vector</computeroutput>.</para></listitem><listitem><para>In case of a null type, invalid_iterator.206 is thrown.</para></listitem></itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputIT</parametername>
</parameternamelist>
<parameterdescription>
<para>an input iterator type (<ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref> or <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range to copy from (included) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range to copy from (excluded)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>Iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> must be initialized. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<simplesect kind="pre"><para>Range <computeroutput>[first, last)</computeroutput> is valid. Usually, this precondition cannot be checked efficiently. Only certain edge cases are detected; see the description of the exceptions below.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.201</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> are not compatible (i.e., do not belong to the same JSON value). In this case, the range <computeroutput>[first, last)</computeroutput> is undefined. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.204</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> belong to a primitive type (number, boolean, or string), but <emphasis>first</emphasis> does not point to the first element any more. In this case, the range <computeroutput>[first, last)</computeroutput> is undefined. See example code below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.206</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> belong to a null value. In this case, the range <computeroutput>[first, last)</computeroutput> is undefined.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in distance between <emphasis>first</emphasis> and <emphasis>last</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows several ways to create JSON values by specifying a subrange with iterators. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;alpha&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bravo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;charly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;delta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;easy&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;eins&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;zwei&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>copies<sp/>using<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_range(j_array.begin()<sp/>+<sp/>1,<sp/>j_array.end()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_range(j_number.begin(),<sp/>j_number.end());</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_range(j_object.begin(),<sp/>j_object.find(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array_range<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_range<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object_range<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example<sp/>for<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_invalid(j_number.begin()<sp/>+<sp/>1,<sp/>j_number.end());</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_ac13d32f7cbd02d616e71d8dc30dadcbf_1ac13d32f7cbd02d616e71d8dc30dadcbf" kindref="member">json::invalid_iterator</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/oUU2X0pbZq7gawRB&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[&quot;bravo&quot;,&quot;charly&quot;]
42
{&quot;one&quot;:&quot;eins&quot;}
[json.exception.invalid_iterator.204] iterators out of range
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__InputIt_InputIt.cpp -o basic_json__InputIt_InputIt </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2552" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2552" bodyend="2642"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_af5de621bcf646c332343f9c1e011126c_1af5de621bcf646c332343f9c1e011126c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(const basic_json &amp;other)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
<para>Creates a copy of a given JSON value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>the JSON value to copy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of <emphasis>other</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is linear.</para></listitem><listitem><para>As postcondition, it holds: <computeroutput>other == basic_json(other)</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for the copy constructor. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j1<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>4.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j2(j1);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>(j1<sp/>==<sp/>j2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/6Qfn12BDzb3vqO5p&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[&quot;one&quot;,&quot;two&quot;,3,4.5,false] = [&quot;one&quot;,&quot;two&quot;,3,4.5,false]
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__basic_json.cpp -o basic_json__basic_json </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2669" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2669" bodyend="2726"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9a06d1efd50a00f4889f831f851ce124_1a9a06d1efd50a00f4889f831f851ce124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json</definition>
        <argsstring>(basic_json &amp;&amp;other) noexcept</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
<para>Move constructor. Constructs a JSON value with the contents of the given value <emphasis>other</emphasis> using move semantics. It &quot;steals&quot; the resources from <emphasis>other</emphasis> and leaves it as JSON null value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>value to move to this object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><emphasis>other</emphasis> is a JSON null value</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The code below shows the move constructor explicitly called via std::move. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>a<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>contents<sp/>of<sp/>a<sp/>to<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>b(std::move(a));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/CaDlatv1uXhQiu7o&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
23
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__moveconstructor.cpp -o basic_json__moveconstructor </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2746" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2746" bodyend="2758"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a175607715d6c65e8901038ebb629a5b9_1a175607715d6c65e8901038ebb629a5b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref> &amp;</type>
        <definition>reference&amp; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator=</definition>
        <argsstring>(basic_json other) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value andstd::is_nothrow_move_assignable&lt; value_t &gt;::value andstd::is_nothrow_move_constructible&lt; json_value &gt;::value andstd::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy assignment </para>        </briefdescription>
        <detaileddescription>
<para>Copy assignment operator. Copies a JSON value via the &quot;copy and swap&quot; strategy: It is expressed in terms of the copy constructor, destructor, and the swap() member function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>value to copy from</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is linear.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The code below shows and example for the copy assignment. It creates a copy of value <computeroutput>a</computeroutput> which is then swapped with <computeroutput>b</computeroutput>. Finally, the copy of <computeroutput>a</computeroutput> (which is the null value after the swap) is destroyed. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>a<sp/>=<sp/>23;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>b<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy-assign<sp/>a<sp/>to<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>JSON<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/iWYvmlA4qQmtvACX&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>23
23
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__copyassignment.cpp -o basic_json__copyassignment </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2783" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2783" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a42347bbce75ba5571e292a3540af30e0_1a42347bbce75ba5571e292a3540af30e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::~basic_json</definition>
        <argsstring>()</argsstring>
        <name>~basic_json</name>
        <briefdescription>
<para>destructor </para>        </briefdescription>
        <detaileddescription>
<para>Destroys the JSON value and frees all allocated memory.</para><para><simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is linear.</para></listitem><listitem><para>All stored elements are destroyed and all memory is freed.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2816" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2816" bodyend="2852"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>object inspection</header>
      <description><para>Functions to inspect the type of a JSON value. </para></description>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a67212c259e9c0e17d47f4c5167e71b9e_1a67212c259e9c0e17d47f4c5167e71b9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::dump</definition>
        <argsstring>(const int indent=-1) const </argsstring>
        <name>dump</name>
        <param>
          <type>const int</type>
          <declname>indent</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>serialization </para>        </briefdescription>
        <detaileddescription>
<para>Serialization function for JSON values. The function tries to mimic Python&apos;s <computeroutput>json.dumps()</computeroutput> function, and currently supports its <emphasis>indent</emphasis> parameter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">indent</parametername>
</parameternamelist>
<parameterdescription>
<para>If indent is nonnegative, then array elements and object members will be pretty-printed with that indent level. An indent level of <computeroutput>0</computeroutput> will only insert newlines. <computeroutput>-1</computeroutput> (the default) selects the most compact representation.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string containing the serialization of the JSON value</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following example shows the effect of different <emphasis>indent</emphasis> parameters to the result of the serialization. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>dump()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.dump()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.dump(-1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.dump(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.dump(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.dump()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.dump(-1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.dump(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.dump(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/rjYfsEq7v1RCHprk&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}

{&quot;one&quot;:1,&quot;two&quot;:2}

{
&quot;one&quot;: 1,
&quot;two&quot;: 2
}

{
    &quot;one&quot;: 1,
    &quot;two&quot;: 2
}

[1,2,4,8,16]

[1,2,4,8,16]

[
1,
2,
4,
8,
16
]

[
    1,
    2,
    4,
    8,
    16
]

</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/dump.cpp -o dump </verbatim></para></simplesect>
<simplesect kind="see"><para><ulink url="https://docs.python.org/2/library/json.html#json.dump">https://docs.python.org/2/library/json.html#json.dump</ulink></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2888" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2888" bodyend="2903"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref></type>
        <definition>constexpr value_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
<para>return the type of the JSON value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Return the type of the JSON value as a value from the <ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref> enumeration.</para><para><simplesect kind="return"><para>the type of the JSON value</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>type()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>type()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_null.type()<sp/>==<sp/>json::value_t::null)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_boolean.type()<sp/>==<sp/>json::value_t::boolean)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_number_integer.type()<sp/>==<sp/>json::value_t::number_integer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_number_float.type()<sp/>==<sp/>json::value_t::number_float)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_object.type()<sp/>==<sp/>json::value_t::object)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_array.type()<sp/>==<sp/>json::value_t::array)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(j_string.type()<sp/>==<sp/>json::value_t::string)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ZqSWHApgHNYddvEU&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
true
true
true
true
true
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/type.cpp -o type </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2923" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2923" bodyend="2926"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a6362b88718eb5c6d4fed6a61eed44b95_1a6362b88718eb5c6d4fed6a61eed44b95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_primitive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_primitive</name>
        <briefdescription>
<para>return whether type is primitive </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON type is primitive (string, number, boolean, or null).</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is primitive (string, number, boolean, or null), <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_primitive()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_primitive()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_primitive()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/A0B17yXywuT7Z1gx&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
true
true
true
true
false
false
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_primitive.cpp -o is_primitive </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9f68a0af820c3ced7f9d17851ce4c22d_1a9f68a0af820c3ced7f9d17851ce4c22d" kindref="member">is_structured()</ref> <ndash/> returns whether JSON value is structured </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a8faa039ca82427ed29c486ffd00600c3_1a8faa039ca82427ed29c486ffd00600c3" kindref="member">is_null()</ref> <ndash/> returns whether JSON value is <computeroutput>null</computeroutput> </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a69b596a4a6683b362095c9a139637396_1a69b596a4a6683b362095c9a139637396" kindref="member">is_string()</ref> <ndash/> returns whether JSON value is a string </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a943e8cb182d0f2365c76d64b42eaa6fd_1a943e8cb182d0f2365c76d64b42eaa6fd" kindref="member">is_boolean()</ref> <ndash/> returns whether JSON value is a boolean </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" kindref="member">is_number()</ref> <ndash/> returns whether JSON value is a number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2953" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2953" bodyend="2956"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9f68a0af820c3ced7f9d17851ce4c22d_1a9f68a0af820c3ced7f9d17851ce4c22d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_structured</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_structured</name>
        <briefdescription>
<para>return whether type is structured </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON type is structured (array or object).</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is structured (array or object), <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_structured()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_structured()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_structured()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/46XRsxj3NvcwTpAZ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
false
false
true
true
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_structured.cpp -o is_structured </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a6362b88718eb5c6d4fed6a61eed44b95_1a6362b88718eb5c6d4fed6a61eed44b95" kindref="member">is_primitive()</ref> <ndash/> returns whether value is primitive </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_aef9ce5dd2381caee1f8ddcdb5bdd9c65_1aef9ce5dd2381caee1f8ddcdb5bdd9c65" kindref="member">is_array()</ref> <ndash/> returns whether value is an array </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_af8f511af124e82e4579f444b4175787c_1af8f511af124e82e4579f444b4175787c" kindref="member">is_object()</ref> <ndash/> returns whether value is an object</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2980" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2980" bodyend="2983"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a8faa039ca82427ed29c486ffd00600c3_1a8faa039ca82427ed29c486ffd00600c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_null</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_null</name>
        <briefdescription>
<para>return whether value is null </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is null.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is null, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_null()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_null()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_null()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/d75Hu1c8QVdDtabd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
false
false
false
false
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_null.cpp -o is_null </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3002" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3002" bodyend="3005"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a943e8cb182d0f2365c76d64b42eaa6fd_1a943e8cb182d0f2365c76d64b42eaa6fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_boolean</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_boolean</name>
        <briefdescription>
<para>return whether value is a boolean </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is a boolean.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is boolean, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_boolean()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_boolean()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_boolean()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/tWBJHygekWKqZIqe&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
true
false
false
false
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_boolean.cpp -o is_boolean </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3024" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3024" bodyend="3027"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number</name>
        <briefdescription>
<para>return whether value is a number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is a number. This includes both integer and floating-point values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is number (regardless whether integer, unsigned integer or floating-type), <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_number()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_number()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_number()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/97mIrpY9h1rodAfI&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
true
true
true
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_number.cpp -o is_number </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_1abac8af76067f1e8fdca9052882c74428" kindref="member">is_number_integer()</ref> <ndash/> check if value is an integer or unsigned integer number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abc7378cba0613a78b9aad1c8e7044bb0_1abc7378cba0613a78b9aad1c8e7044bb0" kindref="member">is_number_unsigned()</ref> <ndash/> check if value is an unsigned integer number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_1a33b4bf898b857c962e798fc7f6e86e70" kindref="member">is_number_float()</ref> <ndash/> check if value is a floating-point number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3054" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3054" bodyend="3057"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_1abac8af76067f1e8fdca9052882c74428" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number_integer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_integer</name>
        <briefdescription>
<para>return whether value is an integer number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is an integer or unsigned integer number. This excludes floating-point values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is an integer or unsigned integer number, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_number_integer()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_number_integer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_number_integer()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/WRiD854M5bTtQTnw&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
true
true
false
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_number_integer.cpp -o is_number_integer </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" kindref="member">is_number()</ref> <ndash/> check if value is a number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abc7378cba0613a78b9aad1c8e7044bb0_1abc7378cba0613a78b9aad1c8e7044bb0" kindref="member">is_number_unsigned()</ref> <ndash/> check if value is an unsigned integer number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_1a33b4bf898b857c962e798fc7f6e86e70" kindref="member">is_number_float()</ref> <ndash/> check if value is a floating-point number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3083" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3083" bodyend="3086"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abc7378cba0613a78b9aad1c8e7044bb0_1abc7378cba0613a78b9aad1c8e7044bb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number_unsigned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_unsigned</name>
        <briefdescription>
<para>return whether value is an unsigned integer number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is an unsigned integer number. This excludes floating-point and (signed) integer values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is an unsigned integer number, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_number_unsigned()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_number_unsigned()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_number_unsigned()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/BYzDklHPHDZA2CXX&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
true
false
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_number_unsigned.cpp -o is_number_unsigned </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" kindref="member">is_number()</ref> <ndash/> check if value is a number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_1abac8af76067f1e8fdca9052882c74428" kindref="member">is_number_integer()</ref> <ndash/> check if value is an integer or unsigned integer number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_1a33b4bf898b857c962e798fc7f6e86e70" kindref="member">is_number_float()</ref> <ndash/> check if value is a floating-point number</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3111" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3111" bodyend="3114"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_1a33b4bf898b857c962e798fc7f6e86e70" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_number_float</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_float</name>
        <briefdescription>
<para>return whether value is a floating-point number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is a floating-point number. This excludes integer and unsigned integer values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is a floating-point number, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_number_float()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_number_float()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_number_float()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/AHeVLaVJlG3cIehg&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
false
true
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_number_float.cpp -o is_number_float </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" kindref="member">is_number()</ref> <ndash/> check if value is number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_1abac8af76067f1e8fdca9052882c74428" kindref="member">is_number_integer()</ref> <ndash/> check if value is an integer number </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abc7378cba0613a78b9aad1c8e7044bb0_1abc7378cba0613a78b9aad1c8e7044bb0" kindref="member">is_number_unsigned()</ref> <ndash/> check if value is an unsigned integer number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3139" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3139" bodyend="3142"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_af8f511af124e82e4579f444b4175787c_1af8f511af124e82e4579f444b4175787c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_object</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_object</name>
        <briefdescription>
<para>return whether value is an object </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is an object.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is object, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_object()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_object()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_object()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/TW8VagDAhVeaItcp&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
false
false
true
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_object.cpp -o is_object </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3161" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3161" bodyend="3164"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aef9ce5dd2381caee1f8ddcdb5bdd9c65_1aef9ce5dd2381caee1f8ddcdb5bdd9c65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_array</name>
        <briefdescription>
<para>return whether value is an array </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is an array.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is array, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_array()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_array()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_array()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/hGGh0jnNmRo7bYAZ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
false
false
false
true
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_array.cpp -o is_array </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3183" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3183" bodyend="3186"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a69b596a4a6683b362095c9a139637396_1a69b596a4a6683b362095c9a139637396" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_string</name>
        <briefdescription>
<para>return whether value is a string </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value is a string.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is string, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_string()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_string()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_string()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ePqrJBez1pH5dC7V&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
false
false
false
false
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_string.cpp -o is_string </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3205" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3205" bodyend="3208"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aabe623bc8304c2ba92d96d91f390fab4_1aabe623bc8304c2ba92d96d91f390fab4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::is_discarded</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_discarded</name>
        <briefdescription>
<para>return whether value is discarded </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true iff the JSON value was discarded during parsing with a callback function (see <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref>).</para><para><simplesect kind="note"><para>This function will always be <computeroutput>false</computeroutput> for JSON values after parsing. That is, discarded values can only occur during parsing, but will be removed when inside a structured value or replaced by null in other cases.</para></simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if type is discarded, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>is_discarded()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_unsigned_integer<sp/>=<sp/>12345678987654321u;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>is_discarded()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_unsigned_integer.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.is_discarded()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/USx0486t9Qxi5LS3&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>false
false
false
false
false
false
false
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/is_discarded.cpp -o is_discarded </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3232" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3232" bodyend="3235"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a26ef3058e249f82a04f8ec18f7419027_1a26ef3058e249f82a04f8ec18f7419027" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator value_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator value_t</name>
        <briefdescription>
<para>return the type of the JSON value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicitly return the type of the JSON value as a value from the <ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref> enumeration.</para><para><simplesect kind="return"><para>the type of the JSON value</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Exception safety</title><para>No-throw guarantee: this member function never throws exceptions.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies the <ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref> operator for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>operator<sp/>value_t()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_null<sp/>=<sp/>j_null;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_boolean<sp/>=<sp/>j_boolean;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_number_integer<sp/>=<sp/>j_number_integer;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_number_float<sp/>=<sp/>j_number_float;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_object<sp/>=<sp/>j_object;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_array<sp/>=<sp/>j_array;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">json::value_t</ref><sp/>t_string<sp/>=<sp/>j_string;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_null<sp/>==<sp/>json::value_t::null)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_boolean<sp/>==<sp/>json::value_t::boolean)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_number_integer<sp/>==<sp/>json::value_t::number_integer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_number_float<sp/>==<sp/>json::value_t::number_float)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_object<sp/>==<sp/>json::value_t::object)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_array<sp/>==<sp/>json::value_t::array)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(t_string<sp/>==<sp/>json::value_t::string)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/n1XysfgD6muGNQdE&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
true
true
true
true
true
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__value_t.cpp -o operator__value_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3255" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3255" bodyend="3258"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>value access</header>
      <description><para>Direct access to the stored value of a JSON value. </para></description>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ac41d1fda870c3f3c4ead932c2e3ab61f_1ac41d1fda870c3f3c4ead932c2e3ab61f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>detail::enable_if_t&lt; std::is_same&lt; typename std::remove_const&lt; BasicJsonType &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref>, <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>get special-case overload </para>        </briefdescription>
        <detaileddescription>
<para>This overloads avoids a lot of template boilerplate, it can be seen as the identity method</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3414" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3414" bodyend="3417"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aa6602bb24022183ab989439e19345d08_1aa6602bb24022183ab989439e19345d08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeCV</type>
          </param>
          <param>
            <type>typename ValueType</type>
            <defval>detail::uncvref_t&lt;ValueTypeCV&gt;</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; not std::is_same&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> anddetail::has_from_json&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andnot detail::has_non_default_from_json&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get</definition>
        <argsstring>() const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), std::declval&lt; ValueType &amp; &gt;())))</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <ulink url="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</ulink> and <ulink url="http://en.cppreference.com/w/cpp/concept/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the <ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method.</para><para>The function is equivalent to executing <programlisting><codeline><highlight class="normal">ValueType<sp/>ret;</highlight></codeline>
<codeline><highlight class="normal">JSONSerializer&lt;ValueType&gt;::from_json(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
</programlisting></para><para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>,</para></listitem><listitem><para><ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>void from_json(const @ref basic_json&amp;, ValueType&amp;)</computeroutput>, and</para></listitem><listitem><para><ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> does not have a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>ValueType from_json(const @ref basic_json&amp;)</computeroutput></para></listitem></itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueTypeCV</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided value type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method throws</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string, json&gt;</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value<sp/>with<sp/>different<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>json_types<sp/>=</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>42},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;floating-point&quot;</highlight><highlight class="normal">,<sp/>17.23}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world!&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5}},</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>explicit<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v1<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">].get&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v2<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">].get&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v3<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">].get&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v4<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;floating-point&quot;</highlight><highlight class="normal">].get&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v5<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;floating-point&quot;</highlight><highlight class="normal">].get&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v6<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">].get&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v7<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">].get&lt;std::vector&lt;short&gt;&gt;();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v8<sp/>=<sp/>json_types.get&lt;std::unordered_map&lt;std::string,<sp/>json&gt;&gt;();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>conversion<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v3<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v4<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v5<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v6<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>v7)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>v8)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.second<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ksZAkIKQnYhJKLpN&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
42 42
17.23 17
Hello, world!
1 2 3 4 5 

string: &quot;Hello, world!&quot;
number: {&quot;floating-point&quot;:17.23,&quot;integer&quot;:42}
null: null
boolean: true
array: [1,2,3,4,5]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get__ValueType_const.cpp -o get__ValueType_const </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3466" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3466" bodyend="3480"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a5afa21d477e13fa7a3dcd7ea66c48b52_1a5afa21d477e13fa7a3dcd7ea66c48b52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeCV</type>
          </param>
          <param>
            <type>typename ValueType</type>
            <defval>detail::uncvref_t&lt;ValueTypeCV&gt;</defval>
          </param>
          <param>
            <type>detail::enable_if_t&lt; not std::is_same&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> anddetail::has_non_default_from_json&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get</definition>
        <argsstring>() const noexcept(noexcept(JSONSerializer&lt; ValueTypeCV &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;())))</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a value (explicit); special case </para>        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <bold>not</bold> <ulink url="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</ulink> and <bold>not</bold> <ulink url="http://en.cppreference.com/w/cpp/concept/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the <ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method.</para><para>The function is equivalent to executing <programlisting><codeline><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JSONSerializer&lt;ValueTypeCV&gt;::from_json(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> and</para></listitem><listitem><para><ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput>from_json()</computeroutput> method of the form <computeroutput>ValueType from_json(const @ref basic_json&amp;)</computeroutput></para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>If <ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> has both overloads of <computeroutput>from_json()</computeroutput>, this one is chosen.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueTypeCV</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided value type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput>from_json()</computeroutput> method throws</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3519" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3519" bodyend="3525"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a64135c19425f00b346d8ed63a23db334_1a64135c19425f00b346d8ed63a23db334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>PointerType</type>
        <definition>PointerType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get</definition>
        <argsstring>() noexcept</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a pointer value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>, <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>, <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref>, or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>getting<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>value.get&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>value.get&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3<sp/>=<sp/>value.get&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p4<sp/>=<sp/>value.get&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p5<sp/>=<sp/>value.get&lt;<ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>pointees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p3<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p4<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>(p5<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/TRkhQoCdScWQqi3x&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>17 17 17 17
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get__PointerType.cpp -o get__PointerType </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_aefa46bd2d96bb77a38d1c8b431eab44f_1aefa46bd2d96bb77a38d1c8b431eab44f" kindref="member">get_ptr()</ref> for explicit pointer-member access</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3556" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3556" bodyend="3560"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a44a090c15a67b9f02e579b6e17ef0e1b_1a44a090c15a67b9f02e579b6e17ef0e1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr const PointerType</type>
        <definition>constexpr const PointerType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a pointer value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>get a pointer value (explicit) Explicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>, <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>, <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref>, or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>getting<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>value.get&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>value.get&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3<sp/>=<sp/>value.get&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p4<sp/>=<sp/>value.get&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p5<sp/>=<sp/>value.get&lt;<ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>pointees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p3<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p4<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>(p5<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/TRkhQoCdScWQqi3x&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>17 17 17 17
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get__PointerType.cpp -o get__PointerType </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_aefa46bd2d96bb77a38d1c8b431eab44f_1aefa46bd2d96bb77a38d1c8b431eab44f" kindref="member">get_ptr()</ref> for explicit pointer-member access</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3568" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3568" bodyend="3572"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aefa46bd2d96bb77a38d1c8b431eab44f_1aefa46bd2d96bb77a38d1c8b431eab44f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>PointerType</type>
        <definition>PointerType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ptr</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_ptr</name>
        <briefdescription>
<para>get a pointer value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the pointee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>, <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>, <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref>, or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>. Enforced by a static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>getting<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>value.get_ptr&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>value.get_ptr&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3<sp/>=<sp/>value.get_ptr&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p4<sp/>=<sp/>value.get_ptr&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p5<sp/>=<sp/>value.get_ptr&lt;<ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>pointees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p3<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p4<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>(p5<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/xYbUV0BmOfNtQcED&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>17 17 17 17
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get_ptr.cpp -o get_ptr </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3602" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3602" bodyend="3621"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a14abd48803a8d5447faf5f583fa8e2a1_1a14abd48803a8d5447faf5f583fa8e2a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andstd::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr const PointerType</type>
        <definition>constexpr const PointerType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ptr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_ptr</name>
        <briefdescription>
<para>get a pointer value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>get a pointer value (implicit) Implicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the pointee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>, <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>, <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref>, or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>. Enforced by a static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>getting<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>value.get_ptr&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>value.get_ptr&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p3<sp/>=<sp/>value.get_ptr&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p4<sp/>=<sp/>value.get_ptr&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p5<sp/>=<sp/>value.get_ptr&lt;<ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref>*&gt;();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>pointees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*p1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p3<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*p4<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>(p5<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/xYbUV0BmOfNtQcED&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>17 17 17 17
true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get_ptr.cpp -o get_ptr </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3630" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3630" bodyend="3649"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_afbd800010b67619463c0fce6e74f7878_1afbd800010b67619463c0fce6e74f7878" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ref</definition>
        <argsstring>()</argsstring>
        <name>get_ref</name>
        <briefdescription>
<para>get a reference value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicit reference access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the referee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReferenceType</parametername>
</parameternamelist>
<parameterdescription>
<para>reference type; must be a reference to <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>, <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>, <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>. Enforced by static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the internally stored JSON value if the requested reference type <emphasis>ReferenceType</emphasis> fits to the JSON value; throws type_error.303 otherwise</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ReferenceType</emphasis> is incompatible with the stored JSON value; see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows several calls to <computeroutput>get_ref()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>getting<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r1<sp/>=<sp/>value.get_ref&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>&amp;&gt;();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r2<sp/>=<sp/>value.get_ref&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>&amp;&gt;();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>r1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>type<sp/>throws<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r3<sp/>=<sp/>value.get_ref&lt;<ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref>&amp;&gt;();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>ex)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>ex.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/lsl8Ex3d3SOYnKHu&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>17 17
[json.exception.type_error.303] incompatible ReferenceType for get_ref, actual type is number
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get_ref.cpp -o get_ref </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3679" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3679" bodyend="3683"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a87e9e9cb2556fabfe042a4fabfc2c952_1a87e9e9cb2556fabfe042a4fabfc2c952" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andstd::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ref</definition>
        <argsstring>() const </argsstring>
        <name>get_ref</name>
        <briefdescription>
<para>get a reference value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>get a reference value (implicit) Implicit reference access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the referee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReferenceType</parametername>
</parameternamelist>
<parameterdescription>
<para>reference type; must be a reference to <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>, <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>, <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>, <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>, <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>, or <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>. Enforced by static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the internally stored JSON value if the requested reference type <emphasis>ReferenceType</emphasis> fits to the JSON value; throws type_error.303 otherwise</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ReferenceType</emphasis> is incompatible with the stored JSON value; see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows several calls to <computeroutput>get_ref()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>getting<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r1<sp/>=<sp/>value.get_ref&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>&amp;&gt;();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r2<sp/>=<sp/>value.get_ref&lt;<ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">json::number_integer_t</ref>&amp;&gt;();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>r1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>type<sp/>throws<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r3<sp/>=<sp/>value.get_ref&lt;<ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">json::number_float_t</ref>&amp;&gt;();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>ex)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>ex.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/lsl8Ex3d3SOYnKHu&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>17 17
[json.exception.type_error.303] incompatible ReferenceType for get_ref, actual type is number
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/get_ref.cpp -o get_ref </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3692" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3692" bodyend="3696"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9cbcce20b78708de25c7ccb60c4ca7c5_1a9cbcce20b78708de25c7ccb60c4ca7c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; not std::is_pointer&lt; ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andnot std::is_same&lt; ValueType, typename string_t::value_type &gt;::valueand not std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator ValueType</definition>
        <argsstring>() const </argsstring>
        <name>operator ValueType</name>
        <briefdescription>
<para>get a value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <ref refid="classnlohmann_1_1basic__json_ac41d1fda870c3f3c4ead932c2e3ab61f_1ac41d1fda870c3f3c4ead932c2e3ab61f" kindref="member">get() const</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>non-pointer type compatible to the JSON value, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. The character type of <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <computeroutput>std::string</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to type <emphasis>ValueType</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ValueType</emphasis> is incompatible to the JSON value type (e.g., the JSON value is of type boolean, but a string is requested); see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the JSON value.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string, json&gt;</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value<sp/>with<sp/>different<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>json_types<sp/>=</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>42},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;floating-point&quot;</highlight><highlight class="normal">,<sp/>17.23}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world!&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5}},</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>implicit<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v1<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>v3<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v4<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;floating-point&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v5<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;floating-point&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>v6<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;short&gt;<sp/>v7<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>json&gt;<sp/>v8<sp/>=<sp/>json_types;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>conversion<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v3<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v4<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v5<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v6<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>v7)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>v8)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i.second<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example<sp/>for<sp/>an<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v1<sp/>=<sp/>json_types[</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/drFSKFXJd8IMzMK3&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
42 42
17.23 17
Hello, world!
1 2 3 4 5 

string: &quot;Hello, world!&quot;
number: {&quot;floating-point&quot;:17.23,&quot;integer&quot;:42}
null: null
boolean: true
array: [1,2,3,4,5]
[json.exception.type_error.302] type must be boolean, but is string
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__ValueType.cpp -o operator__ValueType </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3737" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3737" bodyend="3741"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>element access</header>
      <description><para>Access to the JSON value. </para></description>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at specified location <emphasis>idx</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array; in this case, calling <computeroutput>at</computeroutput> with an index makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index <emphasis>idx</emphasis> is out of range of the array; that is, <computeroutput>idx &gt;= size()</computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Exception safety</title><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how array elements can be read and written using <computeroutput>at()</computeroutput>. It also demonstrates the different exceptions that can be thrown. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2nd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;third&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fourth&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>at<sp/>index<sp/>2<sp/>(third<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array.at(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>element<sp/>at<sp/>index<sp/>1<sp/>(second<sp/>element)<sp/>to<sp/>&quot;second&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>array.at(1)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>type_error.304</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>at()<sp/>on<sp/>a<sp/>non-array<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>a<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.at(0)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Another<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>out_of_range.401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>write<sp/>beyond<sp/>the<sp/>array<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.at(5)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sixth&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/8UnQY256zGX2Lx6d&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;third&quot;
[&quot;first&quot;,&quot;second&quot;,&quot;third&quot;,&quot;fourth&quot;]
[json.exception.type_error.304] cannot use at() with string
[json.exception.out_of_range.401] array index 5 is out of range
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/at__size_type.cpp -o at__size_type </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3780" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3780" bodyend="3799"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a5af365239f7d540b34c31b25e382333b_1a5af365239f7d540b34c31b25e382333b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at</definition>
        <argsstring>(size_type idx) const </argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at specified location <emphasis>idx</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array; in this case, calling <computeroutput>at</computeroutput> with an index makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index <emphasis>idx</emphasis> is out of range of the array; that is, <computeroutput>idx &gt;= size()</computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Exception safety</title><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how array elements can be read using <computeroutput>at()</computeroutput>. It also demonstrates the different exceptions that can be thrown. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2nd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;third&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fourth&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>at<sp/>index<sp/>2<sp/>(third<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array.at(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>type_error.304</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>at()<sp/>on<sp/>a<sp/>non-array<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>a<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>str.at(0)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>out_of_range.401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>read<sp/>beyond<sp/>the<sp/>array<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array.at(5)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/U1fv6LY7xZOAuSBs&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;third&quot;
[json.exception.type_error.304] cannot use at() with string
[json.exception.out_of_range.401] array index 5 is out of range
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/
at__size_type_const.cpp -o 
at__size_type_const </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3831" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3831" bodyend="3850"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in this case, calling <computeroutput>at</computeroutput> with a key makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if the key <emphasis>key</emphasis> is is not stored in the object; that is, <computeroutput>find(key) == end()</computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Exception safety</title><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by reference </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read and written using <computeroutput>at()</computeroutput>. It also demonstrates the different exceptions that can be thrown. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;the<sp/>good&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>buono&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;the<sp/>bad&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>cattivo&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;the<sp/>ugly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>brutto&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;the<sp/>ugly&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.at(</highlight><highlight class="stringliteral">&quot;the<sp/>ugly&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>element<sp/>with<sp/>key<sp/>&quot;the<sp/>bad&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.at(</highlight><highlight class="stringliteral">&quot;the<sp/>bad&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>cattivo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>type_error.304</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>at()<sp/>on<sp/>a<sp/>non-object<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>a<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.at(</highlight><highlight class="stringliteral">&quot;the<sp/>good&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Another<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>out_of_range.401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>write<sp/>at<sp/>a<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.at(</highlight><highlight class="stringliteral">&quot;the<sp/>fast&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>rapido&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/8ldtT0NOhidn0fOA&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;il brutto&quot;
{&quot;the bad&quot;:&quot;il cattivo&quot;,&quot;the good&quot;:&quot;il buono&quot;,&quot;the ugly&quot;:&quot;il brutto&quot;}
[json.exception.type_error.304] cannot use at() with string
[json.exception.out_of_range.403] key &apos;the fast&apos; not found
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/at__object_t_key_type.cpp -o at__object_t_key_type </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3882" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3882" bodyend="3901"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a8471c693500db2e8c868ec4371d402a6_1a8471c693500db2e8c868ec4371d402a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const </argsstring>
        <name>at</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in this case, calling <computeroutput>at</computeroutput> with a key makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if the key <emphasis>key</emphasis> is is not stored in the object; that is, <computeroutput>find(key) == end()</computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Exception safety</title><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by reference </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read using <computeroutput>at()</computeroutput>. It also demonstrates the different exceptions that can be thrown. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;the<sp/>good&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>buono&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;the<sp/>bad&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>cattivo&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;the<sp/>ugly&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;il<sp/>brutto&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;the<sp/>ugly&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.at(</highlight><highlight class="stringliteral">&quot;the<sp/>ugly&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>type_error.304</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>at()<sp/>on<sp/>a<sp/>non-object<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>a<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>str.at(</highlight><highlight class="stringliteral">&quot;the<sp/>good&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" kindref="member">json::type_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exception<sp/>out_of_range.401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>read<sp/>from<sp/>a<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.at(</highlight><highlight class="stringliteral">&quot;the<sp/>fast&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/nfmFWMaJJHFJ7eVK&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;il brutto&quot;
[json.exception.type_error.304] cannot use at() with string
out of range
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/
at__object_t_key_type_const.cpp -o 
at__object_t_key_type_const </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3937" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3937" bodyend="3956"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ac871e3b03fb2eeca9a8de4db2bea760f_1ac871e3b03fb2eeca9a8de4db2bea760f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at specified location <emphasis>idx</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>idx</emphasis> is beyond the range of the array (i.e., <computeroutput>idx &gt;= size()</computeroutput>), then the array is silently filled up with <computeroutput>null</computeroutput> values to make <computeroutput>idx</computeroutput> a valid reference to the last stored element.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array or null; in that cases, using the [] operator with an index makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant if <emphasis>idx</emphasis> is in the range of the array. Otherwise linear in <computeroutput>idx - size()</computeroutput>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how array elements can be read and written using <computeroutput>[]</computeroutput> operator. Note the addition of <computeroutput>null</computeroutput> values. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>at<sp/>index<sp/>3<sp/>(fourth<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array[3]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>last<sp/>element<sp/>to<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>array[array.size()<sp/>-<sp/>1]<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>beyond<sp/>array<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>array[10]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/nRWrbGoBCORCHJI5&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>4
[1,2,3,4,6]
[1,2,3,4,6,null,null,null,null,null,11]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__size_type.cpp -o operatorarray__size_type </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3983" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3983" bodyend="4008"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2a3510a08418e8371ad3a67a33d3ce5d_1a2a3510a08418e8371ad3a67a33d3ce5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(size_type idx) const </argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at specified location <emphasis>idx</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array; in that cases, using the [] operator with an index makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how array elements can be read using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2nd&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;third&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fourth&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>at<sp/>index<sp/>2<sp/>(third<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array.at(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/4g1Gn5htCIExLBgW&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;third&quot;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__size_type_const.cpp -o operatorarray__size_type_const </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4029" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4029" bodyend="4038"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>2.9}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>element<sp/>with<sp/>key<sp/>&quot;three&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mention<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;really&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;nested&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ujLOsxCRQE3T8cYO&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>2

{
    &quot;one&quot;: 1,
    &quot;three&quot;: 3,
    &quot;two&quot;: 2
}

{
    &quot;five&quot;: {
        &quot;really&quot;: {
            &quot;nested&quot;: true
        }
    },
    &quot;four&quot;: null,
    &quot;one&quot;: 1,
    &quot;three&quot;: 3,
    &quot;two&quot;: 2
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__key_type.cpp -o operatorarray__key_type </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4067" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4067" bodyend="4084"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9460a6884381a351c04ef04e8778c505_1a9460a6884381a351c04ef04e8778c505" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>read-only access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para><para><simplesect kind="warning"><para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<simplesect kind="pre"><para>The element with key <emphasis>key</emphasis> must exist. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>2.9}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/x6rzLLCk96NM36Tl&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>2
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__key_type_const.cpp -o operatorarray__key_type_const </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4116" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4116" bodyend="4126"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1416bbec9d9a8eeca21c213cf5290868_1a1416bbec9d9a8eeca21c213cf5290868" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(T *(&amp;key)[n])</argsstring>
        <name>operator[]</name>
        <param>
          <type>T *(&amp;)</type>
          <declname>key</declname>
          <array>[n]</array>
        </param>
        <briefdescription>
<para>access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>2.9}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>element<sp/>with<sp/>key<sp/>&quot;three&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mention<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;really&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;nested&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ujLOsxCRQE3T8cYO&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>2

{
    &quot;one&quot;: 1,
    &quot;three&quot;: 3,
    &quot;two&quot;: 2
}

{
    &quot;five&quot;: {
        &quot;really&quot;: {
            &quot;nested&quot;: true
        }
    },
    &quot;four&quot;: null,
    &quot;one&quot;: 1,
    &quot;three&quot;: 3,
    &quot;two&quot;: 2
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__key_type.cpp -o operatorarray__key_type </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4156" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4156" bodyend="4159"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a4d1d2e04f6b75f8080337df23a686dd1_1a4d1d2e04f6b75f8080337df23a686dd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(T *(&amp;key)[n]) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>T *(&amp;)</type>
          <declname>key</declname>
          <array>[n]</array>
        </param>
        <briefdescription>
<para>read-only access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para><para><simplesect kind="warning"><para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para></simplesect>
<simplesect kind="note"><para>This function is required for compatibility reasons with Clang.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>2.9}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/x6rzLLCk96NM36Tl&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>2
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__key_type_const.cpp -o operatorarray__key_type_const </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4191" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4191" bodyend="4194"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abb8eaa633584b5aff9c8fcd242f25ca8_1abb8eaa633584b5aff9c8fcd242f25ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(T *key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>2.9}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>element<sp/>with<sp/>key<sp/>&quot;three&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mention<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>nonexisting<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;really&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;nested&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>changed<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ujLOsxCRQE3T8cYO&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>2

{
    &quot;one&quot;: 1,
    &quot;three&quot;: 3,
    &quot;two&quot;: 2
}

{
    &quot;five&quot;: {
        &quot;really&quot;: {
            &quot;nested&quot;: true
        }
    },
    &quot;four&quot;: null,
    &quot;one&quot;: 1,
    &quot;three&quot;: 3,
    &quot;two&quot;: 2
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__key_type.cpp -o operatorarray__key_type </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4224" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4224" bodyend="4241"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9dbbd81134838cac9616701501934e22_1a9dbbd81134838cac9616701501934e22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(T *key) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>read-only access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para><para><simplesect kind="warning"><para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<simplesect kind="pre"><para>The element with key <emphasis>key</emphasis> must exist. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2},<sp/>{</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>2.9}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>key<sp/>&quot;two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/x6rzLLCk96NM36Tl&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>2
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorarray__key_type_const.cpp -o operatorarray__key_type_const </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value()</ref> for access by value with a default value</para></simplesect>
<simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4274" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4274" bodyend="4284"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, ValueType default_value) const </argsstring>
        <name>value</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>        </briefdescription>
        <detaileddescription>
<para>Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(key);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<simplesect kind="note"><para>Unlike <ref refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" kindref="member">operator[](const typename object_t::key_type&amp; key)</ref>, this function does not implicitly add an element to the position defined by <emphasis>key</emphasis>. This function is furthermore also applicable to const objects.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>key</emphasis> is not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an objec; in that cases, using <computeroutput>value()</computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be queried with a default value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object<sp/>with<sp/>different<sp/>entry<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>1},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;floating&quot;</highlight><highlight class="normal">,<sp/>42.23},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>{{</highlight><highlight class="stringliteral">&quot;key1&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;key2&quot;</highlight><highlight class="normal">,<sp/>2}}},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3}}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>existing<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v_integer<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_floating<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;floating&quot;</highlight><highlight class="normal">,<sp/>47.11);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>nonexisting<sp/>values<sp/>and<sp/>rely<sp/>on<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>v_string<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;nonexisting&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;oops&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v_boolean<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;nonexisting&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>v_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_floating</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/qdV5W2Lrljmjv4LG&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1 42.23 oops false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__value.cpp -o basic_json__value </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by reference</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4336" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4336" bodyend="4354"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1ad55f9d26934e05add021b2513a9ac1_1a1ad55f9d26934e05add021b2513a9ac1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, const char *default_value) const </argsstring>
        <name>value</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>overload for a default value of type const char* </para>        </briefdescription>
        <detaileddescription>
<para>access specified object element with default value Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(key);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<simplesect kind="note"><para>Unlike <ref refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" kindref="member">operator[](const typename object_t::key_type&amp; key)</ref>, this function does not implicitly add an element to the position defined by <emphasis>key</emphasis>. This function is furthermore also applicable to const objects.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>key</emphasis> is not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an objec; in that cases, using <computeroutput>value()</computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be queried with a default value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object<sp/>with<sp/>different<sp/>entry<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>1},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;floating&quot;</highlight><highlight class="normal">,<sp/>42.23},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>{{</highlight><highlight class="stringliteral">&quot;key1&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;key2&quot;</highlight><highlight class="normal">,<sp/>2}}},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3}}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>existing<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v_integer<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_floating<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;floating&quot;</highlight><highlight class="normal">,<sp/>47.11);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>nonexisting<sp/>values<sp/>and<sp/>rely<sp/>on<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>v_string<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;nonexisting&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;oops&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v_boolean<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;nonexisting&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>v_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_floating</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/qdV5W2Lrljmjv4LG&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1 42.23 oops false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__value.cpp -o basic_json__value </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by reference with range checking </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by reference</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4360" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4360" bodyend="4363"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a3284c24ad6b089558d78f256ada9c295_1a3284c24ad6b089558d78f256ada9c295" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json_t</ref>, ValueType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, ValueType default_value) const </argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>ValueType</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>        </briefdescription>
        <detaileddescription>
<para>Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(ptr);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="classnlohmann_1_1basic__json_a8ab61397c10f18b305520da7073b2b45_1a8ab61397c10f18b305520da7073b2b45" kindref="member">at(const json_pointer&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON pointer to the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>ptr</emphasis> found no value</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an objec; in that cases, using <computeroutput>value()</computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be queried with a default value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object<sp/>with<sp/>different<sp/>entry<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>1},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;floating&quot;</highlight><highlight class="normal">,<sp/>42.23},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>{{</highlight><highlight class="stringliteral">&quot;key1&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;key2&quot;</highlight><highlight class="normal">,<sp/>2}}},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3}}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>existing<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v_integer<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/integer&quot;</highlight><highlight class="normal">_json_pointer,<sp/>0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_floating<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/floating&quot;</highlight><highlight class="normal">_json_pointer,<sp/>47.11);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>nonexisting<sp/>values<sp/>and<sp/>rely<sp/>on<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>v_string<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/nonexisting&quot;</highlight><highlight class="normal">_json_pointer,<sp/></highlight><highlight class="stringliteral">&quot;oops&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v_boolean<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/nonexisting&quot;</highlight><highlight class="normal">_json_pointer,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>v_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_floating</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/K4L4D6nibuGXbjfd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1 42.23 oops false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__value_ptr.cpp -o basic_json__value_ptr </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac6946dffeb3be5aa173645f0467a44b3_1ac6946dffeb3be5aa173645f0467a44b3" kindref="member">operator[](const json_pointer&amp;)</ref> for unchecked access by reference</para></simplesect>
<simplesect kind="since"><para>version 2.0.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4408" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4408" bodyend="4425"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_af6a68b55f28fcce225017920de1435db_1af6a68b55f28fcce225017920de1435db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, const char *default_value) const </argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>overload for a default value of type const char* </para>        </briefdescription>
        <detaileddescription>
<para>access specified object element via JSON Pointer with default value Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(ptr);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="classnlohmann_1_1basic__json_a8ab61397c10f18b305520da7073b2b45_1a8ab61397c10f18b305520da7073b2b45" kindref="member">at(const json_pointer&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON pointer to the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>ptr</emphasis> found no value</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an objec; in that cases, using <computeroutput>value()</computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how object elements can be queried with a default value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object<sp/>with<sp/>different<sp/>entry<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,<sp/>1},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;floating&quot;</highlight><highlight class="normal">,<sp/>42.23},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>{{</highlight><highlight class="stringliteral">&quot;key1&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;key2&quot;</highlight><highlight class="normal">,<sp/>2}}},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3}}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>existing<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v_integer<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/integer&quot;</highlight><highlight class="normal">_json_pointer,<sp/>0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_floating<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/floating&quot;</highlight><highlight class="normal">_json_pointer,<sp/>47.11);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>nonexisting<sp/>values<sp/>and<sp/>rely<sp/>on<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>v_string<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/nonexisting&quot;</highlight><highlight class="normal">_json_pointer,<sp/></highlight><highlight class="stringliteral">&quot;oops&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v_boolean<sp/>=<sp/>j.value(</highlight><highlight class="stringliteral">&quot;/nonexisting&quot;</highlight><highlight class="normal">_json_pointer,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>v_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_floating</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_string<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/K4L4D6nibuGXbjfd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1 42.23 oops false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/basic_json__value_ptr.cpp -o basic_json__value_ptr </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac6946dffeb3be5aa173645f0467a44b3_1ac6946dffeb3be5aa173645f0467a44b3" kindref="member">operator[](const json_pointer&amp;)</ref> for unchecked access by reference</para></simplesect>
<simplesect kind="since"><para>version 2.0.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4431" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4431" bodyend="4434"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a3acba9c6ceb7214e565fe08c3ba5b352_1a3acba9c6ceb7214e565fe08c3ba5b352" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>access the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.front()</computeroutput> is equivalent to <computeroutput>*c.begin()</computeroutput>.</para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, or boolean values, a reference to the value is returned.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on <computeroutput>null</computeroutput> value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>front()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_empty(json::value_t::object);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_empty(json::value_t::array);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>front()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_null.front()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>would<sp/>throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_object_empty.front()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_array_empty.front()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/CUpMCzt6D9v3cYGM&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
17
23.42
1
1
&quot;Hello, world&quot;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/front.cpp -o front </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a011397134847f36db0ed7d7a93753677_1a011397134847f36db0ed7d7a93753677" kindref="member">back()</ref> <ndash/> access the last element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4461" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4461" bodyend="4464"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a5ba7f454ead9015dda166c580aeadeb4_1a5ba7f454ead9015dda166c580aeadeb4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
<para>access the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.front()</computeroutput> is equivalent to <computeroutput>*c.begin()</computeroutput>.</para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, or boolean values, a reference to the value is returned.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on <computeroutput>null</computeroutput> value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>front()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_empty(json::value_t::object);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_empty(json::value_t::array);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>front()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_null.front()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>would<sp/>throw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_object_empty.front()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_array_empty.front()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.front()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/CUpMCzt6D9v3cYGM&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
17
23.42
1
1
&quot;Hello, world&quot;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/front.cpp -o front </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a011397134847f36db0ed7d7a93753677_1a011397134847f36db0ed7d7a93753677" kindref="member">back()</ref> <ndash/> access the last element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4469" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4469" bodyend="4472"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a011397134847f36db0ed7d7a93753677_1a011397134847f36db0ed7d7a93753677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>access the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.back()</computeroutput> is equivalent to <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>c.end();</highlight></codeline>
<codeline><highlight class="normal">--tmp;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, or boolean values, a reference to the value is returned.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a <computeroutput>null</computeroutput> value. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>back()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_empty(json::value_t::object);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_empty(json::value_t::array);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>back()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_object_empty.back()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_array_empty.back()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back()<sp/>called<sp/>on<sp/>a<sp/>null<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j_null.back();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_ac13d32f7cbd02d616e71d8dc30dadcbf_1ac13d32f7cbd02d616e71d8dc30dadcbf" kindref="member">json::invalid_iterator</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/CAv4NNr4D1FJhhUv&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
17
23.42
2
16
&quot;Hello, world&quot;
[json.exception.invalid_iterator.214] cannot get value
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/back.cpp -o back </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a3acba9c6ceb7214e565fe08c3ba5b352_1a3acba9c6ceb7214e565fe08c3ba5b352" kindref="member">front()</ref> <ndash/> access the first element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4505" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4505" bodyend="4510"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a14c9e9d157a0fe7b7d3be102d1b47fa9_1a14c9e9d157a0fe7b7d3be102d1b47fa9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
<para>access the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.back()</computeroutput> is equivalent to <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>c.end();</highlight></codeline>
<codeline><highlight class="normal">--tmp;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, or boolean values, a reference to the value is returned.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a <computeroutput>null</computeroutput> value. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>back()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_empty(json::value_t::object);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_empty(json::value_t::array);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>back()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_object_empty.back()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>j_array_empty.back()<sp/>&lt;&lt;<sp/>&apos;\n&apos;;<sp/><sp/><sp/>//<sp/>undefined<sp/>behavior</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>back()<sp/>called<sp/>on<sp/>a<sp/>null<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j_null.back();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_ac13d32f7cbd02d616e71d8dc30dadcbf_1ac13d32f7cbd02d616e71d8dc30dadcbf" kindref="member">json::invalid_iterator</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/CAv4NNr4D1FJhhUv&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
17
23.42
2
16
&quot;Hello, world&quot;
[json.exception.invalid_iterator.214] cannot get value
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/back.cpp -o back </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a3acba9c6ceb7214e565fe08c3ba5b352_1a3acba9c6ceb7214e565fe08c3ba5b352" kindref="member">front()</ref> <ndash/> access the first element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4515" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4515" bodyend="4520"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_1a068a16e76be178e83da6a192916923ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; IteratorType, typename <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">basic_json_t::iterator</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> orstd::is_same&lt; IteratorType, typename <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">basic_json_t::const_iterator</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase</definition>
        <argsstring>(IteratorType pos)</argsstring>
        <name>erase</name>
        <param>
          <type>IteratorType</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>remove element given an iterator </para>        </briefdescription>
        <detaileddescription>
<para>Removes the element specified by iterator <emphasis>pos</emphasis>. The iterator <emphasis>pos</emphasis> must be valid and dereferenceable. Thus the <computeroutput>end()</computeroutput> iterator (which is valid, but is not dereferenceable) cannot be used as a value for <emphasis>pos</emphasis>.</para><para>If called on a primitive type other than <computeroutput>null</computeroutput>, the resulting JSON value will be <computeroutput>null</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the element to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator following the last removed element. If the iterator <emphasis>pos</emphasis> refers to the last element, the <computeroutput>end()</computeroutput> iterator is returned.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IteratorType</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref> or <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>Invalidates iterators and references at or after the point of the erase, including the <computeroutput>end()</computeroutput> iterator.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a <computeroutput>null</computeroutput> value; example: <computeroutput>&quot;cannot use
erase() with null&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on an iterator which does not belong to the current JSON value; example: <computeroutput>&quot;iterator does not fit current
value&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.205</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a primitive type with invalid iterator (i.e., any iterator which is not <computeroutput>begin()</computeroutput>); example: <computeroutput>&quot;iterator
out of range&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>The complexity depends on the type:<itemizedlist>
<listitem><para>objects: amortized constant</para></listitem><listitem><para>arrays: linear in distance between <emphasis>pos</emphasis> and the end of the container</para></listitem><listitem><para>strings: linear in the length of the string</para></listitem><listitem><para>other types: constant</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the result of <computeroutput>erase()</computeroutput> for different JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>erase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>j_boolean.erase(j_boolean.begin());</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>j_number_integer.erase(j_number_integer.begin());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>j_number_float.erase(j_number_float.begin());</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>j_object.erase(j_object.find(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>j_array.erase(j_array.begin()<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>j_string.erase(j_string.begin());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/W83LsQNBy5qCoABq&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
null
null
{&quot;one&quot;:1}
[1,2,8,16]
null
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/erase__IteratorType.cpp -o erase__IteratorType </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_1a4b3f7eb2d4625d95a51fbbdceb7c5f39" kindref="member">erase(IteratorType, IteratorType)</ref> <ndash/> removes the elements in the given range </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2f8484d69c55d8f2a9697a7bec29362a_1a2f8484d69c55d8f2a9697a7bec29362a" kindref="member">erase(const typename object_t::key_type&amp;)</ref> <ndash/> removes the element from an object at the given key </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a88cbcefe9a3f4d294bed0653550a5cb9_1a88cbcefe9a3f4d294bed0653550a5cb9" kindref="member">erase(const size_type)</ref> <ndash/> removes the element from an array at the given index</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4572" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4572" bodyend="4627"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_1a4b3f7eb2d4625d95a51fbbdceb7c5f39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; IteratorType, typename <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">basic_json_t::iterator</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> orstd::is_same&lt; IteratorType, typename <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">basic_json_t::const_iterator</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>erase</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>remove elements given an iterator range </para>        </briefdescription>
        <detaileddescription>
<para>Removes the element specified by the range <computeroutput>[first; last)</computeroutput>. The iterator <emphasis>first</emphasis> does not need to be dereferenceable if <computeroutput>first == last</computeroutput>: erasing an empty range is a no-op.</para><para>If called on a primitive type other than <computeroutput>null</computeroutput>, the resulting JSON value will be <computeroutput>null</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning of the range to remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator past the end of the range to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator following the last removed element. If the iterator <emphasis>second</emphasis> refers to the last element, the <computeroutput>end()</computeroutput> iterator is returned.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IteratorType</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref> or <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>Invalidates iterators and references at or after the point of the erase, including the <computeroutput>end()</computeroutput> iterator.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a <computeroutput>null</computeroutput> value; example: <computeroutput>&quot;cannot use
erase() with null&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.203</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on iterators which does not belong to the current JSON value; example: <computeroutput>&quot;iterators do not fit current value&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.204</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a primitive type with invalid iterators (i.e., if <computeroutput>first != begin()</computeroutput> and <computeroutput>last != end()</computeroutput>); example: <computeroutput>&quot;iterators out of range&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>The complexity depends on the type:<itemizedlist>
<listitem><para>objects: <computeroutput>log(size()) + std::distance(first, last)</computeroutput></para></listitem><listitem><para>arrays: linear in the distance between <emphasis>first</emphasis> and <emphasis>last</emphasis>, plus linear in the distance between <emphasis>last</emphasis> and end of the container</para></listitem><listitem><para>strings: linear in the length of the string</para></listitem><listitem><para>other types: constant</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the result of <computeroutput>erase()</computeroutput> for different JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>erase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>j_boolean.erase(j_boolean.begin(),<sp/>j_boolean.end());</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>j_number_integer.erase(j_number_integer.begin(),<sp/>j_number_integer.end());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>j_number_float.erase(j_number_float.begin(),<sp/>j_number_float.end());</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>j_object.erase(j_object.find(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">),<sp/>j_object.end());</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>j_array.erase(j_array.begin()<sp/>+<sp/>1,<sp/>j_array.begin()<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>j_string.erase(j_string.begin(),<sp/>j_string.end());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/zGMngigiwwhsXEhB&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
null
null
{&quot;one&quot;:1}
[1,8,16]
null
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/erase__IteratorType_IteratorType.cpp -o erase__IteratorType_IteratorType </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_1a068a16e76be178e83da6a192916923ed" kindref="member">erase(IteratorType)</ref> <ndash/> removes the element at a given position </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2f8484d69c55d8f2a9697a7bec29362a_1a2f8484d69c55d8f2a9697a7bec29362a" kindref="member">erase(const typename object_t::key_type&amp;)</ref> <ndash/> removes the element from an object at the given key </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a88cbcefe9a3f4d294bed0653550a5cb9_1a88cbcefe9a3f4d294bed0653550a5cb9" kindref="member">erase(const size_type)</ref> <ndash/> removes the element from an array at the given index</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4679" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4679" bodyend="4736"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2f8484d69c55d8f2a9697a7bec29362a_1a2f8484d69c55d8f2a9697a7bec29362a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON object given a key </para>        </briefdescription>
        <detaileddescription>
<para>Removes elements from a JSON object with the key value <emphasis>key</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the elements to remove</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of elements removed. If <emphasis>ObjectType</emphasis> is the default <computeroutput>std::map</computeroutput> type, the return value will always be <computeroutput>0</computeroutput> (<emphasis>key</emphasis> was not found) or <computeroutput>1</computeroutput> (<emphasis>key</emphasis> was found).</para></simplesect>
<simplesect kind="post"><para>References and iterators to the erased elements are invalidated. Other references and iterators are not affected.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object; example: <computeroutput>&quot;cannot use erase() with null&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para><computeroutput>log(size()) + count(key)</computeroutput></para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the effect of <computeroutput>erase()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>erase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_one<sp/>=<sp/>j_object.erase(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_three<sp/>=<sp/>j_object.erase(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>count_one<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count_three<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/0eXbiM5KTPPXFkyP&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;two&quot;:2}
1 0
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/erase__key_type.cpp -o erase__key_type </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_1a068a16e76be178e83da6a192916923ed" kindref="member">erase(IteratorType)</ref> <ndash/> removes the element at a given position </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_1a4b3f7eb2d4625d95a51fbbdceb7c5f39" kindref="member">erase(IteratorType, IteratorType)</ref> <ndash/> removes the elements in the given range </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a88cbcefe9a3f4d294bed0653550a5cb9_1a88cbcefe9a3f4d294bed0653550a5cb9" kindref="member">erase(const size_type)</ref> <ndash/> removes the element from an array at the given index</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4767" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4767" bodyend="4776"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a88cbcefe9a3f4d294bed0653550a5cb9_1a88cbcefe9a3f4d294bed0653550a5cb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::erase</definition>
        <argsstring>(const size_type idx)</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON array given an index </para>        </briefdescription>
        <detaileddescription>
<para>Removes element from a JSON array at the index <emphasis>idx</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to remove</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object; example: <computeroutput>&quot;cannot use erase() with null&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>when <computeroutput>idx &gt;= size()</computeroutput>; example: <computeroutput>&quot;array index 17
is out of range&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in distance between <emphasis>idx</emphasis> and the end of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the effect of <computeroutput>erase()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>erase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>j_array.erase(2);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/WXGKRKjzP22ggTEr&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[0,1,3,4,5]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/erase__size_type.cpp -o erase__size_type </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_1a068a16e76be178e83da6a192916923ed" kindref="member">erase(IteratorType)</ref> <ndash/> removes the element at a given position </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_1a4b3f7eb2d4625d95a51fbbdceb7c5f39" kindref="member">erase(IteratorType, IteratorType)</ref> <ndash/> removes the elements in the given range </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2f8484d69c55d8f2a9697a7bec29362a_1a2f8484d69c55d8f2a9697a7bec29362a" kindref="member">erase(const typename object_t::key_type&amp;)</ref> <ndash/> removes the element from an object at the given key</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4802" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4802" bodyend="4818"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>lookup</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aeed33787bd362c7ead59a4ba945392db_1aeed33787bd362c7ead59a4ba945392db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::find</definition>
        <argsstring>(typename object_t::key_type key)</argsstring>
        <name>find</name>
        <param>
          <type>typename object_t::key_type</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>Finds an element in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, end() is returned.</para><para><simplesect kind="note"><para>This method always returns <ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value of the element to search for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator to an element with key equivalent to <emphasis>key</emphasis>. If no such element is found or the JSON value is not an object, past-the-end (see <ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref>) iterator is returned.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the JSON object.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>find()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_two<sp/>=<sp/>j_object.find(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_three<sp/>=<sp/>j_object.find(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;two\&quot;<sp/>was<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(it_two<sp/>!=<sp/>j_object.end())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>at<sp/>key<sp/>\&quot;two\&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it_two<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;three\&quot;<sp/>was<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(it_three<sp/>!=<sp/>j_object.end())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Kk6nOpsa6KetydpZ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;two&quot; was found: true
value at key &quot;two&quot;: 2
&quot;three&quot; was found: false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/find__key_type.cpp -o find__key_type </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4852" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4852" bodyend="4862"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aa7d1d9f2e2db74c985512d58087c6358_1aa7d1d9f2e2db74c985512d58087c6358" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::find</definition>
        <argsstring>(typename object_t::key_type key) const </argsstring>
        <name>find</name>
        <param>
          <type>typename object_t::key_type</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>find an element in a JSON object Finds an element in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, end() is returned.</para><para><simplesect kind="note"><para>This method always returns <ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value of the element to search for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator to an element with key equivalent to <emphasis>key</emphasis>. If no such element is found or the JSON value is not an object, past-the-end (see <ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref>) iterator is returned.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the JSON object.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>find()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_two<sp/>=<sp/>j_object.find(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_three<sp/>=<sp/>j_object.find(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;two\&quot;<sp/>was<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(it_two<sp/>!=<sp/>j_object.end())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>at<sp/>key<sp/>\&quot;two\&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it_two<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;three\&quot;<sp/>was<sp/>found:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(it_three<sp/>!=<sp/>j_object.end())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Kk6nOpsa6KetydpZ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;two&quot; was found: true
value at key &quot;two&quot;: 2
&quot;three&quot; was found: false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/find__key_type.cpp -o find__key_type </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4868" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4868" bodyend="4878"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2243b1fda561a3a65defcc69517b7119_1a2243b1fda561a3a65defcc69517b7119" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::count</definition>
        <argsstring>(typename object_t::key_type key) const </argsstring>
        <name>count</name>
        <param>
          <type>typename object_t::key_type</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the number of occurrences of a key in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements with key <emphasis>key</emphasis>. If ObjectType is the default <computeroutput>std::map</computeroutput> type, the return value will always be <computeroutput>0</computeroutput> (<emphasis>key</emphasis> was not found) or <computeroutput>1</computeroutput> (<emphasis>key</emphasis> was found).</para><para><simplesect kind="note"><para>This method always returns <computeroutput>0</computeroutput> when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value of the element to count</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of elements with key <emphasis>key</emphasis>. If the JSON value is not an object, the return value will be <computeroutput>0</computeroutput>.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the JSON object.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>count()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_two<sp/>=<sp/>j_object.count(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_three<sp/>=<sp/>j_object.count(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>elements<sp/>with<sp/>key<sp/>\&quot;two\&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count_two<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>elements<sp/>with<sp/>key<sp/>\&quot;three\&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count_three<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/yv5TMrq9qREivvHf&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>number of elements with key &quot;two&quot;: 1
number of elements with key &quot;three&quot;: 0
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/count.cpp -o count </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4901" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4901" bodyend="4905"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>iterators</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aea8c06bb8e632f14cd77632519213d75_1aea8c06bb8e632f14cd77632519213d75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iteration_proxy&lt; <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref> &gt;</type>
        <definition>static iteration_proxy&lt;iterator&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iterator_wrapper</definition>
        <argsstring>(reference cont)</argsstring>
        <name>iterator_wrapper</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>wrapper to access iterator member functions in range-based for </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to access <ref refid="classnlohmann_1_1basic__json_1_1iter__impl_afea58057767b8bcdb8c35059ee9a445f_1afea58057767b8bcdb8c35059ee9a445f" kindref="member">iterator::key()</ref> and <ref refid="classnlohmann_1_1basic__json_1_1iter__impl_a2597c381f70b376336bd4faa87fadc28_1a2597c381f70b376336bd4faa87fadc28" kindref="member">iterator::value()</ref> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para><para><simplesect kind="note"><para>The name of this function is not yet final and may change in the future. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5206" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5206" bodyend="5209"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_adb4db7abbc5ba12c9273f032a7b89198_1adb4db7abbc5ba12c9273f032a7b89198" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iteration_proxy&lt; <ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref> &gt;</type>
        <definition>static iteration_proxy&lt;const_iterator&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::iterator_wrapper</definition>
        <argsstring>(const_reference cont)</argsstring>
        <name>iterator_wrapper</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>wrapper to access iterator member functions in range-based for </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to access <ref refid="classnlohmann_1_1basic__json_1_1iter__impl_afea58057767b8bcdb8c35059ee9a445f_1afea58057767b8bcdb8c35059ee9a445f" kindref="member">iterator::key()</ref> and <ref refid="classnlohmann_1_1basic__json_1_1iter__impl_a2597c381f70b376336bd4faa87fadc28_1a2597c381f70b376336bd4faa87fadc28" kindref="member">iterator::value()</ref> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para><para><simplesect kind="note"><para>The name of this function is not yet final and may change in the future. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5214" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5214" bodyend="5217"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>returns an iterator to the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the first element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>iterator to the first element</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>begin()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>am<sp/>iterator<sp/>to<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">json::iterator</ref><sp/>it<sp/>=<sp/>array.begin();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/0lW1WJ1ZP8g92Jp9&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/begin.cpp -o begin </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_1ad865d6c291b237ae508d5cb2146b5877" kindref="member">cbegin()</ref> <ndash/> returns a const iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> <ndash/> returns an iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_1a8dba7b7d2f38e6b0c614030aa43983f6" kindref="member">cend()</ref> <ndash/> returns a const iterator to the end</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4941" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4941" bodyend="4946"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a4f0f5dd42b2987ff20306ed78bd31d1d_1a4f0f5dd42b2987ff20306ed78bd31d1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>returns a const iterator to the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the first element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator to the first element</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).begin()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>cbegin()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>am<sp/>iterator<sp/>to<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">json::const_iterator</ref><sp/>it<sp/>=<sp/>array.cbegin();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/yarD6DyxYlIf8Ymg&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/cbegin.cpp -o cbegin </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref> <ndash/> returns an iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> <ndash/> returns an iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_1a8dba7b7d2f38e6b0c614030aa43983f6" kindref="member">cend()</ref> <ndash/> returns a const iterator to the end</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4951" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4951" bodyend="4954"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_1ad865d6c291b237ae508d5cb2146b5877" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>returns a const iterator to the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the first element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator to the first element</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).begin()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>cbegin()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>am<sp/>iterator<sp/>to<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">json::const_iterator</ref><sp/>it<sp/>=<sp/>array.cbegin();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/yarD6DyxYlIf8Ymg&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/cbegin.cpp -o cbegin </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref> <ndash/> returns an iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> <ndash/> returns an iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_1a8dba7b7d2f38e6b0c614030aa43983f6" kindref="member">cend()</ref> <ndash/> returns a const iterator to the end</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="4981" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="4981" bodyend="4986"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>returns an iterator to one past the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to one past the last element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>iterator one past the last element</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>end()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>am<sp/>iterator<sp/>to<sp/>one<sp/>past<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">json::iterator</ref><sp/>it<sp/>=<sp/>array.end();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrement<sp/>the<sp/>iterator<sp/>to<sp/>point<sp/>to<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/4Fbmy4IG012HmGKs&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>5
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/end.cpp -o end </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_1a8dba7b7d2f38e6b0c614030aa43983f6" kindref="member">cend()</ref> <ndash/> returns a const iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref> <ndash/> returns an iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_1ad865d6c291b237ae508d5cb2146b5877" kindref="member">cbegin()</ref> <ndash/> returns a const iterator to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5012" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5012" bodyend="5017"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1c15707055088cd5436ae91db72cbe67_1a1c15707055088cd5436ae91db72cbe67" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>returns a const iterator to one past the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to one past the last element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator one past the last element</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).end()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>cend()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>am<sp/>iterator<sp/>to<sp/>one<sp/>past<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">json::const_iterator</ref><sp/>it<sp/>=<sp/>array.cend();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrement<sp/>the<sp/>iterator<sp/>to<sp/>point<sp/>to<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/9oPbpnFNgKtKjB0O&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>5
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/cend.cpp -o cend </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> <ndash/> returns an iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref> <ndash/> returns an iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_1ad865d6c291b237ae508d5cb2146b5877" kindref="member">cbegin()</ref> <ndash/> returns a const iterator to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5022" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5022" bodyend="5025"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_1a8dba7b7d2f38e6b0c614030aa43983f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
<para>returns a const iterator to one past the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to one past the last element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator one past the last element</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).end()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>cend()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>am<sp/>iterator<sp/>to<sp/>one<sp/>past<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">json::const_iterator</ref><sp/>it<sp/>=<sp/>array.cend();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrement<sp/>the<sp/>iterator<sp/>to<sp/>point<sp/>to<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/9oPbpnFNgKtKjB0O&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>5
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/cend.cpp -o cend </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" kindref="member">end()</ref> <ndash/> returns an iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" kindref="member">begin()</ref> <ndash/> returns an iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_1ad865d6c291b237ae508d5cb2146b5877" kindref="member">cbegin()</ref> <ndash/> returns a const iterator to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5052" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5052" bodyend="5057"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac223d5560c2b05a208c88de67376c5f2_1ac223d5560c2b05a208c88de67376c5f2" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>returns an iterator to the reverse-beginning </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the reverse-beginning; that is, the last element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
 <simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>reverse_iterator(end())</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>rbegin()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>reverse-beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac223d5560c2b05a208c88de67376c5f2_1ac223d5560c2b05a208c88de67376c5f2" kindref="member">json::reverse_iterator</ref><sp/>it<sp/>=<sp/>array.rbegin();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/KiWAz9ZSK8L3k2kg&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>5
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/rbegin.cpp -o rbegin </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_1a1e0769d22d54573f294da0e5c6abc9de" kindref="member">crbegin()</ref> <ndash/> returns a const reverse iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" kindref="member">rend()</ref> <ndash/> returns a reverse iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_1a5795b029dbf28e0cb2c7a439ec5d0a88" kindref="member">crend()</ref> <ndash/> returns a const reverse iterator to the end</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5082" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5082" bodyend="5085"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a515e7618392317dbf4b72d3e18bf2ab2_1a515e7618392317dbf4b72d3e18bf2ab2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>returns a const reverse iterator to the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the reverse-beginning; that is, the last element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
 <simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).rbegin()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>crbegin()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>reverse-beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">json::const_reverse_iterator</ref><sp/>it<sp/>=<sp/>array.crbegin();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/GQz9A5y7HduQHVMw&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>5
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/crbegin.cpp -o crbegin </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" kindref="member">rbegin()</ref> <ndash/> returns a reverse iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" kindref="member">rend()</ref> <ndash/> returns a reverse iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_1a5795b029dbf28e0cb2c7a439ec5d0a88" kindref="member">crend()</ref> <ndash/> returns a const reverse iterator to the end</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5090" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5090" bodyend="5093"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac223d5560c2b05a208c88de67376c5f2_1ac223d5560c2b05a208c88de67376c5f2" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>returns an iterator to the reverse-end </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the reverse-end; that is, one before the first element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
 <simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>reverse_iterator(begin())</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>rend()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>reverse-end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac223d5560c2b05a208c88de67376c5f2_1ac223d5560c2b05a208c88de67376c5f2" kindref="member">json::reverse_iterator</ref><sp/>it<sp/>=<sp/>array.rend();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>iterator<sp/>to<sp/>point<sp/>to<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/2QoIzXRq9ODTMxRf&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/rend.cpp -o rend </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_1a5795b029dbf28e0cb2c7a439ec5d0a88" kindref="member">crend()</ref> <ndash/> returns a const reverse iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" kindref="member">rbegin()</ref> <ndash/> returns a reverse iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_1a1e0769d22d54573f294da0e5c6abc9de" kindref="member">crbegin()</ref> <ndash/> returns a const reverse iterator to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5119" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5119" bodyend="5122"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a4f73d4cee67ea328d785979c22af0ae1_1a4f73d4cee67ea328d785979c22af0ae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>returns a const reverse iterator to one before the first </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
 <simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).rend()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>crend()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>reverse-end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">json::const_reverse_iterator</ref><sp/>it<sp/>=<sp/>array.crend();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>iterator<sp/>to<sp/>point<sp/>to<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Qom888gs2RM4wR4H&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/crend.cpp -o crend </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" kindref="member">rend()</ref> <ndash/> returns a reverse iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" kindref="member">rbegin()</ref> <ndash/> returns a reverse iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_1a1e0769d22d54573f294da0e5c6abc9de" kindref="member">crbegin()</ref> <ndash/> returns a const reverse iterator to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5127" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5127" bodyend="5130"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_1a1e0769d22d54573f294da0e5c6abc9de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>returns a const reverse iterator to the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the reverse-beginning; that is, the last element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
 <simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).rbegin()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>crbegin()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>reverse-beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">json::const_reverse_iterator</ref><sp/>it<sp/>=<sp/>array.crbegin();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/GQz9A5y7HduQHVMw&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>5
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/crbegin.cpp -o crbegin </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" kindref="member">rbegin()</ref> <ndash/> returns a reverse iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" kindref="member">rend()</ref> <ndash/> returns a reverse iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_1a5795b029dbf28e0cb2c7a439ec5d0a88" kindref="member">crend()</ref> <ndash/> returns a const reverse iterator to the end</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5156" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5156" bodyend="5159"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_1a5795b029dbf28e0cb2c7a439ec5d0a88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
<para>returns a const reverse iterator to one before the first </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
 <simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const basic_json&amp;&gt;(*this).rend()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example for <computeroutput>crend()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>reverse-end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" kindref="member">json::const_reverse_iterator</ref><sp/>it<sp/>=<sp/>array.crend();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>iterator<sp/>to<sp/>point<sp/>to<sp/>the<sp/>first<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>element<sp/>that<sp/>the<sp/>iterator<sp/>points<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Qom888gs2RM4wR4H&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/crend.cpp -o crend </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" kindref="member">rend()</ref> <ndash/> returns a reverse iterator to the end </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" kindref="member">rbegin()</ref> <ndash/> returns a reverse iterator to the beginning </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_1a1e0769d22d54573f294da0e5c6abc9de" kindref="member">crbegin()</ref> <ndash/> returns a const reverse iterator to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5185" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5185" bodyend="5188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>capacity</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1a86d444bfeaa9518d2421aedd74444a_1a1a86d444bfeaa9518d2421aedd74444a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>checks whether the container is empty </para>        </briefdescription>
        <detaileddescription>
<para>Checks if a JSON value has no elements.</para><para><simplesect kind="return"><para>The return value depends on the different types and is defined as follows: <table rows="7" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>result of function <computeroutput>object_t::empty()</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>result of function <computeroutput>array_t::empty()</computeroutput> </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="note"><para>This function does not return whether a string stored as JSON value is empty - it returns whether the JSON container itself is empty which is false in the case of a string.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant, as long as <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> and <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> satisfy the Container concept; that is, their <computeroutput>empty()</computeroutput> functions have constant complexity.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>begin() == end()</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code uses <computeroutput>empty()</computeroutput> to check if a JSON object contains any elements. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_empty(json::value_t::object);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_empty(json::value_t::array);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>empty()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object_empty.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array_empty.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.empty()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/rP64u8KqUJqB9lFd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>true
false
false
false
false
true
false
true
false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/empty.cpp -o empty </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a25e27ad0c6d53c01871c5485e1f75b96_1a25e27ad0c6d53c01871c5485e1f75b96" kindref="member">size()</ref> <ndash/> returns the number of elements</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5266" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5266" bodyend="5294"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a25e27ad0c6d53c01871c5485e1f75b96_1a25e27ad0c6d53c01871c5485e1f75b96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>returns the number of elements </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in a JSON value.</para><para><simplesect kind="return"><para>The return value depends on the different types and is defined as follows: <table rows="7" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>result of function object_t::size() </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>result of function array_t::size() </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="note"><para>This function does not return the length of a string stored as JSON value - it returns the number of elements in the JSON value which is 1 in the case of a string.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant, as long as <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> and <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> satisfy the Container concept; that is, their size() functions have constant complexity.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>std::distance(begin(), end())</computeroutput>.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code calls <computeroutput>size()</computeroutput> on the different value types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object_empty(json::value_t::object);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array_empty(json::value_t::array);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>size()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object_empty.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array_empty.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ykuhQopCVvOXcvs9&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>0
1
1
1
2
0
5
0
1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/size.cpp -o size </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a1a86d444bfeaa9518d2421aedd74444a_1a1a86d444bfeaa9518d2421aedd74444a" kindref="member">empty()</ref> <ndash/> checks whether the container is empty </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2f47d3c6a441c57dd2be00449fbb88e1_1a2f47d3c6a441c57dd2be00449fbb88e1" kindref="member">max_size()</ref> <ndash/> returns the maximal number of elements</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5334" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5334" bodyend="5362"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2f47d3c6a441c57dd2be00449fbb88e1_1a2f47d3c6a441c57dd2be00449fbb88e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>returns the maximum possible number of elements </para>        </briefdescription>
        <detaileddescription>
<para>Returns the maximum number of elements a JSON value is able to hold due to system or library implementation limitations, i.e. <computeroutput>std::distance(begin(), end())</computeroutput> for the JSON value.</para><para><simplesect kind="return"><para>The return value depends on the different types and is defined as follows: <table rows="7" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> (same as <computeroutput>size()</computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput>size()</computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput>size()</computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput>size()</computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>result of function <computeroutput>object_t::max_size()</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>result of function <computeroutput>array_t::max_size()</computeroutput> </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant, as long as <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> and <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> satisfy the Container concept; that is, their <computeroutput>max_size()</computeroutput> functions have constant complexity.</para></simplesect>
<simplesect kind="par"><title>Requirements</title><para>This function helps <computeroutput>basic_json</computeroutput> satisfying the <ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of returning <computeroutput>b.size()</computeroutput> where <computeroutput>b</computeroutput> is the largest possible JSON value.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code calls <computeroutput>max_size()</computeroutput> on the different value types. Note the output is implementation specific. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>max_size()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.max_size()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/NBFk3TxTo32pKt36&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>0
1
1
1
256204778801521550
1152921504606846975
1
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/max_size.cpp -o max_size </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a25e27ad0c6d53c01871c5485e1f75b96_1a25e27ad0c6d53c01871c5485e1f75b96" kindref="member">size()</ref> <ndash/> returns the number of elements</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5400" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5400" bodyend="5422"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>modifiers</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abfeba47810ca72f2176419942c4e1952_1abfeba47810ca72f2176419942c4e1952" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clears the contents </para>        </briefdescription>
        <detaileddescription>
<para>Clears the content of a JSON value and resets it to the default value as if <ref refid="classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_1a32124a16dc80729d964d9caf607c2bc8" kindref="member">basic_json(value_t)</ref> would have been called:</para><para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>initial value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><computeroutput>{}</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><computeroutput>[]</computeroutput> </para></entry></row>
</table>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the JSON value.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows the effect of <computeroutput>clear()</computeroutput> to different JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>clear()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>j_null.clear();</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>j_boolean.clear();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>j_number_integer.clear();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>j_number_float.clear();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>j_object.clear();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>j_array.clear();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>j_string.clear();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>the<sp/>cleared<sp/>values()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/wwsjMZP8U6bWhUil&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
false
0
0.0
{}
[]
&quot;&quot;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/clear.cpp -o clear </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5456" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5456" bodyend="5507"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Amortized constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>array.push_back(6);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>array<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/zz3xkIXJYVhmYAla&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3,4,5]
null
[1,2,3,4,5,6,7]
[&quot;first&quot;,&quot;second&quot;]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back.cpp -o push_back </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5529" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5529" bodyend="5549"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aea1085f2d35cc0e1ce119cf0110119e6_1aea1085f2d35cc0e1ce119cf0110119e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+=</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Amortized constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>array.push_back(6);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>array<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/zz3xkIXJYVhmYAla&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3,4,5]
null
[1,2,3,4,5,6,7]
[&quot;first&quot;,&quot;second&quot;]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back.cpp -o push_back </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5555" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5555" bodyend="5559"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ab4384af330b79de0e5f279576803a2c7_1ab4384af330b79de0e5f279576803a2c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Amortized constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>array.push_back(6);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>array<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/zz3xkIXJYVhmYAla&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3,4,5]
null
[1,2,3,4,5,6,7]
[&quot;first&quot;,&quot;second&quot;]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back.cpp -o push_back </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5565" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5565" bodyend="5583"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_adc29dd6358ff7a9062d7e168c24e7484_1adc29dd6358ff7a9062d7e168c24e7484" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+=</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Amortized constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>array.push_back(6);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>array<sp/>+=<sp/>7;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/zz3xkIXJYVhmYAla&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3,4,5]
null
[1,2,3,4,5,6,7]
[&quot;first&quot;,&quot;second&quot;]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back.cpp -o push_back </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5589" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5589" bodyend="5593"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ae11a3a51782c058fff2f6550cdfb9b3c_1ae11a3a51782c058fff2f6550cdfb9b3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>Inserts the given element <emphasis>val</emphasis> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container, O(log(<computeroutput>size()</computeroutput>)).</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.push_back(json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>+=<sp/>json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/>json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/>json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/lmXOd27kgJ2wQGMZ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}
null
{&quot;four&quot;:4,&quot;one&quot;:1,&quot;three&quot;:3,&quot;two&quot;:2}
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back__object_t__value.cpp -o push_back__object_t__value </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5615" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5615" bodyend="5633"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abf04978d85a2d5c4754f4806d42f46fd_1abf04978d85a2d5c4754f4806d42f46fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+=</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an object Inserts the given element <emphasis>val</emphasis> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container, O(log(<computeroutput>size()</computeroutput>)).</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.push_back(json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>+=<sp/>json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/>json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>null<sp/>+=<sp/>json::object_t::value_type(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/lmXOd27kgJ2wQGMZ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}
null
{&quot;four&quot;:4,&quot;one&quot;:1,&quot;three&quot;:3,&quot;two&quot;:2}
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back__object_t__value.cpp -o push_back__object_t__value </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5639" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5639" bodyend="5643"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ab2716cbe2e997ab8309926b87f044434_1ab2716cbe2e997ab8309926b87f044434" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::push_back</definition>
        <argsstring>(std::initializer_list&lt; basic_json &gt; init)</argsstring>
        <name>push_back</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to use <computeroutput>push_back</computeroutput> with an initializer list. In case</para><para><orderedlist>
<listitem><para>the current value is an object,</para></listitem><listitem><para>the initializer list <emphasis>init</emphasis> contains only two elements, and</para></listitem><listitem><para>the first element of <emphasis>init</emphasis> is a string,</para></listitem></orderedlist>
</para><para><emphasis>init</emphasis> is converted into an object element and added using <ref refid="classnlohmann_1_1basic__json_ae11a3a51782c058fff2f6550cdfb9b3c_1ae11a3a51782c058fff2f6550cdfb9b3c" kindref="member">push_back(const typename object_t::value_type&amp;)</ref>. Otherwise, <emphasis>init</emphasis> is converted to a JSON value and added using <ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back(basic_json&amp;&amp;)</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>an initializer list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the initializer list <emphasis>init</emphasis>.</para></simplesect>
<simplesect kind="note"><para>This function is required to resolve an ambiguous overload error, because pairs like <computeroutput>{&quot;key&quot;, &quot;value&quot;}</computeroutput> can be both interpreted as <computeroutput>object_t::value_type</computeroutput> or <computeroutput>std::initializer_list&lt;basic_json&gt;</computeroutput>, see <ulink url="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</ulink> for more information.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how initializer lists are treated as objects when possible. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.push_back({</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3});<sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>is<sp/>extended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>+=<sp/>{</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/>4};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>is<sp/>extended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null.push_back({</highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">,<sp/>5});<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>is<sp/>converted<sp/>to<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>would<sp/>throw:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//object.push_back({1,<sp/>2,<sp/>3});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/wZF4dRHjfCyjb3rx&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}
null
{&quot;four&quot;:4,&quot;one&quot;:1,&quot;three&quot;:3,&quot;two&quot;:2}
[[&quot;five&quot;,5]]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back__initializer_list.cpp -o push_back__initializer_list </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5670" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5670" bodyend="5681"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a0cf23e7d44e78bb9014484971af2f40f_1a0cf23e7d44e78bb9014484971af2f40f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator+=</definition>
        <argsstring>(std::initializer_list&lt; basic_json &gt; init)</argsstring>
        <name>operator+=</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an object This function allows to use <computeroutput>push_back</computeroutput> with an initializer list. In case</para><para><orderedlist>
<listitem><para>the current value is an object,</para></listitem><listitem><para>the initializer list <emphasis>init</emphasis> contains only two elements, and</para></listitem><listitem><para>the first element of <emphasis>init</emphasis> is a string,</para></listitem></orderedlist>
</para><para><emphasis>init</emphasis> is converted into an object element and added using <ref refid="classnlohmann_1_1basic__json_ae11a3a51782c058fff2f6550cdfb9b3c_1ae11a3a51782c058fff2f6550cdfb9b3c" kindref="member">push_back(const typename object_t::value_type&amp;)</ref>. Otherwise, <emphasis>init</emphasis> is converted to a JSON value and added using <ref refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" kindref="member">push_back(basic_json&amp;&amp;)</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>an initializer list</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the initializer list <emphasis>init</emphasis>.</para></simplesect>
<simplesect kind="note"><para>This function is required to resolve an ambiguous overload error, because pairs like <computeroutput>{&quot;key&quot;, &quot;value&quot;}</computeroutput> can be both interpreted as <computeroutput>object_t::value_type</computeroutput> or <computeroutput>std::initializer_list&lt;basic_json&gt;</computeroutput>, see <ulink url="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</ulink> for more information.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how initializer lists are treated as objects when possible. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.push_back({</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3});<sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>is<sp/>extended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>+=<sp/>{</highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/>4};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>object<sp/>is<sp/>extended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null.push_back({</highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">,<sp/>5});<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>is<sp/>converted<sp/>to<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>would<sp/>throw:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//object.push_back({1,<sp/>2,<sp/>3});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/wZF4dRHjfCyjb3rx&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}
null
{&quot;four&quot;:4,&quot;one&quot;:1,&quot;three&quot;:3,&quot;two&quot;:2}
[[&quot;five&quot;,5]]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/push_back__initializer_list.cpp -o push_back__initializer_list </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5687" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5687" bodyend="5691"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ade45be7a74af7aa2d447e555d48e39ea_1ade45be7a74af7aa2d447e555d48e39ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON value from the passed parameters <emphasis>args</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending the value created from <emphasis>args</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to a constructor of <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>compatible types to create a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.311</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use emplace_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Amortized constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>push_back()</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>array.emplace_back(6);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>null.emplace_back(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null.emplace_back(3,<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/jdch45YEMX94DvlH&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3,4,5]
null
[1,2,3,4,5,6]
[&quot;first&quot;,[&quot;second&quot;,&quot;second&quot;,&quot;second&quot;]]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/emplace_back.cpp -o emplace_back </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.8 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5715" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5715" bodyend="5733"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ab515108f8219ac33256a48066bbc7354_1ab515108f8219ac33256a48066bbc7354" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref>, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an object if key does not exist </para>        </briefdescription>
        <detaileddescription>
<para>Inserts a new element into a JSON object constructed in-place with the given <emphasis>args</emphasis> if there is no element with the key in the container. If the function is called on a JSON null value, an empty object is created before appending the value created from <emphasis>args</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to a constructor of <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>compatible types to create a <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a bool denoting whether the insertion took place.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.311</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use emplace() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Logarithmic in the size of the container, O(log(<computeroutput>size()</computeroutput>)).</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>emplace()</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object. Further note how no value is added if there was already one value stored with the same key. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>null;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res1<sp/>=<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">.emplace(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>null.emplace(</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>null.emplace(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>call<sp/>will<sp/>not<sp/>add<sp/>an<sp/>object,<sp/>because<sp/>there<sp/>is<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>value<sp/>stored<sp/>at<sp/>key<sp/>&quot;B&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res2<sp/>=<sp/>null.emplace(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*res1.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>res1.second<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>null<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*res2.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>res2.second<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/B6ILaoysGMliouEO&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}
null
{&quot;one&quot;:1,&quot;three&quot;:3,&quot;two&quot;:2}
3 true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;}
&quot;b&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/emplace.cpp -o emplace </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.8 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5763" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5763" bodyend="5787"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a0136728f5db69d4051c77b94307abd6c_1a0136728f5db69d4051c77b94307abd6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert</definition>
        <argsstring>(const_iterator pos, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element </para>        </briefdescription>
        <detaileddescription>
<para>Inserts element <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the end() iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the inserted <emphasis>val</emphasis>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>insert()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>v<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>number<sp/>10<sp/>before<sp/>number<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_pos<sp/>=<sp/>v.insert(v.begin()<sp/>+<sp/>2,<sp/>10);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>new<sp/>array<sp/>and<sp/>result<sp/>of<sp/>insert<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*new_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ePN9gb4P3WTAiT6H&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>10
[1,2,10,3,4]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/insert.cpp -o insert </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5811" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5811" bodyend="5829"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a1ecce113ff11dd294689ee4d45cbb855_1a1ecce113ff11dd294689ee4d45cbb855" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert</definition>
        <argsstring>(const_iterator pos, basic_json &amp;&amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element </para>        </briefdescription>
        <detaileddescription>
<para>inserts element Inserts element <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the end() iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the inserted <emphasis>val</emphasis>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>insert()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>v<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>number<sp/>10<sp/>before<sp/>number<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_pos<sp/>=<sp/>v.insert(v.begin()<sp/>+<sp/>2,<sp/>10);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>new<sp/>array<sp/>and<sp/>result<sp/>of<sp/>insert<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*new_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ePN9gb4P3WTAiT6H&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>10
[1,2,10,3,4]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/insert.cpp -o insert </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5835" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5835" bodyend="5838"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a30a7cc24f2931c20ecae37ec4a5e901f_1a30a7cc24f2931c20ecae37ec4a5e901f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert</definition>
        <argsstring>(const_iterator pos, size_type cnt, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>cnt</emphasis> copies of <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the end() iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of copies of <emphasis>val</emphasis> to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>cnt==0</computeroutput></para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in <emphasis>cnt</emphasis> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>insert()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>v<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>number<sp/>7<sp/>copies<sp/>of<sp/>number<sp/>7<sp/>before<sp/>number<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_pos<sp/>=<sp/>v.insert(v.begin()<sp/>+<sp/>2,<sp/>7,<sp/>7);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>new<sp/>array<sp/>and<sp/>result<sp/>of<sp/>insert<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*new_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/wnxritIWxpGS2SSt&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>7
[1,2,7,7,7,7,7,7,7,3,4]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/insert__count.cpp -o insert__count </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5864" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5864" bodyend="5882"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a404cfe1bdbf1dc6b229627fcf2afb95f_1a404cfe1bdbf1dc6b229627fcf2afb95f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert</definition>
        <argsstring>(const_iterator pos, const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts elements from range <computeroutput>[first, last)</computeroutput> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the end() iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range of elements to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range of elements to insert</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.210</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.211</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>first</emphasis> or <emphasis>last</emphasis> are iterators into container for which insert is called; example: <computeroutput>&quot;passed iterators may not
belong to container&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>first==last</computeroutput></para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in <computeroutput>std::distance(first, last)</computeroutput> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>insert()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>v<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array<sp/>to<sp/>copy<sp/>values<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>v2<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>range<sp/>from<sp/>v2<sp/>before<sp/>the<sp/>end<sp/>of<sp/>array<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_pos<sp/>=<sp/>v.insert(v.end(),<sp/>v2.begin(),<sp/>v2.end());</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>new<sp/>array<sp/>and<sp/>result<sp/>of<sp/>insert<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*new_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/rub1CDmN5dKK1LJW&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>&quot;one&quot;
[1,2,3,4,&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/insert__range.cpp -o insert__range </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5914" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5914" bodyend="5946"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ad154c4228e4867c67b25a6601ced89bd_1ad154c4228e4867c67b25a6601ced89bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::insert</definition>
        <argsstring>(const_iterator pos, std::initializer_list&lt; basic_json &gt; ilist)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>ilist</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts elements from initializer list <emphasis>ilist</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the end() iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ilist</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list to insert the values from</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>ilist</computeroutput> is empty</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in <computeroutput>ilist.size()</computeroutput> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows how <computeroutput>insert()</computeroutput> is used. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>v<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>range<sp/>from<sp/>v2<sp/>before<sp/>the<sp/>end<sp/>of<sp/>array<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_pos<sp/>=<sp/>v.insert(v.end(),<sp/>{7,<sp/>8,<sp/>9});</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>new<sp/>array<sp/>and<sp/>result<sp/>of<sp/>insert<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>*new_pos<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/kem0JnkdOVLNHii5&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>7
[1,2,3,4,7,8,9]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/insert__ilist.cpp -o insert__ilist </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="5972" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="5972" bodyend="5990"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a66d4de311f79f2fe640793ab7a178781_1a66d4de311f79f2fe640793ab7a178781" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap</definition>
        <argsstring>(reference other) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value andstd::is_nothrow_move_assignable&lt; value_t &gt;::value andstd::is_nothrow_move_constructible&lt; json_value &gt;::value andstd::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of the JSON value with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how JSON values can be swapped with <computeroutput>swap()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>two<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j1<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">,<sp/>3.141592653589793},<sp/>{</highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/>2.718281828459045}};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>j1.swap(j2);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;j1<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;j2<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j2<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/gYuvmciucjS8NYY0&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>j1 = {&quot;e&quot;:2.71828182845905,&quot;pi&quot;:3.14159265358979}
j2 = [1,2,3,4,5]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/swap__reference.cpp -o swap__reference </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6009" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6009" bodyend="6019"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a65b0a24e1361a030ad0a661de22f6c8e_1a65b0a24e1361a030ad0a661de22f6c8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap</definition>
        <argsstring>(array_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON array with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>array to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not an array; example: <computeroutput>&quot;cannot
use swap() with string&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how arrays can be swapped with <computeroutput>swap()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2,<sp/>3,<sp/>4}}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>array_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">json::array_t</ref><sp/>array<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Snap&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Crackle&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Pop&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>array<sp/>stored<sp/>in<sp/>the<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>value[</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">].swap(array);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;array<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Hb0oakHEKJ2cuMTE&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>value = {&quot;array&quot;:[&quot;Snap&quot;,&quot;Crackle&quot;,&quot;Pop&quot;]}
array = [1,2,3,4]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/swap__array_t.cpp -o swap__array_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6041" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6041" bodyend="6052"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ac31f12587d2f1a3be5ffc394aa9d72a4_1ac31f12587d2f1a3be5ffc394aa9d72a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap</definition>
        <argsstring>(object_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON object with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>object to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not an object; example: <computeroutput>&quot;cannot use swap() with string&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how objects can be swapped with <computeroutput>swap()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>{<sp/>{</highlight><highlight class="stringliteral">&quot;translation&quot;</highlight><highlight class="normal">,<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;eins&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;zwei&quot;</highlight><highlight class="normal">}}}<sp/>};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>object_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">json::object_t</ref><sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;cow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Kuh&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;dog&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hund&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>object<sp/>stored<sp/>in<sp/>the<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>value[</highlight><highlight class="stringliteral">&quot;translation&quot;</highlight><highlight class="normal">].swap(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;object<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/flPVbr8widwRmnad&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>value = {&quot;translation&quot;:{&quot;cow&quot;:&quot;Kuh&quot;,&quot;dog&quot;:&quot;Hund&quot;}}
object = {&quot;one&quot;:&quot;eins&quot;,&quot;two&quot;:&quot;zwei&quot;}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/swap__object_t.cpp -o swap__object_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6074" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6074" bodyend="6085"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_adaa1ed0a889d86c8e0216a3d66980f76_1adaa1ed0a889d86c8e0216a3d66980f76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::swap</definition>
        <argsstring>(string_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON string with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>string to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not a string; example: <computeroutput>&quot;cannot
use swap() with boolean&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how strings can be swapped with <computeroutput>swap()</computeroutput>. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>value<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>good&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>bad&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>ugly&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>string_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">json::string_t</ref><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>fast&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>the<sp/>object<sp/>stored<sp/>in<sp/>the<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>value[1].swap(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;string<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/747DNDuWilHBrac3&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>value = [&quot;the good&quot;,&quot;the fast&quot;,&quot;the ugly&quot;]
string = the bad
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/swap__string_t.cpp -o swap__string_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6107" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6107" bodyend="6118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>lexicographical comparison operators</header>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a122640e7e2db1814fc7bbb3c122ec76e_1a122640e7e2db1814fc7bbb3c122ec76e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem><para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison. Floating-point numbers are compared indirectly: two floating-point numbers <computeroutput>f1</computeroutput> and <computeroutput>f2</computeroutput> are considered equal if neither <computeroutput>f1 &gt; f2</computeroutput> nor <computeroutput>f2 &gt; f1</computeroutput> holds. Note than two NaN values are always treated as unequal.</para></listitem><listitem><para>Two JSON null values are equal.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>NaN values never compare equal to themselves or to other NaN values.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.000000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>==<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>==<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>==<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>==<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/sBTv52u9kI2gjeFJ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 == 17 true
&quot;foo&quot; == &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__equal.cpp -o operator__equal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6157" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6157" bodyend="6230"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_aba21440ea1aff44f718285ed7d6d20d9_1aba21440ea1aff44f718285ed7d6d20d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const_reference lhs, const ScalarType rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: equal Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem><para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison. Floating-point numbers are compared indirectly: two floating-point numbers <computeroutput>f1</computeroutput> and <computeroutput>f2</computeroutput> are considered equal if neither <computeroutput>f1 &gt; f2</computeroutput> nor <computeroutput>f2 &gt; f1</computeroutput> holds. Note than two NaN values are always treated as unequal.</para></listitem><listitem><para>Two JSON null values are equal.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>NaN values never compare equal to themselves or to other NaN values.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.000000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>==<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>==<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>==<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>==<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/sBTv52u9kI2gjeFJ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 == 17 true
&quot;foo&quot; == &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__equal.cpp -o operator__equal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6238" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6238" bodyend="6241"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_aef302e3ae215e46e5035d0e4fdf47235_1aef302e3ae215e46e5035d0e4fdf47235" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: equal Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem><para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison. Floating-point numbers are compared indirectly: two floating-point numbers <computeroutput>f1</computeroutput> and <computeroutput>f2</computeroutput> are considered equal if neither <computeroutput>f1 &gt; f2</computeroutput> nor <computeroutput>f2 &gt; f1</computeroutput> holds. Note than two NaN values are always treated as unequal.</para></listitem><listitem><para>Two JSON null values are equal.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>NaN values never compare equal to themselves or to other NaN values.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.000000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>==<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>==<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>==<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>==<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/sBTv52u9kI2gjeFJ&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 == 17 true
&quot;foo&quot; == &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__equal.cpp -o operator__equal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6249" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6249" bodyend="6252"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a6e2e21da48f5d9471716cd868a068327_1a6e2e21da48f5d9471716cd868a068327" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: not equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.000000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>!=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>!=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>!=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>!=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/m4adEpqac1fmOwNn&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17 false
&quot;foo&quot; == &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__notequal.cpp -o operator__notequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6270" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6270" bodyend="6273"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_afefc38fc08bdb7a9a7474b5ab4a1140f_1afefc38fc08bdb7a9a7474b5ab4a1140f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const_reference lhs, const ScalarType rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: not equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: not equal Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.000000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>!=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>!=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>!=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>!=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/m4adEpqac1fmOwNn&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17 false
&quot;foo&quot; == &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__notequal.cpp -o operator__notequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6281" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6281" bodyend="6284"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_ab0e886db6e9fa91ff9fd853333fed05b_1ab0e886db6e9fa91ff9fd853333fed05b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: not equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: not equal Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.000000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>!=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>!=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>!=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>!=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/m4adEpqac1fmOwNn&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17 false
&quot;foo&quot; == &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__notequal.cpp -o operator__notequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6292" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6292" bodyend="6295"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_aacd442b66140c764c594ac8ad7dfd5b3_1aacd442b66140c764c594ac8ad7dfd5b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem><para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison</para></listitem><listitem><para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&lt;<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&lt;<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&lt;<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&lt;<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/JrAvlrYH03a2yfRX&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17.0000000000001 true
&quot;foo&quot; == &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__less.cpp -o operator__less </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6321" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6321" bodyend="6397"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a7999ee3a69a4979d92e98ab1e88c8759_1a7999ee3a69a4979d92e98ab1e88c8759" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const_reference lhs, const ScalarType rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem><para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison</para></listitem><listitem><para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&lt;<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&lt;<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&lt;<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&lt;<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/JrAvlrYH03a2yfRX&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17.0000000000001 true
&quot;foo&quot; == &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__less.cpp -o operator__less </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6405" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6405" bodyend="6408"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_abed3e9b4ab75f5bcbd3cd20f5af5cdab_1abed3e9b4ab75f5bcbd3cd20f5af5cdab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem><para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison</para></listitem><listitem><para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&lt;<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&lt;<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&lt;<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&lt;<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/JrAvlrYH03a2yfRX&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17.0000000000001 true
&quot;foo&quot; == &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__less.cpp -o operator__less </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6416" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6416" bodyend="6419"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a5c8bb5200f5eac10d31e26be46e5b1ac_1a5c8bb5200f5eac10d31e26be46e5b1ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than or equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&gt;<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&gt;<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&gt;<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&gt;<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/xJlXYtWnxO1NUh7x&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17.0000000000001 false
&quot;foo&quot; == &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__greater.cpp -o operator__greater </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6438" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6438" bodyend="6441"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a7e368211047f725f333696aefdf39ffd_1a7e368211047f725f333696aefdf39ffd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const_reference lhs, const ScalarType rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&gt;<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&gt;<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&gt;<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&gt;<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/xJlXYtWnxO1NUh7x&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17.0000000000001 false
&quot;foo&quot; == &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__greater.cpp -o operator__greater </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6449" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6449" bodyend="6452"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_ad73f88f70fe5acfa521750a8cd710026_1ad73f88f70fe5acfa521750a8cd710026" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&gt;<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&gt;<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&gt;<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&gt;<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/xJlXYtWnxO1NUh7x&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] == [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} == {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} false
17 == 17.0000000000001 false
&quot;foo&quot; == &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__greater.cpp -o operator__greater </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6460" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6460" bodyend="6463"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a87db51b6b936fb2ea293cdbc8702dcb8_1a87db51b6b936fb2ea293cdbc8702dcb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&lt;=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&lt;=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&lt;=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&lt;=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/m4lNMI48FqF96QWd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] &lt;= [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} &lt;= {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 &lt;= 17.0000000000001 true
&quot;foo&quot; &lt;= &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__lessequal.cpp -o operator__lessequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6482" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6482" bodyend="6485"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a412895af9a582869a4d369a64fb1b6d6_1a412895af9a582869a4d369a64fb1b6d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const_reference lhs, const ScalarType rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&lt;=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&lt;=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&lt;=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&lt;=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/m4lNMI48FqF96QWd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] &lt;= [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} &lt;= {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 &lt;= 17.0000000000001 true
&quot;foo&quot; &lt;= &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__lessequal.cpp -o operator__lessequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6493" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6493" bodyend="6496"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a124c319566198d9f092c5bebea46ce77_1a124c319566198d9f092c5bebea46ce77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&lt;=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&lt;=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&lt;=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&lt;=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/m4lNMI48FqF96QWd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] &lt;= [1,2,4] true
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} &lt;= {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 &lt;= 17.0000000000001 true
&quot;foo&quot; &lt;= &quot;bar&quot; false
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__lessequal.cpp -o operator__lessequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6504" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6504" bodyend="6507"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a74a943800c7f103d0990d7eef82c6453_1a74a943800c7f103d0990d7eef82c6453" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than or equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&gt;=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&gt;=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&gt;=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&gt;=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/92RTw1dWSVue58j6&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] &gt;= [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} &gt;= {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 &gt;= 17.0000000000001 false
&quot;foo&quot; &gt;= &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__greaterequal.cpp -o operator__greaterequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6526" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6526" bodyend="6529"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a68e3a92b3d9be1faa05c92d096299189_1a68e3a92b3d9be1faa05c92d096299189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const_reference lhs, const ScalarType rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&gt;=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&gt;=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&gt;=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&gt;=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/92RTw1dWSVue58j6&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] &gt;= [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} &gt;= {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 &gt;= 17.0000000000001 false
&quot;foo&quot; &gt;= &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__greaterequal.cpp -o operator__greaterequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6537" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6537" bodyend="6540"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a5ee0e3e8afc7cbd932d6ed66418fa80a_1a5ee0e3e8afc7cbd932d6ed66418fa80a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example demonstrates comparing several JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>several<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_1<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>array_2<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_1<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>object_2<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_1<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>number_2<sp/>=<sp/>17.0000000000001L;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>string_2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>values<sp/>and<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::boolalpha;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>array_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>array_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(array_1<sp/>&gt;=<sp/>array_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>object_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>object_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(object_1<sp/>&gt;=<sp/>object_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>number_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>number_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(number_1<sp/>&gt;=<sp/>number_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>string_1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string_2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(string_1<sp/>&gt;=<sp/>string_2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/92RTw1dWSVue58j6&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[1,2,3] &gt;= [1,2,4] false
{&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} &gt;= {&quot;A&quot;:&quot;a&quot;,&quot;B&quot;:&quot;b&quot;} true
17 &gt;= 17.0000000000001 false
&quot;foo&quot; &gt;= &quot;bar&quot; true
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator__greaterequal.cpp -o operator__greaterequal </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="6548" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="6548" bodyend="6551"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>serialization</header>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a5e34c5435e557d0bf666bd7311211405_1a5e34c5435e557d0bf666bd7311211405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const basic_json &amp;j)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>serialize to stream </para>        </briefdescription>
        <detaileddescription>
<para>Serialize the given JSON value <emphasis>j</emphasis> to the output stream <emphasis>o</emphasis>. The JSON value will be serialized using the <ref refid="classnlohmann_1_1basic__json_a67212c259e9c0e17d47f4c5167e71b9e_1a67212c259e9c0e17d47f4c5167e71b9e" kindref="member">dump</ref> member function. The indentation of the output can be controlled with the member variable <computeroutput>width</computeroutput> of the output stream <emphasis>o</emphasis>. For instance, using the manipulator <computeroutput>std::setw(4)</computeroutput> on <emphasis>o</emphasis> sets the indentation level to <computeroutput>4</computeroutput> and the serialization result is the same as calling <computeroutput>dump(4)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">o</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to serialize to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the stream <emphasis>o</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows the serialization with different parameters to <computeroutput>width</computeroutput> to adjust the indentation level. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>without<sp/>indentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>with<sp/>indentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_object<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>j_array<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/NOtGXsCLXYHRG6ML&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{&quot;one&quot;:1,&quot;two&quot;:2}

[1,2,4,8,16]

{
    &quot;one&quot;: 1,
    &quot;two&quot;: 2
}

[
  1,
  2,
  4,
  8,
  16
]

</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator_serialize.cpp -o operator_serialize </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7172" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7172" bodyend="7185"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a9e06deabe69262c3ffc5533d32856983_1a9e06deabe69262c3ffc5533d32856983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_DEPRECATED friend std::ostream &amp;</type>
        <definition>JSON_DEPRECATED friend std::ostream&amp; operator&gt;&gt;</definition>
        <argsstring>(const basic_json &amp;j, std::ostream &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>serialize to stream </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated and will be removed in a future version of the library. Please use std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const basic_json&amp;) instead; that is, replace calls like <computeroutput>j &gt;&gt; o;</computeroutput> with <computeroutput>o &lt;&lt; j;</computeroutput>. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7195" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7195" bodyend="7198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>deserialization</header>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_ab7285a92514fcdbe6de505ebaba92ea3_1ab7285a92514fcdbe6de505ebaba92ea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>JSON_DEPRECATED friend std::istream &amp;</type>
        <definition>JSON_DEPRECATED friend std::istream&amp; operator&lt;&lt;</definition>
        <argsstring>(basic_json &amp;j, std::istream &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated and will be removed in a future version of the library. Please use std::istream&amp; operator&gt;&gt;(std::istream&amp;, basic_json&amp;) instead; that is, replace calls like <computeroutput>j &lt;&lt; i;</computeroutput> with <computeroutput>i &gt;&gt; j;</computeroutput>. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7475" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7475" bodyend="7479"/>
      </memberdef>
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_aaf363408931d76472ded14017e59c9e8_1aaf363408931d76472ded14017e59c9e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;i, basic_json &amp;j)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes an input stream to a JSON value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">i</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream to read a serialized JSON value from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to write the deserialized input to</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.111</parametername>
</parameternamelist>
<parameterdescription>
<para>if input stream is in a bad state</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below shows how a JSON value is constructed by reading a serialization from a stream. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>stream<sp/>with<sp/>serialized<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;number&quot;:<sp/>23,</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;string&quot;:<sp/>&quot;Hello,<sp/>world!&quot;,</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;array&quot;:<sp/>[1,<sp/>2,<sp/>3,<sp/>4,<sp/>5],</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;boolean&quot;:<sp/>false,</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;null&quot;:<sp/>null</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>value<sp/>and<sp/>read<sp/>the<sp/>serialization<sp/>from<sp/>the<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>&lt;&lt;<sp/>ss;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/yAAGR07u3IQbIgUa&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
  &quot;array&quot;: [
    1,
    2,
    3,
    4,
    5
  ],
  &quot;boolean&quot;: false,
  &quot;null&quot;: null,
  &quot;number&quot;: 23,
  &quot;string&quot;: &quot;Hello, world!&quot;
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operator_deserialize.cpp -o operator_deserialize </verbatim></para></simplesect>
<simplesect kind="see"><para>parse(std::istream&amp;, const parser_callback_t) for a variant with a parser callback function to filter values while parsing</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7507" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7507" bodyend="7511"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse</definition>
        <argsstring>(T(&amp;array)[N], const parser_callback_t cb=nullptr)</argsstring>
        <name>parse</name>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>deserialize from an array </para>        </briefdescription>
        <detaileddescription>
<para>This function reads from an array of 1-byte values.</para><para><simplesect kind="pre"><para>Each element of the container has a size of 1 byte. Violating this precondition yields undefined behavior. <bold>This precondition is enforced with a static assertion.</bold></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>array to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the deserialization</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>if a parse error occurs; example: <computeroutput>&quot;&quot;unexpected end of input; expected string literal&quot;&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below demonstrates the <computeroutput>parse()</computeroutput> function reading from an array. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[]<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Image&quot;:<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>800,</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>600,</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Title&quot;:<sp/><sp/>&quot;View<sp/>from<sp/>15th<sp/>Floor&quot;,</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Thumbnail&quot;:<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Url&quot;:<sp/><sp/><sp/><sp/>&quot;http://www.example.com/image/481989943&quot;,</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>125,</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>100</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Animated&quot;<sp/>:<sp/>false,</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IDs&quot;:<sp/>[116,<sp/>943,<sp/>234,<sp/>38793]</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_complete<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(text);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_complete<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/CwZnqGqte14SYJ5s&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Thumbnail&quot;: {
            &quot;Height&quot;: 125,
            &quot;Url&quot;: &quot;http://www.example.com/image/481989943&quot;,
            &quot;Width&quot;: 100
        },
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}

</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/parse__array__parser_callback_t.cpp -o parse__array__parser_callback_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7243" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7243" bodyend="7248"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_1ab275a3e00a40189e96d244de6c8f311a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; CharT &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andstd::is_integral&lt; typename std::remove_pointer&lt; CharT &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref> &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andsizeof(typename std::remove_pointer&lt; CharT &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref>)==1, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse</definition>
        <argsstring>(const CharT s, const parser_callback_t cb=nullptr)</argsstring>
        <name>parse</name>
        <param>
          <type>const CharT</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>deserialize from string literal </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CharT</parametername>
</parameternamelist>
<parameterdescription>
<para>character/literal type with size of 1 byte </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string literal to read a serialized JSON value from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the deserialization</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored. </para></simplesect>
<simplesect kind="note"><para>String containers like <computeroutput>std::string</computeroutput> or <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> can be parsed with <ref refid="classnlohmann_1_1basic__json_a00795fca3388571ba4a56a1ea6e0466b_1a00795fca3388571ba4a56a1ea6e0466b" kindref="member">parse(const ContiguousContainer&amp;, const parser_callback_t)</ref></para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below demonstrates the <computeroutput>parse()</computeroutput> function with and without callback function. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Image&quot;:<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>800,</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>600,</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Title&quot;:<sp/><sp/>&quot;View<sp/>from<sp/>15th<sp/>Floor&quot;,</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Thumbnail&quot;:<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Url&quot;:<sp/><sp/><sp/><sp/>&quot;http://www.example.com/image/481989943&quot;,</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>125,</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>100</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Animated&quot;<sp/>:<sp/>false,</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IDs&quot;:<sp/>[116,<sp/>943,<sp/>234,<sp/>38793]</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_complete<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(text);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_complete<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>parser<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">json::parser_callback_t</ref><sp/>cb<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/><ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" kindref="member">json::parse_event_t</ref><sp/>event,<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>&amp;<sp/>parsed)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>object<sp/>elements<sp/>with<sp/>key<sp/>&quot;Thumbnail&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/><ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">json::parse_event_t::key</ref><sp/>and<sp/>parsed<sp/>==<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>(</highlight><highlight class="stringliteral">&quot;Thumbnail&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>(with<sp/>callback)<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_filtered<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(text,<sp/>cb);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_filtered<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/n888UNQlMFduURhE&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Thumbnail&quot;: {
            &quot;Height&quot;: 125,
            &quot;Url&quot;: &quot;http://www.example.com/image/481989943&quot;,
            &quot;Width&quot;: 100
        },
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}

{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/parse__string__parser_callback_t.cpp -o parse__string__parser_callback_t </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4cd30efe5c33a7cf73a0c6495bb16054_1a4cd30efe5c33a7cf73a0c6495bb16054" kindref="member">parse(std::istream&amp;, const parser_callback_t)</ref> for a version that reads from an input stream</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 (originally for <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7285" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7285" bodyend="7289"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a4cd30efe5c33a7cf73a0c6495bb16054_1a4cd30efe5c33a7cf73a0c6495bb16054" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse</definition>
        <argsstring>(std::istream &amp;i, const parser_callback_t cb=nullptr)</argsstring>
        <name>parse</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>deserialize from stream </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">i</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to read a serialized JSON value from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the deserialization</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.111</parametername>
</parameternamelist>
<parameterdescription>
<para>if input stream is in a bad state</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below demonstrates the <computeroutput>parse()</computeroutput> function with and without callback function. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Image&quot;:<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>800,</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>600,</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Title&quot;:<sp/><sp/>&quot;View<sp/>from<sp/>15th<sp/>Floor&quot;,</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Thumbnail&quot;:<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Url&quot;:<sp/><sp/><sp/><sp/>&quot;http://www.example.com/image/481989943&quot;,</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>125,</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>100</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Animated&quot;<sp/>:<sp/>false,</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IDs&quot;:<sp/>[116,<sp/>943,<sp/>234,<sp/>38793]</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>a<sp/>stream<sp/>with<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_complete<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(ss);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_complete<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>parser<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">json::parser_callback_t</ref><sp/>cb<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/><ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" kindref="member">json::parse_event_t</ref><sp/>event,<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>&amp;<sp/>parsed)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>object<sp/>elements<sp/>with<sp/>key<sp/>&quot;Thumbnail&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/><ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">json::parse_event_t::key</ref><sp/>and<sp/>parsed<sp/>==<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>(</highlight><highlight class="stringliteral">&quot;Thumbnail&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>a<sp/>stream<sp/>with<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.clear();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>(with<sp/>callback)<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_filtered<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(ss,<sp/>cb);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_filtered<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ir2u6Qbw18O89IWk&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Thumbnail&quot;: {
            &quot;Height&quot;: 125,
            &quot;Url&quot;: &quot;http://www.example.com/image/481989943&quot;,
            &quot;Width&quot;: 100
        },
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}

{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/parse__istream__parser_callback_t.cpp -o parse__istream__parser_callback_t </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_1ab275a3e00a40189e96d244de6c8f311a" kindref="member">parse(const CharT, const parser_callback_t)</ref> for a version that reads from a string</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7320" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7320" bodyend="7324"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a3bd712a1351ba28e5440fac2359da1cb_1a3bd712a1351ba28e5440fac2359da1cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse</definition>
        <argsstring>(std::istream &amp;&amp;i, const parser_callback_t cb=nullptr)</argsstring>
        <name>parse</name>
        <param>
          <type>std::istream &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>deserialize from stream </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">i</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to read a serialized JSON value from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the deserialization</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.111</parametername>
</parameternamelist>
<parameterdescription>
<para>if input stream is in a bad state</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below demonstrates the <computeroutput>parse()</computeroutput> function with and without callback function. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Image&quot;:<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>800,</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>600,</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Title&quot;:<sp/><sp/>&quot;View<sp/>from<sp/>15th<sp/>Floor&quot;,</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Thumbnail&quot;:<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Url&quot;:<sp/><sp/><sp/><sp/>&quot;http://www.example.com/image/481989943&quot;,</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Height&quot;:<sp/>125,</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Width&quot;:<sp/><sp/>100</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Animated&quot;<sp/>:<sp/>false,</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;IDs&quot;:<sp/>[116,<sp/>943,<sp/>234,<sp/>38793]</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>a<sp/>stream<sp/>with<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_complete<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(ss);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_complete<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>parser<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">json::parser_callback_t</ref><sp/>cb<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,<sp/><ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" kindref="member">json::parse_event_t</ref><sp/>event,<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>&amp;<sp/>parsed)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>object<sp/>elements<sp/>with<sp/>key<sp/>&quot;Thumbnail&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event<sp/>==<sp/><ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">json::parse_event_t::key</ref><sp/>and<sp/>parsed<sp/>==<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref>(</highlight><highlight class="stringliteral">&quot;Thumbnail&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>a<sp/>stream<sp/>with<sp/>JSON<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.clear();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>(with<sp/>callback)<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_filtered<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(ss,<sp/>cb);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_filtered<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ir2u6Qbw18O89IWk&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Thumbnail&quot;: {
            &quot;Height&quot;: 125,
            &quot;Url&quot;: &quot;http://www.example.com/image/481989943&quot;,
            &quot;Width&quot;: 100
        },
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}

{
    &quot;Image&quot;: {
        &quot;Animated&quot;: false,
        &quot;Height&quot;: 600,
        &quot;IDs&quot;: [
            116,
            943,
            234,
            38793
        ],
        &quot;Title&quot;: &quot;View from 15th Floor&quot;,
        &quot;Width&quot;: 800
    }
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/parse__istream__parser_callback_t.cpp -o parse__istream__parser_callback_t </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_1ab275a3e00a40189e96d244de6c8f311a" kindref="member">parse(const CharT, const parser_callback_t)</ref> for a version that reads from a string</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7329" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7329" bodyend="7333"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a360d37260add46be89881db2366fe343_1a360d37260add46be89881db2366fe343" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; IteratorType &gt;::iterator_category &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse</definition>
        <argsstring>(IteratorType first, IteratorType last, const parser_callback_t cb=nullptr)</argsstring>
        <name>parse</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>deserialize from an iterator range with contiguous storage </para>        </briefdescription>
        <detaileddescription>
<para>This function reads from an iterator range of a container with contiguous storage of 1-byte values. Compatible container types include <computeroutput>std::vector</computeroutput>, <computeroutput>std::string</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::valarray</computeroutput>, and <computeroutput>std::initializer_list</computeroutput>. Furthermore, C-style arrays can be used with <computeroutput>std::begin()</computeroutput>/<computeroutput>std::end()</computeroutput>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</para><para><simplesect kind="pre"><para>The iterator range is contiguous. Violating this precondition yields undefined behavior. <bold>This precondition is enforced with an assertion.</bold> </para></simplesect>
<simplesect kind="pre"><para>Each element in the range has a size of 1 byte. Violating this precondition yields undefined behavior. <bold>This precondition is enforced with a static assertion.</bold></para></simplesect>
<simplesect kind="warning"><para>There is no way to enforce all preconditions at compile-time. If the function is called with noncompliant iterators and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IteratorType</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator of container with contiguous storage </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range to parse (included) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range to parse (excluded) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the deserialization</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below demonstrates the <computeroutput>parse()</computeroutput> function reading from an iterator range. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>JSON<sp/>text<sp/>given<sp/>as<sp/>std::vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>text<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_complete<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(text.begin(),<sp/>text.end());</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_complete<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/ojh4Eeol4G9RgeRV&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[
    1,
    2,
    3
]

</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/parse__iteratortype__parser_callback_t.cpp -o parse__iteratortype__parser_callback_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7384" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7384" bodyend="7408"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a00795fca3388571ba4a56a1ea6e0466b_1a00795fca3388571ba4a56a1ea6e0466b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ContiguousContainer</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; not std::is_pointer&lt; ContiguousContainer &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref> andstd::is_base_of&lt; std::random_access_iterator_tag, typename std::iterator_traits&lt; decltype(std::begin(std::declval&lt; ContiguousContainer const  &gt;()))&gt;::iterator_category &gt;::<ref refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" kindref="member">value</ref>, int &gt;::<ref refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" kindref="member">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parse</definition>
        <argsstring>(const ContiguousContainer &amp;c, const parser_callback_t cb=nullptr)</argsstring>
        <name>parse</name>
        <param>
          <type>const ContiguousContainer &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>deserialize from a container with contiguous storage </para>        </briefdescription>
        <detaileddescription>
<para>This function reads from a container with contiguous storage of 1-byte values. Compatible container types include <computeroutput>std::vector</computeroutput>, <computeroutput>std::string</computeroutput>, <computeroutput>std::array</computeroutput>, and <computeroutput>std::initializer_list</computeroutput>. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage.</para><para><simplesect kind="pre"><para>The container storage is contiguous. Violating this precondition yields undefined behavior. <bold>This precondition is enforced with an assertion.</bold> </para></simplesect>
<simplesect kind="pre"><para>Each element of the container has a size of 1 byte. Violating this precondition yields undefined behavior. <bold>This precondition is enforced with a static assertion.</bold></para></simplesect>
<simplesect kind="warning"><para>There is no way to enforce all preconditions at compile-time. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ContiguousContainer</parametername>
</parameternamelist>
<parameterdescription>
<para>container type with contiguous storage </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para>container to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>result of the deserialization</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> has a super-linear complexity.</para></simplesect>
<simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example below demonstrates the <computeroutput>parse()</computeroutput> function reading from a contiguous container. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>JSON<sp/>text<sp/>given<sp/>as<sp/>std::vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>text<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>and<sp/>serialize<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_complete<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">json::parse</ref>(text);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_complete<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/F8VaVFyys87qQRt5&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[
    1,
    2,
    3
]

</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/parse__contiguouscontainer__parser_callback_t.cpp -o parse__contiguouscontainer__parser_callback_t </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7460" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7460" bodyend="7465"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>binary serialization/deserialization support</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt;uint8_t&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the MessagePack serialization format. MessagePack is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</para><para>The library uses the following mapping from JSON values types to MessagePack types according to the MessagePack specification:</para><para><table rows="30" cols="4"><row>
<entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>value/range </para></entry><entry thead="yes"><para>MessagePack type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>nil </para></entry><entry thead="no"><para>0xc0 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>true </para></entry><entry thead="no"><para>0xc3 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>0xc2 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-9223372036854775808..-2147483649 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para>0xd3 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-2147483648..-32769 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para>0xd2 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32768..-129 </para></entry><entry thead="no"><para>int16 </para></entry><entry thead="no"><para> 0xd1 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-128..-33 </para></entry><entry thead="no"><para>int8 </para></entry><entry thead="no"><para>0xd0 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32..-1 </para></entry><entry thead="no"><para>negative fixint </para></entry><entry thead="no"><para>0xe0..0xff </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0..127 </para></entry><entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>0x00..0x7f </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>128..255 </para></entry><entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para> 0xcc </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>0xcd </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>0xce </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>0xcf </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0..127 </para></entry><entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>0x00..0x7f </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>128..255 </para></entry><entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para> 0xcc </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>0xcd </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>0xce </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>0xcf </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>float 64 </para></entry><entry thead="no"><para>0xcb </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 0..31 </para></entry><entry thead="no"><para>fixstr </para></entry><entry thead="no"><para>0xa0..0xbf </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 32..255 </para></entry><entry thead="no"><para>str 8 </para></entry><entry thead="no"><para>0xd9 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 256..65535 </para></entry><entry thead="no"><para>str 16 </para></entry><entry thead="no"><para>0xda </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>str 32 </para></entry><entry thead="no"><para>0xdb </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..15 </para></entry><entry thead="no"><para>fixarray </para></entry><entry thead="no"><para>0x90..0x9f </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 16..65535 </para></entry><entry thead="no"><para>array 16 </para></entry><entry thead="no"><para>0xdc </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>array 32 </para></entry><entry thead="no"><para>0xdd </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..15 </para></entry><entry thead="no"><para>fix map </para></entry><entry thead="no"><para>0x80..0x8f </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 16..65535 </para></entry><entry thead="no"><para>map 16 </para></entry><entry thead="no"><para>0xde </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>map 32 </para></entry><entry thead="no"><para>0xdf </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any JSON value type can be converted to a MessagePack value.</para></simplesect>
<simplesect kind="note"><para>The following values can <bold>not</bold> be converted to a MessagePack value:<itemizedlist>
<listitem><para>strings with more than 4294967295 bytes</para></listitem><listitem><para>arrays with more than 4294967295 elements</para></listitem><listitem><para>objects with more than 4294967295 elements</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>The following MessagePack types are not used in the conversion:<itemizedlist>
<listitem><para>bin 8 - bin 32 (0xc4..0xc6)</para></listitem><listitem><para>ext 8 - ext 32 (0xc7..0xc9)</para></listitem><listitem><para>float 32 (0xca)</para></listitem><listitem><para>fixext 1 - fixext 16 (0xd4..0xd8)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>Any MessagePack output created <ref refid="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" kindref="member">to_msgpack</ref> can be successfully parsed by <ref refid="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" kindref="member">from_msgpack</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MessagePack serialization as byte vector</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the JSON value <emphasis>j</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the serialization of a JSON value to a byte vector in MessagePack format. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({&quot;compact&quot;:<sp/>true,<sp/>&quot;schema&quot;:<sp/>0})&quot;_json;</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>it<sp/>to<sp/>MessagePack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>v<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" kindref="member">json::to_msgpack</ref>(j);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>vector<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>byte<sp/>:<sp/>v)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(int)byte<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/jvaU8GEfAusb5dKf&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>0x82 0xa7 0x63 0x6f 0x6d 0x70 0x61 0x63 0x74 0xc3 0xa6 0x73 0x63 0x68 0x65 0x6d 0x61 0x00 
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/to_msgpack.cpp -o to_msgpack </verbatim></para></simplesect>
<simplesect kind="see"><para><ulink url="http://msgpack.org">http://msgpack.org</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" kindref="member">from_msgpack(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</ref> for the analogous deserialization </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2566783e190dec524bf3445b322873b8_1a2566783e190dec524bf3445b322873b8" kindref="member">to_cbor</ref>(const basic_json&amp; for the related CBOR format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9058" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9058" bodyend="9063"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::from_msgpack</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v, const size_t start_index=0)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>start_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>create a JSON value from a byte vector in MessagePack format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given byte vector <emphasis>v</emphasis> to a JSON value using the MessagePack serialization format.</para><para>The library maps MessagePack types to JSON value types as follows:</para><para><table rows="26" cols="3"><row>
<entry thead="yes"><para>MessagePack type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x00..0x7f </para></entry></row>
<row>
<entry thead="no"><para>fixmap </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0x80..0x8f </para></entry></row>
<row>
<entry thead="no"><para>fixarray </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x90..0x9f </para></entry></row>
<row>
<entry thead="no"><para>fixstr </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xa0..0xbf </para></entry></row>
<row>
<entry thead="no"><para>nil </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>0xc0 </para></entry></row>
<row>
<entry thead="no"><para>false </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>0xc2 </para></entry></row>
<row>
<entry thead="no"><para>true </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>0xc3 </para></entry></row>
<row>
<entry thead="no"><para>float 32 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xca </para></entry></row>
<row>
<entry thead="no"><para>float 64 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xcb </para></entry></row>
<row>
<entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xcc </para></entry></row>
<row>
<entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xcd </para></entry></row>
<row>
<entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xce </para></entry></row>
<row>
<entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xcf </para></entry></row>
<row>
<entry thead="no"><para>int 8 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xd0 </para></entry></row>
<row>
<entry thead="no"><para>int 16 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xd1 </para></entry></row>
<row>
<entry thead="no"><para>int 32 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xd2 </para></entry></row>
<row>
<entry thead="no"><para>int 64 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xd3 </para></entry></row>
<row>
<entry thead="no"><para>str 8 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xd9 </para></entry></row>
<row>
<entry thead="no"><para>str 16 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xda </para></entry></row>
<row>
<entry thead="no"><para>str 32 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xdb </para></entry></row>
<row>
<entry thead="no"><para>array 16 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0xdc </para></entry></row>
<row>
<entry thead="no"><para>array 32 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0xdd </para></entry></row>
<row>
<entry thead="no"><para>map 16 </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xde </para></entry></row>
<row>
<entry thead="no"><para>map 32 </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xdf </para></entry></row>
<row>
<entry thead="no"><para>negative fixint </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xe0-0xff </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold> in the sense that not all MessagePack types can be converted to a JSON value. The following MessagePack types are not supported and will yield parse errors:<itemizedlist>
<listitem><para>bin 8 - bin 32 (0xc4..0xc6)</para></listitem><listitem><para>ext 8 - ext 32 (0xc7..0xc9)</para></listitem><listitem><para>fixext 1 - fixext 16 (0xd4..0xd8)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>Any MessagePack output created <ref refid="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" kindref="member">to_msgpack</ref> can be successfully parsed by <ref refid="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" kindref="member">from_msgpack</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte vector in MessagePack format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to start reading from <emphasis>v</emphasis> (0 by default) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given vector ends prematurely </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from MessagePack were used in the given vector <emphasis>v</emphasis> or if the input is not valid MessagePack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the byte vector <emphasis>v</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the deserialization of a byte vector in MessagePack format to a JSON value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>byte<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>v<sp/>=<sp/>{0x82,<sp/>0xa7,<sp/>0x63,<sp/>0x6f,<sp/>0x6d,<sp/>0x70,<sp/>0x61,<sp/>0x63,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x74,<sp/>0xc3,<sp/>0xa6,<sp/>0x73,<sp/>0x63,<sp/>0x68,<sp/>0x65,<sp/>0x6d,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x61,<sp/>0x00</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deserialize<sp/>it<sp/>with<sp/>MessagePack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" kindref="member">json::from_msgpack</ref>(v);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>deserialized<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/7vRGmLdVcYM7POhE&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
  &quot;compact&quot;: true,
  &quot;schema&quot;: 0
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/from_msgpack.cpp -o from_msgpack </verbatim></para></simplesect>
<simplesect kind="see"><para><ulink url="http://msgpack.org">http://msgpack.org</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" kindref="member">to_msgpack(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ab5e3e1758c1a52ffe89b1d379ef7fbe1_1ab5e3e1758c1a52ffe89b1d379ef7fbe1" kindref="member">from_cbor(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</ref> for the related CBOR format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9, parameter <emphasis>start_index</emphasis> since 2.1.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9132" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9132" bodyend="9137"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a2566783e190dec524bf3445b322873b8_1a2566783e190dec524bf3445b322873b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt;uint8_t&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the CBOR (Concise Binary Object Representation) serialization format. CBOR is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</para><para>The library uses the following mapping from JSON values types to CBOR types according to the CBOR specification (RFC 7049):</para><para><table rows="35" cols="4"><row>
<entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>value/range </para></entry><entry thead="yes"><para>CBOR type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>Null </para></entry><entry thead="no"><para>0xf6 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>0xf5 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>0xf4 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-9223372036854775808..-2147483649 </para></entry><entry thead="no"><para>Negative integer (8 bytes follow) </para></entry><entry thead="no"><para>0x3b </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-2147483648..-32769 </para></entry><entry thead="no"><para>Negative integer (4 bytes follow) </para></entry><entry thead="no"><para>0x3a </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32768..-129 </para></entry><entry thead="no"><para>Negative integer (2 bytes follow) </para></entry><entry thead="no"><para>0x39 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-128..-25 </para></entry><entry thead="no"><para>Negative integer (1 byte follow) </para></entry><entry thead="no"><para>0x38 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-24..-1 </para></entry><entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>0x20..0x37 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0..23 </para></entry><entry thead="no"><para>Integer </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>24..255 </para></entry><entry thead="no"><para>Unsigned integer (1 byte follow) </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>Unsigned integer (2 bytes follow) </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>Unsigned integer (4 bytes follow) </para></entry><entry thead="no"><para>0x1a </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>Unsigned integer (8 bytes follow) </para></entry><entry thead="no"><para>0x1b </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0..23 </para></entry><entry thead="no"><para>Integer </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>24..255 </para></entry><entry thead="no"><para>Unsigned integer (1 byte follow) </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>Unsigned integer (2 bytes follow) </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>Unsigned integer (4 bytes follow) </para></entry><entry thead="no"><para>0x1a </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>Unsigned integer (8 bytes follow) </para></entry><entry thead="no"><para>0x1b </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>Double-Precision Float </para></entry><entry thead="no"><para>0xfb </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 0..23 </para></entry><entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>0x60..0x77 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 23..255 </para></entry><entry thead="no"><para>UTF-8 string (1 byte follow) </para></entry><entry thead="no"><para>0x78 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 256..65535 </para></entry><entry thead="no"><para>UTF-8 string (2 bytes follow) </para></entry><entry thead="no"><para>0x79 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>UTF-8 string (4 bytes follow) </para></entry><entry thead="no"><para>0x7a </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>UTF-8 string (8 bytes follow) </para></entry><entry thead="no"><para>0x7b </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..23 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x80..0x97 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 23..255 </para></entry><entry thead="no"><para>array (1 byte follow) </para></entry><entry thead="no"><para>0x98 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 256..65535 </para></entry><entry thead="no"><para>array (2 bytes follow) </para></entry><entry thead="no"><para>0x99 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>array (4 bytes follow) </para></entry><entry thead="no"><para>0x9a </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>array (8 bytes follow) </para></entry><entry thead="no"><para>0x9b </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..23 </para></entry><entry thead="no"><para>map </para></entry><entry thead="no"><para>0xa0..0xb7 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 23..255 </para></entry><entry thead="no"><para>map (1 byte follow) </para></entry><entry thead="no"><para>0xb8 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 256..65535 </para></entry><entry thead="no"><para>map (2 bytes follow) </para></entry><entry thead="no"><para>0xb9 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>map (4 bytes follow) </para></entry><entry thead="no"><para>0xba </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>map (8 bytes follow) </para></entry><entry thead="no"><para>0xbb </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any JSON value type can be converted to a CBOR value.</para></simplesect>
<simplesect kind="note"><para>The following CBOR types are not used in the conversion:<itemizedlist>
<listitem><para>byte strings (0x40..0x5f)</para></listitem><listitem><para>UTF-8 strings terminated by &quot;break&quot; (0x7f)</para></listitem><listitem><para>arrays terminated by &quot;break&quot; (0x9f)</para></listitem><listitem><para>maps terminated by &quot;break&quot; (0xbf)</para></listitem><listitem><para>date/time (0xc0..0xc1)</para></listitem><listitem><para>bignum (0xc2..0xc3)</para></listitem><listitem><para>decimal fraction (0xc4)</para></listitem><listitem><para>bigfloat (0xc5)</para></listitem><listitem><para>tagged items (0xc6..0xd4, 0xd8..0xdb)</para></listitem><listitem><para>expected conversions (0xd5..0xd7)</para></listitem><listitem><para>simple values (0xe0..0xf3, 0xf8)</para></listitem><listitem><para>undefined (0xf7)</para></listitem><listitem><para>half and single-precision floats (0xf9-0xfa)</para></listitem><listitem><para>break (0xff)</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MessagePack serialization as byte vector</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the JSON value <emphasis>j</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the serialization of a JSON value to a byte vector in CBOR format. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({&quot;compact&quot;:<sp/>true,<sp/>&quot;schema&quot;:<sp/>0})&quot;_json;</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>it<sp/>to<sp/>CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>v<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a2566783e190dec524bf3445b322873b8_1a2566783e190dec524bf3445b322873b8" kindref="member">json::to_cbor</ref>(j);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>vector<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>byte<sp/>:<sp/>v)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>(int)byte<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/UaDbrgZ8OPWaShY8&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>0xa2 0x67 0x63 0x6f 0x6d 0x70 0x61 0x63 0x74 0xf5 0x66 0x73 0x63 0x68 0x65 0x6d 0x61 0x00 
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/to_cbor.cpp -o to_cbor </verbatim></para></simplesect>
<simplesect kind="see"><para><ulink url="http://cbor.io">http://cbor.io</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ab5e3e1758c1a52ffe89b1d379ef7fbe1_1ab5e3e1758c1a52ffe89b1d379ef7fbe1" kindref="member">from_cbor(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</ref> for the analogous deserialization </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" kindref="member">to_msgpack</ref>(const basic_json&amp; for the related MessagePack format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9221" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9221" bodyend="9226"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ab5e3e1758c1a52ffe89b1d379ef7fbe1_1ab5e3e1758c1a52ffe89b1d379ef7fbe1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::from_cbor</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v, const size_t start_index=0)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>start_index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>create a JSON value from a byte vector in CBOR format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given byte vector <emphasis>v</emphasis> to a JSON value using the CBOR (Concise Binary Object Representation) serialization format.</para><para>The library maps CBOR types to JSON value types as follows:</para><para><table rows="36" cols="3"><row>
<entry thead="yes"><para>CBOR type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>Integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x1a </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x1b </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x20..0x37 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x38 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x39 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x3a </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x3b </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x40..0x57 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x60..0x77 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x78 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x79 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7a </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7b </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7f </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x80..0x97 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x98 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x99 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9a </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9b </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9f </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xa0..0xb7 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xb8 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xb9 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xba </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xbb </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xbf </para></entry></row>
<row>
<entry thead="no"><para>False </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>0xf4 </para></entry></row>
<row>
<entry thead="no"><para>True </para></entry><entry thead="no"><para> <computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>0xf5 </para></entry></row>
<row>
<entry thead="no"><para>Nill </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>0xf6 </para></entry></row>
<row>
<entry thead="no"><para>Half-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xf9 </para></entry></row>
<row>
<entry thead="no"><para>Single-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xfa </para></entry></row>
<row>
<entry thead="no"><para>Double-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xfb </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold> in the sense that not all CBOR types can be converted to a JSON value. The following CBOR types are not supported and will yield parse errors (parse_error.112):<itemizedlist>
<listitem><para>byte strings (0x40..0x5f)</para></listitem><listitem><para>date/time (0xc0..0xc1)</para></listitem><listitem><para>bignum (0xc2..0xc3)</para></listitem><listitem><para>decimal fraction (0xc4)</para></listitem><listitem><para>bigfloat (0xc5)</para></listitem><listitem><para>tagged items (0xc6..0xd4, 0xd8..0xdb)</para></listitem><listitem><para>expected conversions (0xd5..0xd7)</para></listitem><listitem><para>simple values (0xe0..0xf3, 0xf8)</para></listitem><listitem><para>undefined (0xf7)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="warning"><para>CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error.113).</para></simplesect>
<simplesect kind="note"><para>Any CBOR output created <ref refid="classnlohmann_1_1basic__json_a2566783e190dec524bf3445b322873b8_1a2566783e190dec524bf3445b322873b8" kindref="member">to_cbor</ref> can be successfully parsed by <ref refid="classnlohmann_1_1basic__json_ab5e3e1758c1a52ffe89b1d379ef7fbe1_1ab5e3e1758c1a52ffe89b1d379ef7fbe1" kindref="member">from_cbor</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>a byte vector in CBOR format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index to start reading from <emphasis>v</emphasis> (0 by default) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given vector ends prematurely </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from CBOR were used in the given vector <emphasis>v</emphasis> or if the input is not valid CBOR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the byte vector <emphasis>v</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The example shows the deserialization of a byte vector in CBOR format to a JSON value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>byte<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>v<sp/>=<sp/>{0xa2,<sp/>0x67,<sp/>0x63,<sp/>0x6f,<sp/>0x6d,<sp/>0x70,<sp/>0x61,<sp/>0x63,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x74,<sp/>0xf5,<sp/>0x66,<sp/>0x73,<sp/>0x63,<sp/>0x68,<sp/>0x65,<sp/>0x6d,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x61,<sp/>0x00</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deserialize<sp/>it<sp/>with<sp/>CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_ab5e3e1758c1a52ffe89b1d379ef7fbe1_1ab5e3e1758c1a52ffe89b1d379ef7fbe1" kindref="member">json::from_cbor</ref>(v);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>deserialized<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/TDPaxmQ7PsvfWxrs&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
  &quot;compact&quot;: true,
  &quot;schema&quot;: 0
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/from_cbor.cpp -o from_cbor </verbatim></para></simplesect>
<simplesect kind="see"><para><ulink url="http://cbor.io">http://cbor.io</ulink> </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a2566783e190dec524bf3445b322873b8_1a2566783e190dec524bf3445b322873b8" kindref="member">to_cbor(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" kindref="member">from_msgpack(const std::vector&lt;uint8_t&gt;&amp;, const size_t)</ref> for the related MessagePack format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9, parameter <emphasis>start_index</emphasis> since 2.1.1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9315" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9315" bodyend="9320"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a3fba1efdaca78397efe8ee9e9816b93d" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::add_to_vector</definition>
        <argsstring>(std::vector&lt; uint8_t &gt; &amp;vec, size_t bytes, const T number)</argsstring>
        <name>add_to_vector</name>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Some code in the switch cases has been copied, because otherwise copilers would complain about implicit fallthrough and there is no portable attribute to mute such warnings. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7529" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7529" bodyend="7570"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a12ecf6c70e147e27ccb24746a50dba57" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>static T nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_from_vector</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;vec, const size_t current_index)</argsstring>
        <name>get_from_vector</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>current_index</declname>
        </param>
        <briefdescription>
<para>take sufficient bytes from a vector to fill an integer variable </para>        </briefdescription>
        <detaileddescription>
<para>In the context of binary serialization formats, we need to read several bytes from a byte vector and combine them to multi-byte integral data types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vec</parametername>
</parameternamelist>
<parameterdescription>
<para>byte vector to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">current_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the vector after which to read</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next sizeof(T) bytes from <emphasis>vec</emphasis>, in reverse order as T</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the integral return type</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if there are less than sizeof(T)+1 bytes in the vector <emphasis>vec</emphasis> to read</para></parameterdescription>
</parameteritem>
</parameterlist>
In the for loop, the bytes from the vector are copied in reverse order into the return value. In the figures below, let sizeof(T)=4 and <computeroutput>i</computeroutput> be the loop variable.</para><para>Precondition:</para><para>vec: | | | a | b | c | d | T: | | | | | ^ ^ ^ ^ current_index i ptr sizeof(T)</para><para>Postcondition:</para><para>vec: | | | a | b | c | d | T: | d | c | b | a | ^ ^ ^ | i ptr current_index</para><para><simplesect kind="see"><para>Code adapted from <ulink url="http://stackoverflow.com/a/41031865/266378">http://stackoverflow.com/a/41031865/266378</ulink>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7609" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7609" bodyend="7621"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1af7b03056b7891c59fee1811756b1a856" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::to_msgpack_internal</definition>
        <argsstring>(const basic_json &amp;j, std::vector&lt; uint8_t &gt; &amp;v)</argsstring>
        <name>to_msgpack_internal</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>This is a straightforward implementation of the MessagePack specification.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v</parametername>
</parameternamelist>
<parameterdescription>
<para>byte vector to write the serialization to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7633" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7633" bodyend="7867"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a2f208f86f3fafaa8e9bc9374963485e4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::to_cbor_internal</definition>
        <argsstring>(const basic_json &amp;j, std::vector&lt; uint8_t &gt; &amp;v)</argsstring>
        <name>to_cbor_internal</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>This is a straightforward implementation of the CBOR specification.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">v</parametername>
</parameternamelist>
<parameterdescription>
<para>byte vector to write the serialization to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc7049">https://tools.ietf.org/html/rfc7049</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="7879" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="7879" bodyend="8131"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a45e66a3b5e0696e5a984bd4c5a8df7a7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::check_length</definition>
        <argsstring>(const size_t size, const size_t len, const size_t offset)</argsstring>
        <name>check_length</name>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="8156" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="8156" bodyend="8175"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1adb2f8dec070d2fa7964c272719ba51e8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::msgpack_expect_string</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v, size_t idx)</argsstring>
        <name>msgpack_expect_string</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>check if the next byte belongs to a string </para>        </briefdescription>
        <detaileddescription>
<para>While parsing a map, the keys must be strings. This function checks if the current byte is one of the start bytes for a string in MessagePack:</para><para><itemizedlist>
<listitem><para>0xa0 - 0xbf: fixstr</para></listitem><listitem><para>0xd9: str 8</para></listitem><listitem><para>0xda: str 16</para></listitem><listitem><para>0xdb: str 32</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>MessagePack serialization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index in <emphasis>v</emphasis> to check for a string</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>v[idx]</computeroutput> does not belong to a string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="8193" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="8193" bodyend="8206"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1acdbbbc4c78c2575daf5420e62ca9db33" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::cbor_expect_string</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v, size_t idx)</argsstring>
        <name>cbor_expect_string</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>check if the next byte belongs to a string </para>        </briefdescription>
        <detaileddescription>
<para>While parsing a map, the keys must be strings. This function checks if the current byte is one of the start bytes for a string in CBOR:</para><para><itemizedlist>
<listitem><para>0x60 - 0x77: fixed length</para></listitem><listitem><para>0x78 - 0x7b: variable length</para></listitem><listitem><para>0x7f: indefinity length</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>CBOR serialization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index in <emphasis>v</emphasis> to check for a string</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>v[idx]</computeroutput> does not belong to a string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="8223" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="8223" bodyend="8236"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a2c758bc0a9b61177e4ec0d0c216bfe2b" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::from_msgpack_internal</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v, size_t &amp;idx)</argsstring>
        <name>from_msgpack_internal</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>create a JSON value from a given MessagePack vector </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>MessagePack serialization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index to start reading from <emphasis>v</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given vector ends prematurely </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from MessagePack were used in the given vector <emphasis>v</emphasis> or if the input is not valid MessagePack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://github.com/msgpack/msgpack/blob/master/spec.md">https://github.com/msgpack/msgpack/blob/master/spec.md</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="8253" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="8253" bodyend="8482"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a782368d422aa7bb3dca75361665bfcff" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::from_cbor_internal</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;v, size_t &amp;idx)</argsstring>
        <name>from_cbor_internal</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>create a JSON value from a given CBOR vector </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>CBOR serialization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>byte index to start reading from <emphasis>v</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given vector ends prematurely </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from CBOR were used in the given vector <emphasis>v</emphasis> or if the input is not valid CBOR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc7049">https://tools.ietf.org/html/rfc7049</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="8499" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="8499" bodyend="8981"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Pointer functions</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ac6946dffeb3be5aa173645f0467a44b3_1ac6946dffeb3be5aa173645f0467a44b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. Similar to <ref refid="classnlohmann_1_1basic__json_ac871e3b03fb2eeca9a8de4db2bea760f_1ac871e3b03fb2eeca9a8de4db2bea760f" kindref="member">operator[]</ref>(const typename object_t::key_type&amp;), <computeroutput>null</computeroutput> values are created in arrays and objects if necessary.</para><para>In particular:<itemizedlist>
<listitem><para>If the JSON pointer points to an object key that does not exist, it is created an filled with a <computeroutput>null</computeroutput> value before a reference to it is returned.</para></listitem><listitem><para>If the JSON pointer points to an array index that does not exist, it is created an filled with a <computeroutput>null</computeroutput> value before a reference to it is returned. All indices between the current maximum and the given index are also filled with <computeroutput>null</computeroutput>.</para></listitem><listitem><para>The special value <computeroutput>-</computeroutput> is treated as a synonym for the index past the end.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The behavior is shown in the example. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2}}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read-only<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/number&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/number&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/string&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/string&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/array&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array/1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/array/1&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writing<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;/string&quot;</highlight><highlight class="normal">_json_pointer]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>changed<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;change&quot;<sp/>a<sp/>nonexisting<sp/>object<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;/boolean&quot;</highlight><highlight class="normal">_json_pointer]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>changed<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>an<sp/>array<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;/array/1&quot;</highlight><highlight class="normal">_json_pointer]<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;change&quot;<sp/>an<sp/>array<sp/>element<sp/>with<sp/>nonexisting<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;/array/4&quot;</highlight><highlight class="normal">_json_pointer]<sp/>=<sp/>44;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;change&quot;<sp/>the<sp/>array<sp/>element<sp/>past<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>j[</highlight><highlight class="stringliteral">&quot;/array/-&quot;</highlight><highlight class="normal">_json_pointer]<sp/>=<sp/>55;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/AYgVTzCodPApT4hT&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
&quot;foo&quot;
[1,2]
2
&quot;bar&quot;
{&quot;array&quot;:[1,2],&quot;boolean&quot;:true,&quot;number&quot;:1,&quot;string&quot;:&quot;bar&quot;}
[1,21,null,null,44]
[1,21,null,null,44,55]
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorjson_pointer.cpp -o operatorjson_pointer </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13215" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13215" bodyend="13218"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_adfb5fc9a586cfafd52c91416c1bb5f7a_1adfb5fc9a586cfafd52c91416c1bb5f7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. The function does not change the JSON value; no <computeroutput>null</computeroutput> values are created. In particular, the the special value <computeroutput>-</computeroutput> yields an exception.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to the desired element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The behavior is shown in the example. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2}}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read-only<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/number&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/number&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/string&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/string&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/array&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array/1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;/array/1&quot;</highlight><highlight class="normal">_json_pointer]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/IKpbJkMdcocVdlRd&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
&quot;foo&quot;
[1,2]
2
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/operatorjson_pointer_const.cpp -o operatorjson_pointer_const </verbatim></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13243" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13243" bodyend="13246"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a8ab61397c10f18b305520da7073b2b45_1a8ab61397c10f18b305520da7073b2b45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified JSON pointer <emphasis>ptr</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to the desired element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> begins with &apos;0&apos;. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is not a number. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is out of range. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used in the passed JSON pointer <emphasis>ptr</emphasis>. As <computeroutput>at</computeroutput> provides checked access (and no elements are implicitly inserted), the index &apos;-&apos; is always invalid. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer <emphasis>ptr</emphasis> can not be resolved. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Exception safety</title><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="since"><para>version 2.0.0</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The behavior is shown in the example. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2}}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read-only<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/number&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/number&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/string&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/string&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/array&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array/1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/array/1&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>writing<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>j.at(</highlight><highlight class="stringliteral">&quot;/string&quot;</highlight><highlight class="normal">_json_pointer)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>changed<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>an<sp/>array<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>j.at(</highlight><highlight class="stringliteral">&quot;/array/1&quot;</highlight><highlight class="normal">_json_pointer)<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>the<sp/>changed<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j[</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.106</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>an<sp/>array<sp/>index<sp/>with<sp/>leading<sp/>&apos;0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">json::reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/01&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" kindref="member">json::parse_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>an<sp/>array<sp/>index<sp/>that<sp/>is<sp/>not<sp/>a<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">json::reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/one&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" kindref="member">json::parse_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>a<sp/>an<sp/>invalid<sp/>array<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">json::reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/4&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.402</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>the<sp/>array<sp/>index<sp/>&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">json::reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/-&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.404</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>a<sp/>JSON<sp/>pointer<sp/>that<sp/>cannot<sp/>be<sp/>resolved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" kindref="member">json::reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/number/foo&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/Fy2xBfZMols2DUQC&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
&quot;foo&quot;
[1,2]
2
&quot;bar&quot;
[1,21]
[json.exception.parse_error.106] parse error: array index &apos;01&apos; must not begin with &apos;0&apos;
[json.exception.parse_error.109] parse error: array index &apos;one&apos; is not a number
[json.exception.out_of_range.401] array index 4 is out of range
[json.exception.out_of_range.402] array index &apos;-&apos; (2) is out of range
[json.exception.out_of_range.404] unresolved reference token &apos;foo&apos;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/at_json_pointer.cpp -o at_json_pointer </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13283" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13283" bodyend="13286"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a86b6139637806d33aed9e910c27fc669_1a86b6139637806d33aed9e910c27fc669" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr) const </argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_1_1json__pointer" kindref="compound">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified JSON pointer <emphasis>ptr</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to the desired element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> begins with &apos;0&apos;. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is not a number. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is out of range. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used in the passed JSON pointer <emphasis>ptr</emphasis>. As <computeroutput>at</computeroutput> provides checked access (and no elements are implicitly inserted), the index &apos;-&apos; is always invalid. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer <emphasis>ptr</emphasis> can not be resolved. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Exception safety</title><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="since"><para>version 2.0.0</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The behavior is shown in the example. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">},<sp/>{</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>2}}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read-only<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/number&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/number&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/string&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/string&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/array&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>element<sp/>with<sp/>JSON<sp/>pointer<sp/>&quot;/array/1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j.at(</highlight><highlight class="stringliteral">&quot;/array/1&quot;</highlight><highlight class="normal">_json_pointer)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.109</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>an<sp/>array<sp/>index<sp/>that<sp/>is<sp/>not<sp/>a<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">json::const_reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/one&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" kindref="member">json::parse_error</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.401</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>a<sp/>an<sp/>invalid<sp/>array<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">json::const_reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/4&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.402</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>the<sp/>array<sp/>index<sp/>&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">json::const_reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/array/-&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out_of_range.404</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>use<sp/>a<sp/>JSON<sp/>pointer<sp/>that<sp/>cannot<sp/>be<sp/>resolved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" kindref="member">json::const_reference</ref><sp/>ref<sp/>=<sp/>j.<ref refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" kindref="member">at</ref>(</highlight><highlight class="stringliteral">&quot;/number/foo&quot;</highlight><highlight class="normal">_json_pointer);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" kindref="member">json::out_of_range</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/WxhV3mL9YX8FJonk&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>1
&quot;foo&quot;
[1,2]
2
[json.exception.parse_error.109] parse error: array index &apos;one&apos; is not a number
[json.exception.out_of_range.401] array index 4 is out of range
[json.exception.out_of_range.402] array index &apos;-&apos; (2) is out of range
[json.exception.out_of_range.404] unresolved reference token &apos;foo&apos;
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/at_json_pointer_const.cpp -o at_json_pointer_const </verbatim> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13323" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13323" bodyend="13326"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_afa837aac21a3952bd81b07d15a7c645e_1afa837aac21a3952bd81b07d15a7c645e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::flatten</definition>
        <argsstring>() const </argsstring>
        <name>flatten</name>
        <briefdescription>
<para>return flattened JSON value </para>        </briefdescription>
        <detaileddescription>
<para>The function creates a JSON object whose keys are JSON pointers (see <ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>) and whose values are all primitive. The original JSON value can be restored using the <ref refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" kindref="member">unflatten()</ref> function.</para><para><simplesect kind="return"><para>an object that maps JSON pointers to primitive values</para></simplesect>
<simplesect kind="note"><para>Empty objects and arrays are flattened to <computeroutput>null</computeroutput> and will not be reconstructed correctly by the <ref refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" kindref="member">unflatten()</ref> function.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size the JSON value.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows how a JSON object is flattened to an object whose keys consist of JSON pointers. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">,<sp/>3.141},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;happy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Niels&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;nothing&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;answer&quot;</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;everything&quot;</highlight><highlight class="normal">,<sp/>42}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>{1,<sp/>0,<sp/>2}},</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;currency&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;USD&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>42.99}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>flatten()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j.flatten()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/cdQa6jE0N2LyqFJe&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;/answer/everything&quot;: 42,
    &quot;/happy&quot;: true,
    &quot;/list/0&quot;: 1,
    &quot;/list/1&quot;: 0,
    &quot;/list/2&quot;: 2,
    &quot;/name&quot;: &quot;Niels&quot;,
    &quot;/nothing&quot;: null,
    &quot;/object/currency&quot;: &quot;USD&quot;,
    &quot;/object/value&quot;: 42.99,
    &quot;/pi&quot;: 3.141
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/flatten.cpp -o flatten </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" kindref="member">unflatten()</ref> for the reverse function</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13350" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13350" bodyend="13355"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::unflatten</definition>
        <argsstring>() const </argsstring>
        <name>unflatten</name>
        <briefdescription>
<para>unflatten a previously flattened JSON value </para>        </briefdescription>
        <detaileddescription>
<para>The function restores the arbitrary nesting of a JSON value that has been flattened before using the <ref refid="classnlohmann_1_1basic__json_afa837aac21a3952bd81b07d15a7c645e_1afa837aac21a3952bd81b07d15a7c645e" kindref="member">flatten()</ref> function. The JSON value must meet certain constraints:<orderedlist>
<listitem><para>The value must be an object.</para></listitem><listitem><para>The keys must be JSON pointers (see <ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>)</para></listitem><listitem><para>The mapped values must be primitive JSON types.</para></listitem></orderedlist>
</para><para><simplesect kind="return"><para>the original JSON from a flattened version</para></simplesect>
<simplesect kind="note"><para>Empty objects and arrays are flattened by <ref refid="classnlohmann_1_1basic__json_afa837aac21a3952bd81b07d15a7c645e_1afa837aac21a3952bd81b07d15a7c645e" kindref="member">flatten()</ref> to <computeroutput>null</computeroutput> values and can not unflattened to their original type. Apart from this example, for a JSON value <computeroutput>j</computeroutput>, the following is always true: <computeroutput>j == j.flatten().unflatten()</computeroutput>.</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size the JSON value.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.314</parametername>
</parameternamelist>
<parameterdescription>
<para>if value is not an object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.315</parametername>
</parameternamelist>
<parameterdescription>
<para>if object values are not primitve</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>The following code shows how a flattened JSON object is unflattened into the original nested JSON object. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_flattened<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/answer/everything&quot;</highlight><highlight class="normal">,<sp/>42},</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/happy&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/list/0&quot;</highlight><highlight class="normal">,<sp/>1},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/list/1&quot;</highlight><highlight class="normal">,<sp/>0},</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/list/2&quot;</highlight><highlight class="normal">,<sp/>2},</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Niels&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/nothing&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/object/currency&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;USD&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/object/value&quot;</highlight><highlight class="normal">,<sp/>42.99},</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;/pi&quot;</highlight><highlight class="normal">,<sp/>3.141}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>unflatten()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>j_flattened.unflatten()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/PFBoQVT7RG0e0Wua&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;answer&quot;: {
        &quot;everything&quot;: 42
    },
    &quot;happy&quot;: true,
    &quot;list&quot;: [
        1,
        0,
        2
    ],
    &quot;name&quot;: &quot;Niels&quot;,
    &quot;nothing&quot;: null,
    &quot;object&quot;: {
        &quot;currency&quot;: &quot;USD&quot;,
        &quot;value&quot;: 42.99
    },
    &quot;pi&quot;: 3.141
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/unflatten.cpp -o unflatten </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_afa837aac21a3952bd81b07d15a7c645e_1afa837aac21a3952bd81b07d15a7c645e" kindref="member">flatten()</ref> for the reverse function</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13387" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13387" bodyend="13390"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Patch functions</header>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_a543bd5f7490de54c875b2c0912dc9a49_1a543bd5f7490de54c875b2c0912dc9a49" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::diff</definition>
        <argsstring>(const basic_json &amp;source, const basic_json &amp;target, const std::string &amp;path=&quot;&quot;)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>creates a diff as a JSON patch </para>        </briefdescription>
        <detaileddescription>
<para>Creates a <ulink url="http://jsonpatch.com">JSON Patch</ulink> so that value <emphasis>source</emphasis> can be changed into the value <emphasis>target</emphasis> by calling <ref refid="classnlohmann_1_1basic__json_ad87518a27b13f886b836bb93213e6515_1ad87518a27b13f886b836bb93213e6515" kindref="member">patch</ref> function.</para><para><simplesect kind="invariant"><para>For two JSON values <emphasis>source</emphasis> and <emphasis>target</emphasis>, the following code yields always <computeroutput>true</computeroutput>: <programlisting><codeline><highlight class="normal">source.patch(<ref refid="classnlohmann_1_1basic__json_a543bd5f7490de54c875b2c0912dc9a49_1a543bd5f7490de54c875b2c0912dc9a49" kindref="member">diff</ref>(source,<sp/>target))<sp/>==<sp/>target;</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para>Currently, only <computeroutput>remove</computeroutput>, <computeroutput>add</computeroutput>, and <computeroutput>replace</computeroutput> operations are generated.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to compare from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to compare against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>helper value to create JSON pointers</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a JSON patch to convert the <emphasis>source</emphasis> to <emphasis>target</emphasis> </para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Linear in the lengths of <emphasis>source</emphasis> and <emphasis>target</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows how a JSON patch is created as a diff for two JSON values. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>source<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>source<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;baz&quot;:<sp/>&quot;qux&quot;,</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;foo&quot;:<sp/>&quot;bar&quot;</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;_json;</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>target<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>target<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;baz&quot;:<sp/>&quot;boo&quot;,</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;hello&quot;:<sp/>[</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;world&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;_json;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>patch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>patch<sp/>=<sp/><ref refid="classnlohmann_1_1basic__json_a543bd5f7490de54c875b2c0912dc9a49_1a543bd5f7490de54c875b2c0912dc9a49" kindref="member">json::diff</ref>(source,<sp/>target);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>roundtrip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>patched_source<sp/>=<sp/>source.patch(patch);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>patch<sp/>and<sp/>roundtrip<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>patch<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>patched_source<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/hicmeOK39tBxaluM&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>[
    {
        &quot;op&quot;: &quot;replace&quot;,
        &quot;path&quot;: &quot;/baz&quot;,
        &quot;value&quot;: &quot;boo&quot;
    },
    {
        &quot;op&quot;: &quot;remove&quot;,
        &quot;path&quot;: &quot;/foo&quot;
    },
    {
        &quot;op&quot;: &quot;add&quot;,
        &quot;path&quot;: &quot;/hello&quot;,
        &quot;value&quot;: [
            &quot;world&quot;
        ]
    }
]

{
    &quot;baz&quot;: &quot;boo&quot;,
    &quot;hello&quot;: [
        &quot;world&quot;
    ]
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/diff.cpp -o diff </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_ad87518a27b13f886b836bb93213e6515_1ad87518a27b13f886b836bb93213e6515" kindref="member">patch</ref> <ndash/> apply a JSON patch</para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</ulink></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13740" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13740" bodyend="13870"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ad87518a27b13f886b836bb93213e6515_1ad87518a27b13f886b836bb93213e6515" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::patch</definition>
        <argsstring>(const basic_json &amp;json_patch) const </argsstring>
        <name>patch</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>json_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON patch </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://jsonpatch.com">JSON Patch</ulink> defines a JSON document structure for expressing a sequence of operations to apply to a JSON) document. With this function, a JSON Patch is applied to the current JSON value by executing all operations from the patch.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json_patch</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON patch document </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>patched document</para></simplesect>
<simplesect kind="note"><para>The application of a patch is atomic: Either all operations succeed and the patched document is returned or an exception is thrown. In any case, the original value is not changed: the patch is applied to a copy of the value.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.104</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON patch does not consist of an array of objects</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.105</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON patch is malformed (e.g., mandatory attributes are missing); example: <computeroutput>&quot;operation add must have member path&quot;</computeroutput></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index is out of range.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if a JSON pointer inside the patch could not be resolved successfully in the current JSON value; example: <computeroutput>&quot;key baz not
found&quot;</computeroutput></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.405</parametername>
</parameternamelist>
<parameterdescription>
<para>if JSON pointer has no parent (&quot;add&quot;, &quot;remove&quot;, &quot;move&quot;)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other_error.501</parametername>
</parameternamelist>
<parameterdescription>
<para>if &quot;test&quot; operation was unsuccessful</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Complexity</title><para>Linear in the size of the JSON value and the length of the JSON patch. As usually only a fraction of the JSON value is affected by the patch, the complexity can usually be neglected.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows how a JSON patch is applied to a value. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>original<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>doc<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;baz&quot;:<sp/>&quot;qux&quot;,</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;foo&quot;:<sp/>&quot;bar&quot;</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;_json;</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>patch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>patch<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>&quot;op&quot;:<sp/>&quot;replace&quot;,<sp/>&quot;path&quot;:<sp/>&quot;/baz&quot;,<sp/>&quot;value&quot;:<sp/>&quot;boo&quot;<sp/>},</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>&quot;op&quot;:<sp/>&quot;add&quot;,<sp/>&quot;path&quot;:<sp/>&quot;/hello&quot;,<sp/>&quot;value&quot;:<sp/>[&quot;world&quot;]<sp/>},</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>&quot;op&quot;:<sp/>&quot;remove&quot;,<sp/>&quot;path&quot;:<sp/>&quot;/foo&quot;}</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;_json;</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>patch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>patched_doc<sp/>=<sp/>doc.patch(patch);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>original<sp/>and<sp/>patched<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>doc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>patched_doc<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/lbczW3AzcUbH1Nbo&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;baz&quot;: &quot;qux&quot;,
    &quot;foo&quot;: &quot;bar&quot;
}

{
    &quot;baz&quot;: &quot;boo&quot;,
    &quot;hello&quot;: [
        &quot;world&quot;
    ]
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/patch.cpp -o patch </verbatim></para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a543bd5f7490de54c875b2c0912dc9a49_1a543bd5f7490de54c875b2c0912dc9a49" kindref="member">diff</ref> <ndash/> create a JSON patch by comparing two JSON values</para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901 (JSON Pointer)</ulink></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="13448" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="13448" bodyend="13706"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" prot="public" static="no">
        <type>JSONSerializer&lt; T, SFINAE &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::json_serializer =  JSONSerializer&lt;T, SFINAE&gt;</definition>
        <argsstring></argsstring>
        <name>json_serializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1304" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" prot="public" static="no">
        <name>parse_event_t</name>
        <enumvalue id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafeae73f17027cb0acbb537f29d0a6944b26" prot="public">
          <name>object_start</name>
          <briefdescription>
<para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafeaf63e2a2468a37aa4f394fcc3bcb8249c" prot="public">
          <name>object_end</name>
          <briefdescription>
<para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafeaa4388a3d92419edbb1c6efd4d52461f3" prot="public">
          <name>array_start</name>
          <briefdescription>
<para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafea49642fb732aa2e112188fba1f9d3ef7f" prot="public">
          <name>array_end</name>
          <briefdescription>
<para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafea3c6e0b8a9c15224a8228b9a98ca1531d" prot="public">
          <name>key</name>
          <briefdescription>
<para>the parser read a key of a value in an object </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafea2063c1608d6e0baf80249c42e2be5804" prot="public">
          <name>value</name>
          <briefdescription>
<para>the parser finished reading a JSON value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>JSON callback events. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration lists the parser events that can trigger calling a callback function of type <ref refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" kindref="member">parser_callback_t</ref> during parsing.</para><para><image type="html" name="callback_events.png">Example when certain parse events are triggered</image>
 <simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2079" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2078" bodyend="2092"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" prot="public" static="no">
        <type>std::function&lt; bool(int depth, <ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" kindref="member">parse_event_t</ref> event, <ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;parsed)&gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::parser_callback_t =  std::function&lt;bool(int depth, parse_event_t event, basic_json&amp; parsed)&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <briefdescription>
<para>per-element parser callback type </para>        </briefdescription>
        <detaileddescription>
<para>With a parser callback function, the result of parsing a JSON text can be influenced. When passed to <ref refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" kindref="member">parse</ref>(std::istream&amp;, const parser_callback_t) or <ref refid="classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_1ab275a3e00a40189e96d244de6c8f311a" kindref="member">parse(const CharT, const parser_callback_t)</ref>, it is called on certain events (passed as <ref refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" kindref="member">parse_event_t</ref> via parameter <emphasis>event</emphasis>) with a set recursion depth <emphasis>depth</emphasis> and context JSON value <emphasis>parsed</emphasis>. The return value of the callback function is a boolean indicating whether the element that emitted the callback shall be kept or not.</para><para>We distinguish six scenarios (determined by the event type) in which the callback function can be called. The following table describes the values of the parameters <emphasis>depth</emphasis>, <emphasis>event</emphasis>, and <emphasis>parsed</emphasis>.</para><para><table rows="7" cols="4"><row>
<entry thead="yes"><para>parameter <emphasis>event</emphasis> </para></entry><entry thead="yes"><para>description </para></entry><entry thead="yes"><para>parameter <emphasis>depth</emphasis> </para></entry><entry thead="yes"><para>parameter <emphasis>parsed</emphasis>  </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::object_start </para></entry><entry thead="no"><para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para></entry><entry thead="no"><para>depth of the parent of the JSON object </para></entry><entry thead="no"><para>a JSON value with type discarded </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::key </para></entry><entry thead="no"><para>the parser read a key of a value in an object </para></entry><entry thead="no"><para>depth of the currently parsed JSON object </para></entry><entry thead="no"><para>a JSON string containing the key </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::object_end </para></entry><entry thead="no"><para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para></entry><entry thead="no"><para>depth of the parent of the JSON object </para></entry><entry thead="no"><para>the parsed JSON object </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::array_start </para></entry><entry thead="no"><para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para></entry><entry thead="no"><para>depth of the parent of the JSON array </para></entry><entry thead="no"><para>a JSON value with type discarded </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::array_end </para></entry><entry thead="no"><para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para></entry><entry thead="no"><para>depth of the parent of the JSON array </para></entry><entry thead="no"><para>the parsed JSON array </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::value </para></entry><entry thead="no"><para>the parser finished reading a JSON value </para></entry><entry thead="no"><para>depth of the value </para></entry><entry thead="no"><para>the parsed JSON value </para></entry></row>
</table>
<image type="html" name="callback_events.png">Example when certain parse events are triggered</image>
 Discarding a value (i.e., returning <computeroutput>false</computeroutput>) has different effects depending on the context in which function was called:</para><para><itemizedlist>
<listitem><para>Discarded values in structured types are skipped. That is, the parser will behave as if the discarded value was never read.</para></listitem><listitem><para>In case a value outside a structured type is skipped, it is replaced with <computeroutput>null</computeroutput>. This case happens if the top-level element is skipped.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the recursion during parsing</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>an event of type parse_event_t indicating the context in the callback function has been called</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">parsed</parametername>
</parameternamelist>
<parameterdescription>
<para>the current intermediate parse result; note that writing to this value has no effect for parse_event_t::key events</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the JSON value which called the function during parsing should be kept (<computeroutput>true</computeroutput>) or not (<computeroutput>false</computeroutput>). In the latter case, it is either skipped completely or replaced by an empty discarded object.</para></simplesect>
<simplesect kind="see"><para><ref refid="classnlohmann_1_1basic__json_a4cd30efe5c33a7cf73a0c6495bb16054_1a4cd30efe5c33a7cf73a0c6495bb16054" kindref="member">parse(std::istream&amp;, parser_callback_t)</ref> or <ref refid="classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_1ab275a3e00a40189e96d244de6c8f311a" kindref="member">parse(const CharT, const parser_callback_t)</ref> for examples</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2146" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" prot="public" static="no">
        <type>detail::value_t</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::value_t =  detail::value_t</definition>
        <argsstring></argsstring>
        <name>value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1298" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1298" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnlohmann_1_1basic__json_1afc4033f5af721feb287b0676723a145f" prot="private" static="no">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::basic_json_t =  basic_json&lt;ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer&gt;</definition>
        <argsstring></argsstring>
        <name>basic_json_t</name>
        <briefdescription>
<para>workaround type for MSVC </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1293" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnlohmann_1_1basic__json_a6275ed57bae6866cdf5db5370a7ad47c_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>detail::value_t</type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct detail::external_constructor</definition>
        <argsstring></argsstring>
        <name>detail::external_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1291" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnlohmann_1_1basic__json_1a91990b60d7d4d67968a2c1db677536e7" prot="private" static="no" mutable="no">
        <type><ref refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" kindref="member">value_t</ref></type>
        <definition>value_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <initializer>= value_t::null</initializer>
        <briefdescription>
<para>the type of the current element </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9373" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnlohmann_1_1basic__json_1aeb0814f76966f99290cb29e127c90a77" prot="private" static="no" mutable="no">
        <type>json_value</type>
        <definition>json_value nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>the value of the current element </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9376" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9376" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_af4ac14224fbdd29d3547fcb11bb55c8f_1af4ac14224fbdd29d3547fcb11bb55c8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a86ce930490cf7773b26f5ef49c04a350_1a86ce930490cf7773b26f5ef49c04a350" kindref="member">allocator_type</ref></type>
        <definition>static allocator_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_allocator</definition>
        <argsstring>()</argsstring>
        <name>get_allocator</name>
        <briefdescription>
<para>returns the allocator associated with the container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1376" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1376" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_aef6d0eeccee7c5c7e1317c2ea1607fab_1aef6d0eeccee7c5c7e1317c2ea1607fab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::meta</definition>
        <argsstring>()</argsstring>
        <name>meta</name>
        <briefdescription>
<para>returns version information on the library </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a JSON object with information about the library, including the version number and information on the platform and compiler.</para><para><simplesect kind="return"><para>JSON object holding version information <table rows="7" cols="2"><row>
<entry thead="yes"><para>key </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>compiler</computeroutput> </para></entry><entry thead="no"><para>Information on the used compiler. It is an object with the following keys: <computeroutput>c++</computeroutput> (the used C++ standard), <computeroutput>family</computeroutput> (the compiler family; possible values are <computeroutput>clang</computeroutput>, <computeroutput>icc</computeroutput>, <computeroutput>gcc</computeroutput>, <computeroutput>ilecpp</computeroutput>, <computeroutput>msvc</computeroutput>, <computeroutput>pgcpp</computeroutput>, <computeroutput>sunpro</computeroutput>, and <computeroutput>unknown</computeroutput>), and <computeroutput>version</computeroutput> (the compiler version). </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>copyright</computeroutput> </para></entry><entry thead="no"><para>The copyright line for the library as string. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>name</computeroutput> </para></entry><entry thead="no"><para>The name of the library as string. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>platform</computeroutput> </para></entry><entry thead="no"><para>The used platform as string. Possible values are <computeroutput>win32</computeroutput>, <computeroutput>linux</computeroutput>, <computeroutput>apple</computeroutput>, <computeroutput>unix</computeroutput>, and <computeroutput>unknown</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>url</computeroutput> </para></entry><entry thead="no"><para>The URL of the project as string. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>version</computeroutput> </para></entry><entry thead="no"><para>The version of the library. It is an object with the following keys: <computeroutput>major</computeroutput>, <computeroutput>minor</computeroutput>, and <computeroutput>patch</computeroutput> as defined by <ulink url="http://semver.org">Semantic Versioning</ulink>, and <computeroutput>string</computeroutput> (the version string). </para></entry></row>
</table>
</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code shows an example output of the <computeroutput>meta()</computeroutput> function. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>meta()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/><ref refid="classnlohmann_1_1basic__json_aef6d0eeccee7c5c7e1317c2ea1607fab_1aef6d0eeccee7c5c7e1317c2ea1607fab" kindref="member">json::meta</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/3hERJociqLo3vdod&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>{
    &quot;compiler&quot;: {
        &quot;c++&quot;: &quot;201103&quot;,
        &quot;family&quot;: &quot;clang&quot;,
        &quot;version&quot;: &quot;8.0.0 (clang-800.0.42.1)&quot;
    },
    &quot;copyright&quot;: &quot;(C) 2013-2017 Niels Lohmann&quot;,
    &quot;name&quot;: &quot;JSON for Modern C++&quot;,
    &quot;platform&quot;: &quot;apple&quot;,
    &quot;url&quot;: &quot;https://github.com/nlohmann/json&quot;,
    &quot;version&quot;: {
        &quot;major&quot;: 2,
        &quot;minor&quot;: 1,
        &quot;patch&quot;: 1,
        &quot;string&quot;: &quot;2.1.1&quot;
    }
}
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/meta.cpp -o meta </verbatim></para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="since"><para>2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1404" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1404" bodyend="1454"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a1efc9538a006821862122bfd901acce7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>static T* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::create</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>create</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>helper for exception-safe object creation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1897" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1897" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a040a5feb1eb48da9134924217b25bcf6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename ThisType</type>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>static ReferenceType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_ref_impl</definition>
        <argsstring>(ThisType &amp;obj)</argsstring>
        <name>get_ref_impl</name>
        <param>
          <type>ThisType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>helper function to implement get_ref() </para>        </briefdescription>
        <detaileddescription>
<para>This funcion helps to implement get_ref() without code duplication for const and non-const overloads</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ThisType</parametername>
</parameternamelist>
<parameterdescription>
<para>will be deduced as <computeroutput>basic_json</computeroutput> or <computeroutput>const basic_json</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>if ReferenceType does not match underlying value type of the current JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3374" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3374" bodyend="3388"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a7a5a285983c06f5a2bb996d4d4f463fd" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::assert_invariant</definition>
        <argsstring>() const </argsstring>
        <name>assert_invariant</name>
        <briefdescription>
<para>checks the class invariants </para>        </briefdescription>
        <detaileddescription>
<para>This function asserts the class invariants. It needs to be called at the end of every constructor to make sure that created objects respect the invariant. Furthermore, it has to be called each time the type of a JSON value is changed, because the invariant expresses a relationship between <emphasis>m_type</emphasis> and <emphasis>m_value</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="2056" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="2056" bodyend="2061"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1acb296a56f69c396e2c2a898f2043c834" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref></type>
        <definition>boolean_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl</definition>
        <argsstring>(boolean_t *) const </argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a boolean (explicit) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3268" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3268" bodyend="3276"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a58b65f595883fb93333423ec5e3bafee" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> *</type>
        <definition>object_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(object_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3279" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3279" bodyend="3282"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1aff66aa31ef8603d799433b26fe7535c9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> *</type>
        <definition>constexpr const object_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const object_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3285" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3285" bodyend="3288"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a0a9c36d4d94ef5d611c0204bc7e4d37f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> *</type>
        <definition>array_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(array_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3291" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3291" bodyend="3294"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1abefb50a81c9b91106d9ecadfcd1ee2b5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> *</type>
        <definition>constexpr const array_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const array_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3297" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3297" bodyend="3300"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a955d7098e5b43ee0dd8cce5f707eeb5c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> *</type>
        <definition>string_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(string_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3303" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3303" bodyend="3306"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a0c0b516e06d10dced993934ba5139cc0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> *</type>
        <definition>constexpr const string_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const string_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3309" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3309" bodyend="3312"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1ab1678fb6723faf020a15300c4f6b98f5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref> *</type>
        <definition>boolean_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(boolean_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3315" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3315" bodyend="3318"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1ae068eee75c0a814e19208bae641f866c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref> *</type>
        <definition>constexpr const boolean_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const boolean_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3321" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3321" bodyend="3324"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a32a4c3ccdd09b663614adce1834a0a50" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> *</type>
        <definition>number_integer_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(number_integer_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3327" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3327" bodyend="3330"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a0a01103792cc54e9c8236361e5f7ed90" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> *</type>
        <definition>constexpr const number_integer_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const number_integer_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3333" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3333" bodyend="3336"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1aa9aaed6b92909b263e04b5d25eba8d67" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> *</type>
        <definition>number_unsigned_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(number_unsigned_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3339" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3339" bodyend="3342"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a52d0c7f354c6155221540baef5b98d0a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> *</type>
        <definition>constexpr const number_unsigned_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const number_unsigned_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3345" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3345" bodyend="3348"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1a01e81365c2c6897b39b793530e02aca5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> *</type>
        <definition>number_float_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(number_float_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3351" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3351" bodyend="3354"/>
      </memberdef>
      <memberdef kind="function" id="classnlohmann_1_1basic__json_1abbec23daef5fbb5b8bff6a481e5a7160" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> *</type>
        <definition>constexpr const number_float_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::get_impl_ptr</definition>
        <argsstring>(const number_float_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="3357" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="3357" bodyend="3360"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnlohmann_1_1basic__json_ad6f550a2591b55766603c2c433e2f973_1ad6f550a2591b55766603c2c433e2f973" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;::type_name</definition>
        <argsstring>() const </argsstring>
        <name>type_name</name>
        <briefdescription>
<para>return the type as string </para>        </briefdescription>
        <detaileddescription>
<para>Returns the type name as string to be used in error messages - usually to indicate that a function was called on a wrong JSON type.</para><para><simplesect kind="return"><para>basically a string representation of a the <emphasis>m_type</emphasis> member</para></simplesect>
<simplesect kind="par"><title>Complexity</title><para>Constant.</para></simplesect>
<simplesect kind="par"><title>Example</title><para>The following code exemplifies <computeroutput>type_name()</computeroutput> for all JSON types. <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>=<sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>JSON<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_null;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_boolean<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_integer<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_number_float<sp/>=<sp/>23.42;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_object<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>1},<sp/>{</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/>2}};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_array<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenlohmann_a2bfd99e845a2e5cd90aeaf1b1431f474_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">json</ref><sp/>j_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello,<sp/>world&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>type_name()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_null.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_boolean.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_integer.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_number_float.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_object.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_array.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>j_string.type_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
</programlisting> Output (play with this example <htmlonly>&lt;a target=&quot;_blank&quot; href=&quot;http://melpon.org/wandbox/permlink/V6imubWo6Lkp8gk1&quot;&gt;&lt;b&gt;online&lt;/b&gt;&lt;/a&gt;</htmlonly>): <verbatim>null
boolean
number
number
object
array
string
</verbatim> The example code above can be translated with<verbatim>g++ -std=c++11 -Isrc doc/examples/type_name.cpp -o type_name </verbatim></para></simplesect>
<simplesect kind="since"><para>version 1.0.0, public since 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="9343" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="9343" bodyend="9364"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a class to store JSON values </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ObjectType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON objects (<computeroutput>std::map</computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" kindref="member">object_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArrayType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON arrays (<computeroutput>std::vector</computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" kindref="member">array_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StringType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON strings and object keys (<computeroutput>std::string</computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" kindref="member">string_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BooleanType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON booleans (<computeroutput>bool</computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" kindref="member">boolean_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberIntegerType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON integer numbers (<computeroutput>int64_t</computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" kindref="member">number_integer_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberUnsignedType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON unsigned integer numbers (<computeroutput><computeroutput>uint64_t</computeroutput></computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" kindref="member">number_unsigned_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberFloatType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON floating-point numbers (<computeroutput>double</computeroutput> by default; will be used in <ref refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" kindref="member">number_float_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocatorType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the allocator to use (<computeroutput>std::allocator</computeroutput> by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>JSONSerializer</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer to resolve internal calls to <computeroutput>to_json()</computeroutput> and <computeroutput>from_json()</computeroutput> (<ref refid="structnlohmann_1_1adl__serializer" kindref="compound">adl_serializer</ref> by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Requirements</title><para>The class satisfies the following concept requirements:<itemizedlist>
<listitem><para>Basic<itemizedlist>
<listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/DefaultConstructible">DefaultConstructible</ulink>: JSON values can be default constructed. The result will be a JSON null value.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/MoveConstructible">MoveConstructible</ulink>: A JSON value can be constructed from an rvalue argument.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/CopyConstructible">CopyConstructible</ulink>: A JSON value can be copy-constructed from an lvalue expression.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/MoveAssignable">MoveAssignable</ulink>: A JSON value van be assigned from an rvalue argument.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/CopyAssignable">CopyAssignable</ulink>: A JSON value can be copy-assigned from an lvalue expression.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/Destructible">Destructible</ulink>: JSON values can be destructed.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Layout<itemizedlist>
<listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/StandardLayoutType">StandardLayoutType</ulink>: JSON values have <ulink url="http://en.cppreference.com/w/cpp/language/data_members#Standard_layout">standard layout</ulink>: All non-static data members are private and standard layout types, the class has no virtual functions or (virtual) base classes.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Library-wide<itemizedlist>
<listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/EqualityComparable">EqualityComparable</ulink>: JSON values can be compared with <computeroutput>==</computeroutput>, see <ref refid="classnlohmann_1_1basic__json_a122640e7e2db1814fc7bbb3c122ec76e_1a122640e7e2db1814fc7bbb3c122ec76e" kindref="member">operator==(const_reference,const_reference)</ref>.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/LessThanComparable">LessThanComparable</ulink>: JSON values can be compared with <computeroutput>&lt;</computeroutput>, see <ref refid="classnlohmann_1_1basic__json_aacd442b66140c764c594ac8ad7dfd5b3_1aacd442b66140c764c594ac8ad7dfd5b3" kindref="member">operator&lt;(const_reference,const_reference)</ref>.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/Swappable">Swappable</ulink>: Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of other compatible types, using unqualified function call <ref refid="classnlohmann_1_1basic__json_a66d4de311f79f2fe640793ab7a178781_1a66d4de311f79f2fe640793ab7a178781" kindref="member">swap()</ref>.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/NullablePointer">NullablePointer</ulink>: JSON values can be compared against <computeroutput>std::nullptr_t</computeroutput> objects which are used to model the <computeroutput>null</computeroutput> value.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Container<itemizedlist>
<listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/Container">Container</ulink>: JSON values can be used like STL containers and provide iterator access.</para></listitem><listitem><para><ulink url="http://en.cppreference.com/w/cpp/concept/ReversibleContainer">ReversibleContainer</ulink>; JSON values can be used like STL containers and provide reverse iterator access.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="invariant"><para>The member variables <emphasis>m_value</emphasis> and <emphasis>m_type</emphasis> have the following relationship:<itemizedlist>
<listitem><para>If <computeroutput>m_type == value_t::object</computeroutput>, then <computeroutput>m_value.object != nullptr</computeroutput>.</para></listitem><listitem><para>If <computeroutput>m_type == value_t::array</computeroutput>, then <computeroutput>m_value.array != nullptr</computeroutput>.</para></listitem><listitem><para>If <computeroutput>m_type == value_t::string</computeroutput>, then <computeroutput>m_value.string != nullptr</computeroutput>. The invariants are checked by member function assert_invariant().</para></listitem></itemizedlist>
</para></simplesect>
</para><para><simplesect kind="see"><para><ulink url="http://rfc7159.net/rfc7159">RFC 7159: The JavaScript Object Notation (JSON) Data Interchange Format</ulink></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer &gt;</label>
        <link refid="classnlohmann_1_1basic__json"/>
      </node>
    </collaborationgraph>
    <location file="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" line="1289" column="1" bodyfile="/home/thongpv3/CLionProjects/CBORBenchmark/include/json/src/json.hpp" bodystart="1288" bodyend="13873"/>
    <listofallmembers>
      <member refid="classnlohmann_1_1basic__json_1a3fba1efdaca78397efe8ee9e9816b93d" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>add_to_vector</name></member>
      <member refid="classnlohmann_1_1basic__json_a86ce930490cf7773b26f5ef49c04a350_1a86ce930490cf7773b26f5ef49c04a350" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>allocator_type</name></member>
      <member refid="classnlohmann_1_1basic__json_a4a4ec75e4d2845d9bcf7a9e5458e4949_1a4a4ec75e4d2845d9bcf7a9e5458e4949" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>array</name></member>
      <member refid="classnlohmann_1_1basic__json_a4c409f1b6d9caf3412c78af9a5883fed_1a4c409f1b6d9caf3412c78af9a5883fed" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>array_t</name></member>
      <member refid="classnlohmann_1_1basic__json_1a7a5a285983c06f5a2bb996d4d4f463fd" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>assert_invariant</name></member>
      <member refid="classnlohmann_1_1basic__json_a73ae333487310e3302135189ce8ff5d8_1a73ae333487310e3302135189ce8ff5d8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="classnlohmann_1_1basic__json_a5af365239f7d540b34c31b25e382333b_1a5af365239f7d540b34c31b25e382333b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="classnlohmann_1_1basic__json_a93403e803947b86f4da2d1fb3345cf2c_1a93403e803947b86f4da2d1fb3345cf2c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="classnlohmann_1_1basic__json_a8471c693500db2e8c868ec4371d402a6_1a8471c693500db2e8c868ec4371d402a6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="classnlohmann_1_1basic__json_a8ab61397c10f18b305520da7073b2b45_1a8ab61397c10f18b305520da7073b2b45" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="classnlohmann_1_1basic__json_a86b6139637806d33aed9e910c27fc669_1a86b6139637806d33aed9e910c27fc669" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="classnlohmann_1_1basic__json_a011397134847f36db0ed7d7a93753677_1a011397134847f36db0ed7d7a93753677" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>back</name></member>
      <member refid="classnlohmann_1_1basic__json_a14c9e9d157a0fe7b7d3be102d1b47fa9_1a14c9e9d157a0fe7b7d3be102d1b47fa9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>back</name></member>
      <member refid="classnlohmann_1_1basic__json_a32124a16dc80729d964d9caf607c2bc8_1a32124a16dc80729d964d9caf607c2bc8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_ae9be9e956bfc4658f35d17c6aa72b063_1ae9be9e956bfc4658f35d17c6aa72b063" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_a7639e0834df2bc719a04ffea89b31abc_1a7639e0834df2bc719a04ffea89b31abc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_afbad48316e7cd37366ba3ac5d7e5859e_1afbad48316e7cd37366ba3ac5d7e5859e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_ab6816ae5100409254ed0a8bc21c387bb_1ab6816ae5100409254ed0a8bc21c387bb" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_abe197e9f3184487805cfb5bba6fd5938_1abe197e9f3184487805cfb5bba6fd5938" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_af5de621bcf646c332343f9c1e011126c_1af5de621bcf646c332343f9c1e011126c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_a9a06d1efd50a00f4889f831f851ce124_1a9a06d1efd50a00f4889f831f851ce124" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="classnlohmann_1_1basic__json_1afc4033f5af721feb287b0676723a145f" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a0ff28dac23f2bdecee9564d07f51dcdc_1a0ff28dac23f2bdecee9564d07f51dcdc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>begin</name></member>
      <member refid="classnlohmann_1_1basic__json_a4f0f5dd42b2987ff20306ed78bd31d1d_1a4f0f5dd42b2987ff20306ed78bd31d1d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>begin</name></member>
      <member refid="classnlohmann_1_1basic__json_a4c919102a9b4fe0d588af64801436082_1a4c919102a9b4fe0d588af64801436082" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>boolean_t</name></member>
      <member refid="classnlohmann_1_1basic__json_ad865d6c291b237ae508d5cb2146b5877_1ad865d6c291b237ae508d5cb2146b5877" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>cbegin</name></member>
      <member refid="classnlohmann_1_1basic__json_1acdbbbc4c78c2575daf5420e62ca9db33" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>cbor_expect_string</name></member>
      <member refid="classnlohmann_1_1basic__json_a8dba7b7d2f38e6b0c614030aa43983f6_1a8dba7b7d2f38e6b0c614030aa43983f6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>cend</name></member>
      <member refid="classnlohmann_1_1basic__json_1a45e66a3b5e0696e5a984bd4c5a8df7a7" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>check_length</name></member>
      <member refid="classnlohmann_1_1basic__json_abfeba47810ca72f2176419942c4e1952_1abfeba47810ca72f2176419942c4e1952" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>clear</name></member>
      <member refid="classnlohmann_1_1basic__json_a41a70cf9993951836d129bb1c2b3126a_1a41a70cf9993951836d129bb1c2b3126a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_iterator</name></member>
      <member refid="classnlohmann_1_1basic__json_aff3d5cd2a75612364b888d8693231b58_1aff3d5cd2a75612364b888d8693231b58" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_pointer</name></member>
      <member refid="classnlohmann_1_1basic__json_a4057c5425f4faacfe39a8046871786ca_1a4057c5425f4faacfe39a8046871786ca" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_reference</name></member>
      <member refid="classnlohmann_1_1basic__json_a72be3c24bfa24f0993d6c11af03e7404_1a72be3c24bfa24f0993d6c11af03e7404" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_reverse_iterator</name></member>
      <member refid="classnlohmann_1_1basic__json_a2243b1fda561a3a65defcc69517b7119_1a2243b1fda561a3a65defcc69517b7119" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>count</name></member>
      <member refid="classnlohmann_1_1basic__json_a1e0769d22d54573f294da0e5c6abc9de_1a1e0769d22d54573f294da0e5c6abc9de" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>crbegin</name></member>
      <member refid="classnlohmann_1_1basic__json_1a1efc9538a006821862122bfd901acce7" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>create</name></member>
      <member refid="classnlohmann_1_1basic__json_a5795b029dbf28e0cb2c7a439ec5d0a88_1a5795b029dbf28e0cb2c7a439ec5d0a88" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>crend</name></member>
      <member refid="classnlohmann_1_1basic__json_a6275ed57bae6866cdf5db5370a7ad47c_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>detail::external_constructor</name></member>
      <member refid="classnlohmann_1_1basic__json_a543bd5f7490de54c875b2c0912dc9a49_1a543bd5f7490de54c875b2c0912dc9a49" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>diff</name></member>
      <member refid="classnlohmann_1_1basic__json_afe7c1303357e19cea9527af4e9a31d8f_1afe7c1303357e19cea9527af4e9a31d8f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>difference_type</name></member>
      <member refid="classnlohmann_1_1basic__json_a67212c259e9c0e17d47f4c5167e71b9e_1a67212c259e9c0e17d47f4c5167e71b9e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>dump</name></member>
      <member refid="classnlohmann_1_1basic__json_ab515108f8219ac33256a48066bbc7354_1ab515108f8219ac33256a48066bbc7354" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>emplace</name></member>
      <member refid="classnlohmann_1_1basic__json_ade45be7a74af7aa2d447e555d48e39ea_1ade45be7a74af7aa2d447e555d48e39ea" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>emplace_back</name></member>
      <member refid="classnlohmann_1_1basic__json_a1a86d444bfeaa9518d2421aedd74444a_1a1a86d444bfeaa9518d2421aedd74444a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>empty</name></member>
      <member refid="classnlohmann_1_1basic__json_a13e032a02a7fd8a93fdddc2fcbc4763c_1a13e032a02a7fd8a93fdddc2fcbc4763c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>end</name></member>
      <member refid="classnlohmann_1_1basic__json_a1c15707055088cd5436ae91db72cbe67_1a1c15707055088cd5436ae91db72cbe67" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>end</name></member>
      <member refid="classnlohmann_1_1basic__json_a068a16e76be178e83da6a192916923ed_1a068a16e76be178e83da6a192916923ed" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="classnlohmann_1_1basic__json_a4b3f7eb2d4625d95a51fbbdceb7c5f39_1a4b3f7eb2d4625d95a51fbbdceb7c5f39" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="classnlohmann_1_1basic__json_a2f8484d69c55d8f2a9697a7bec29362a_1a2f8484d69c55d8f2a9697a7bec29362a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="classnlohmann_1_1basic__json_a88cbcefe9a3f4d294bed0653550a5cb9_1a88cbcefe9a3f4d294bed0653550a5cb9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="classnlohmann_1_1basic__json_a9a0aced019cb1d65bb49703406c84970_1a9a0aced019cb1d65bb49703406c84970" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>exception</name></member>
      <member refid="classnlohmann_1_1basic__json_aeed33787bd362c7ead59a4ba945392db_1aeed33787bd362c7ead59a4ba945392db" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>find</name></member>
      <member refid="classnlohmann_1_1basic__json_aa7d1d9f2e2db74c985512d58087c6358_1aa7d1d9f2e2db74c985512d58087c6358" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>find</name></member>
      <member refid="classnlohmann_1_1basic__json_afa837aac21a3952bd81b07d15a7c645e_1afa837aac21a3952bd81b07d15a7c645e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>flatten</name></member>
      <member refid="classnlohmann_1_1basic__json_ab5e3e1758c1a52ffe89b1d379ef7fbe1_1ab5e3e1758c1a52ffe89b1d379ef7fbe1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_cbor</name></member>
      <member refid="classnlohmann_1_1basic__json_1a782368d422aa7bb3dca75361665bfcff" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_cbor_internal</name></member>
      <member refid="classnlohmann_1_1basic__json_a3eafe0b1fb2f2c443f1b3fea55c8a470_1a3eafe0b1fb2f2c443f1b3fea55c8a470" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_msgpack</name></member>
      <member refid="classnlohmann_1_1basic__json_1a2c758bc0a9b61177e4ec0d0c216bfe2b" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_msgpack_internal</name></member>
      <member refid="classnlohmann_1_1basic__json_a3acba9c6ceb7214e565fe08c3ba5b352_1a3acba9c6ceb7214e565fe08c3ba5b352" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>front</name></member>
      <member refid="classnlohmann_1_1basic__json_a5ba7f454ead9015dda166c580aeadeb4_1a5ba7f454ead9015dda166c580aeadeb4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>front</name></member>
      <member refid="classnlohmann_1_1basic__json_ac41d1fda870c3f3c4ead932c2e3ab61f_1ac41d1fda870c3f3c4ead932c2e3ab61f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="classnlohmann_1_1basic__json_aa6602bb24022183ab989439e19345d08_1aa6602bb24022183ab989439e19345d08" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="classnlohmann_1_1basic__json_a5afa21d477e13fa7a3dcd7ea66c48b52_1a5afa21d477e13fa7a3dcd7ea66c48b52" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="classnlohmann_1_1basic__json_a64135c19425f00b346d8ed63a23db334_1a64135c19425f00b346d8ed63a23db334" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="classnlohmann_1_1basic__json_a44a090c15a67b9f02e579b6e17ef0e1b_1a44a090c15a67b9f02e579b6e17ef0e1b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="classnlohmann_1_1basic__json_af4ac14224fbdd29d3547fcb11bb55c8f_1af4ac14224fbdd29d3547fcb11bb55c8f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_allocator</name></member>
      <member refid="classnlohmann_1_1basic__json_1a12ecf6c70e147e27ccb24746a50dba57" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_from_vector</name></member>
      <member refid="classnlohmann_1_1basic__json_1acb296a56f69c396e2c2a898f2043c834" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="classnlohmann_1_1basic__json_1a58b65f595883fb93333423ec5e3bafee" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1aff66aa31ef8603d799433b26fe7535c9" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a0a9c36d4d94ef5d611c0204bc7e4d37f" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1abefb50a81c9b91106d9ecadfcd1ee2b5" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a955d7098e5b43ee0dd8cce5f707eeb5c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a0c0b516e06d10dced993934ba5139cc0" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1ab1678fb6723faf020a15300c4f6b98f5" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1ae068eee75c0a814e19208bae641f866c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a32a4c3ccdd09b663614adce1834a0a50" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a0a01103792cc54e9c8236361e5f7ed90" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1aa9aaed6b92909b263e04b5d25eba8d67" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a52d0c7f354c6155221540baef5b98d0a" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1a01e81365c2c6897b39b793530e02aca5" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_1abbec23daef5fbb5b8bff6a481e5a7160" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_aefa46bd2d96bb77a38d1c8b431eab44f_1aefa46bd2d96bb77a38d1c8b431eab44f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_a14abd48803a8d5447faf5f583fa8e2a1_1a14abd48803a8d5447faf5f583fa8e2a1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ptr</name></member>
      <member refid="classnlohmann_1_1basic__json_afbd800010b67619463c0fce6e74f7878_1afbd800010b67619463c0fce6e74f7878" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ref</name></member>
      <member refid="classnlohmann_1_1basic__json_a87e9e9cb2556fabfe042a4fabfc2c952_1a87e9e9cb2556fabfe042a4fabfc2c952" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ref</name></member>
      <member refid="classnlohmann_1_1basic__json_1a040a5feb1eb48da9134924217b25bcf6" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ref_impl</name></member>
      <member refid="classnlohmann_1_1basic__json_a0136728f5db69d4051c77b94307abd6c_1a0136728f5db69d4051c77b94307abd6c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="classnlohmann_1_1basic__json_a1ecce113ff11dd294689ee4d45cbb855_1a1ecce113ff11dd294689ee4d45cbb855" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="classnlohmann_1_1basic__json_a30a7cc24f2931c20ecae37ec4a5e901f_1a30a7cc24f2931c20ecae37ec4a5e901f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="classnlohmann_1_1basic__json_a404cfe1bdbf1dc6b229627fcf2afb95f_1a404cfe1bdbf1dc6b229627fcf2afb95f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="classnlohmann_1_1basic__json_ad154c4228e4867c67b25a6601ced89bd_1ad154c4228e4867c67b25a6601ced89bd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="classnlohmann_1_1basic__json_ac13d32f7cbd02d616e71d8dc30dadcbf_1ac13d32f7cbd02d616e71d8dc30dadcbf" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>invalid_iterator</name></member>
      <member refid="classnlohmann_1_1basic__json_aef9ce5dd2381caee1f8ddcdb5bdd9c65_1aef9ce5dd2381caee1f8ddcdb5bdd9c65" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_array</name></member>
      <member refid="classnlohmann_1_1basic__json_a943e8cb182d0f2365c76d64b42eaa6fd_1a943e8cb182d0f2365c76d64b42eaa6fd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_boolean</name></member>
      <member refid="classnlohmann_1_1basic__json_aabe623bc8304c2ba92d96d91f390fab4_1aabe623bc8304c2ba92d96d91f390fab4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_discarded</name></member>
      <member refid="classnlohmann_1_1basic__json_a8faa039ca82427ed29c486ffd00600c3_1a8faa039ca82427ed29c486ffd00600c3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_null</name></member>
      <member refid="classnlohmann_1_1basic__json_a2b9852390abb4b1ef5fac6984e2fc0f3_1a2b9852390abb4b1ef5fac6984e2fc0f3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number</name></member>
      <member refid="classnlohmann_1_1basic__json_a33b4bf898b857c962e798fc7f6e86e70_1a33b4bf898b857c962e798fc7f6e86e70" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number_float</name></member>
      <member refid="classnlohmann_1_1basic__json_abac8af76067f1e8fdca9052882c74428_1abac8af76067f1e8fdca9052882c74428" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number_integer</name></member>
      <member refid="classnlohmann_1_1basic__json_abc7378cba0613a78b9aad1c8e7044bb0_1abc7378cba0613a78b9aad1c8e7044bb0" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number_unsigned</name></member>
      <member refid="classnlohmann_1_1basic__json_af8f511af124e82e4579f444b4175787c_1af8f511af124e82e4579f444b4175787c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_object</name></member>
      <member refid="classnlohmann_1_1basic__json_a6362b88718eb5c6d4fed6a61eed44b95_1a6362b88718eb5c6d4fed6a61eed44b95" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_primitive</name></member>
      <member refid="classnlohmann_1_1basic__json_a69b596a4a6683b362095c9a139637396_1a69b596a4a6683b362095c9a139637396" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_string</name></member>
      <member refid="classnlohmann_1_1basic__json_a9f68a0af820c3ced7f9d17851ce4c22d_1a9f68a0af820c3ced7f9d17851ce4c22d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_structured</name></member>
      <member refid="classnlohmann_1_1basic__json_a099316232c76c034030a38faa6e34dca_1a099316232c76c034030a38faa6e34dca" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iterator</name></member>
      <member refid="classnlohmann_1_1basic__json_aea8c06bb8e632f14cd77632519213d75_1aea8c06bb8e632f14cd77632519213d75" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iterator_wrapper</name></member>
      <member refid="classnlohmann_1_1basic__json_adb4db7abbc5ba12c9273f032a7b89198_1adb4db7abbc5ba12c9273f032a7b89198" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iterator_wrapper</name></member>
      <member refid="classnlohmann_1_1basic__json_a7768841baaaa7a21098a401c932efaff_1a7768841baaaa7a21098a401c932efaff" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_serializer</name></member>
      <member refid="classnlohmann_1_1basic__json_1a91990b60d7d4d67968a2c1db677536e7" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>m_type</name></member>
      <member refid="classnlohmann_1_1basic__json_1aeb0814f76966f99290cb29e127c90a77" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>m_value</name></member>
      <member refid="classnlohmann_1_1basic__json_a2f47d3c6a441c57dd2be00449fbb88e1_1a2f47d3c6a441c57dd2be00449fbb88e1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>max_size</name></member>
      <member refid="classnlohmann_1_1basic__json_aef6d0eeccee7c5c7e1317c2ea1607fab_1aef6d0eeccee7c5c7e1317c2ea1607fab" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>meta</name></member>
      <member refid="classnlohmann_1_1basic__json_1adb2f8dec070d2fa7964c272719ba51e8" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>msgpack_expect_string</name></member>
      <member refid="classnlohmann_1_1basic__json_a88d6103cb3620410b35200ee8e313d97_1a88d6103cb3620410b35200ee8e313d97" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_float_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a98e611d67b7bd75307de99c9358ab2dc_1a98e611d67b7bd75307de99c9358ab2dc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_integer_t</name></member>
      <member refid="classnlohmann_1_1basic__json_ab906e29b5d83ac162e823ada2156b989_1ab906e29b5d83ac162e823ada2156b989" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_unsigned_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a9f42ee7d10eee2d5a73fd94ca7f767ca_1a9f42ee7d10eee2d5a73fd94ca7f767ca" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>object</name></member>
      <member refid="classnlohmann_1_1basic__json_a3cdea044cc3ecba1c4f9874a89daf6e4_1a3cdea044cc3ecba1c4f9874a89daf6e4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>object_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a26ef3058e249f82a04f8ec18f7419027_1a26ef3058e249f82a04f8ec18f7419027" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator value_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a9cbcce20b78708de25c7ccb60c4ca7c5_1a9cbcce20b78708de25c7ccb60c4ca7c5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator ValueType</name></member>
      <member refid="classnlohmann_1_1basic__json_a6e2e21da48f5d9471716cd868a068327_1a6e2e21da48f5d9471716cd868a068327" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator!=</name></member>
      <member refid="classnlohmann_1_1basic__json_afefc38fc08bdb7a9a7474b5ab4a1140f_1afefc38fc08bdb7a9a7474b5ab4a1140f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator!=</name></member>
      <member refid="classnlohmann_1_1basic__json_ab0e886db6e9fa91ff9fd853333fed05b_1ab0e886db6e9fa91ff9fd853333fed05b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator!=</name></member>
      <member refid="classnlohmann_1_1basic__json_aea1085f2d35cc0e1ce119cf0110119e6_1aea1085f2d35cc0e1ce119cf0110119e6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="classnlohmann_1_1basic__json_adc29dd6358ff7a9062d7e168c24e7484_1adc29dd6358ff7a9062d7e168c24e7484" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="classnlohmann_1_1basic__json_abf04978d85a2d5c4754f4806d42f46fd_1abf04978d85a2d5c4754f4806d42f46fd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="classnlohmann_1_1basic__json_a0cf23e7d44e78bb9014484971af2f40f_1a0cf23e7d44e78bb9014484971af2f40f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="classnlohmann_1_1basic__json_aacd442b66140c764c594ac8ad7dfd5b3_1aacd442b66140c764c594ac8ad7dfd5b3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;</name></member>
      <member refid="classnlohmann_1_1basic__json_a7999ee3a69a4979d92e98ab1e88c8759_1a7999ee3a69a4979d92e98ab1e88c8759" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;</name></member>
      <member refid="classnlohmann_1_1basic__json_abed3e9b4ab75f5bcbd3cd20f5af5cdab_1abed3e9b4ab75f5bcbd3cd20f5af5cdab" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;</name></member>
      <member refid="classnlohmann_1_1basic__json_a5e34c5435e557d0bf666bd7311211405_1a5e34c5435e557d0bf666bd7311211405" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnlohmann_1_1basic__json_ab7285a92514fcdbe6de505ebaba92ea3_1ab7285a92514fcdbe6de505ebaba92ea3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;&lt;</name></member>
      <member refid="classnlohmann_1_1basic__json_a5c8bb5200f5eac10d31e26be46e5b1ac_1a5c8bb5200f5eac10d31e26be46e5b1ac" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;=</name></member>
      <member refid="classnlohmann_1_1basic__json_a7e368211047f725f333696aefdf39ffd_1a7e368211047f725f333696aefdf39ffd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;=</name></member>
      <member refid="classnlohmann_1_1basic__json_ad73f88f70fe5acfa521750a8cd710026_1ad73f88f70fe5acfa521750a8cd710026" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;=</name></member>
      <member refid="classnlohmann_1_1basic__json_a175607715d6c65e8901038ebb629a5b9_1a175607715d6c65e8901038ebb629a5b9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator=</name></member>
      <member refid="classnlohmann_1_1basic__json_a122640e7e2db1814fc7bbb3c122ec76e_1a122640e7e2db1814fc7bbb3c122ec76e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator==</name></member>
      <member refid="classnlohmann_1_1basic__json_aba21440ea1aff44f718285ed7d6d20d9_1aba21440ea1aff44f718285ed7d6d20d9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator==</name></member>
      <member refid="classnlohmann_1_1basic__json_aef302e3ae215e46e5035d0e4fdf47235_1aef302e3ae215e46e5035d0e4fdf47235" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator==</name></member>
      <member refid="classnlohmann_1_1basic__json_a87db51b6b936fb2ea293cdbc8702dcb8_1a87db51b6b936fb2ea293cdbc8702dcb8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;</name></member>
      <member refid="classnlohmann_1_1basic__json_a412895af9a582869a4d369a64fb1b6d6_1a412895af9a582869a4d369a64fb1b6d6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;</name></member>
      <member refid="classnlohmann_1_1basic__json_a124c319566198d9f092c5bebea46ce77_1a124c319566198d9f092c5bebea46ce77" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;</name></member>
      <member refid="classnlohmann_1_1basic__json_a74a943800c7f103d0990d7eef82c6453_1a74a943800c7f103d0990d7eef82c6453" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;=</name></member>
      <member refid="classnlohmann_1_1basic__json_a68e3a92b3d9be1faa05c92d096299189_1a68e3a92b3d9be1faa05c92d096299189" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;=</name></member>
      <member refid="classnlohmann_1_1basic__json_a5ee0e3e8afc7cbd932d6ed66418fa80a_1a5ee0e3e8afc7cbd932d6ed66418fa80a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;=</name></member>
      <member refid="classnlohmann_1_1basic__json_a9e06deabe69262c3ffc5533d32856983_1a9e06deabe69262c3ffc5533d32856983" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnlohmann_1_1basic__json_aaf363408931d76472ded14017e59c9e8_1aaf363408931d76472ded14017e59c9e8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;&gt;</name></member>
      <member refid="classnlohmann_1_1basic__json_ac871e3b03fb2eeca9a8de4db2bea760f_1ac871e3b03fb2eeca9a8de4db2bea760f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a2a3510a08418e8371ad3a67a33d3ce5d_1a2a3510a08418e8371ad3a67a33d3ce5d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a233b02b0839ef798942dd46157cc0fe6_1a233b02b0839ef798942dd46157cc0fe6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a9460a6884381a351c04ef04e8778c505_1a9460a6884381a351c04ef04e8778c505" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a1416bbec9d9a8eeca21c213cf5290868_1a1416bbec9d9a8eeca21c213cf5290868" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a4d1d2e04f6b75f8080337df23a686dd1_1a4d1d2e04f6b75f8080337df23a686dd1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_abb8eaa633584b5aff9c8fcd242f25ca8_1abb8eaa633584b5aff9c8fcd242f25ca8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a9dbbd81134838cac9616701501934e22_1a9dbbd81134838cac9616701501934e22" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_ac6946dffeb3be5aa173645f0467a44b3_1ac6946dffeb3be5aa173645f0467a44b3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_adfb5fc9a586cfafd52c91416c1bb5f7a_1adfb5fc9a586cfafd52c91416c1bb5f7a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="classnlohmann_1_1basic__json_a3333a5a8714912adda33a35b369f7b3d_1a3333a5a8714912adda33a35b369f7b3d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>other_error</name></member>
      <member refid="classnlohmann_1_1basic__json_a28f7c2f087274a0012eb7a2333ee1580_1a28f7c2f087274a0012eb7a2333ee1580" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>out_of_range</name></member>
      <member refid="classnlohmann_1_1basic__json_a86f339e8449cce96b89e86635a7d389e_1a86f339e8449cce96b89e86635a7d389e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="classnlohmann_1_1basic__json_ab275a3e00a40189e96d244de6c8f311a_1ab275a3e00a40189e96d244de6c8f311a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="classnlohmann_1_1basic__json_a4cd30efe5c33a7cf73a0c6495bb16054_1a4cd30efe5c33a7cf73a0c6495bb16054" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="classnlohmann_1_1basic__json_a3bd712a1351ba28e5440fac2359da1cb_1a3bd712a1351ba28e5440fac2359da1cb" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="classnlohmann_1_1basic__json_a360d37260add46be89881db2366fe343_1a360d37260add46be89881db2366fe343" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="classnlohmann_1_1basic__json_a00795fca3388571ba4a56a1ea6e0466b_1a00795fca3388571ba4a56a1ea6e0466b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="classnlohmann_1_1basic__json_af1efc2468e6022be6e35fc2944cabe4d_1af1efc2468e6022be6e35fc2944cabe4d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse_error</name></member>
      <member refid="classnlohmann_1_1basic__json_aea1c863b719b4ca5b77188c171bbfafe_1aea1c863b719b4ca5b77188c171bbfafe" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse_event_t</name></member>
      <member refid="classnlohmann_1_1basic__json_aecae491e175f8767c550ae3c59e180e3_1aecae491e175f8767c550ae3c59e180e3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parser_callback_t</name></member>
      <member refid="classnlohmann_1_1basic__json_ad87518a27b13f886b836bb93213e6515_1ad87518a27b13f886b836bb93213e6515" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>patch</name></member>
      <member refid="classnlohmann_1_1basic__json_aefee1f777198c68724bd127e0c8abbe4_1aefee1f777198c68724bd127e0c8abbe4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>pointer</name></member>
      <member refid="classnlohmann_1_1basic__json_ac8e523ddc8c2dd7e5d2daf0d49a9c0d7_1ac8e523ddc8c2dd7e5d2daf0d49a9c0d7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="classnlohmann_1_1basic__json_ab4384af330b79de0e5f279576803a2c7_1ab4384af330b79de0e5f279576803a2c7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="classnlohmann_1_1basic__json_ae11a3a51782c058fff2f6550cdfb9b3c_1ae11a3a51782c058fff2f6550cdfb9b3c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="classnlohmann_1_1basic__json_ab2716cbe2e997ab8309926b87f044434_1ab2716cbe2e997ab8309926b87f044434" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="classnlohmann_1_1basic__json_a1ef93e2006dbe52667294f5ef38b0b10_1a1ef93e2006dbe52667294f5ef38b0b10" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rbegin</name></member>
      <member refid="classnlohmann_1_1basic__json_a515e7618392317dbf4b72d3e18bf2ab2_1a515e7618392317dbf4b72d3e18bf2ab2" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rbegin</name></member>
      <member refid="classnlohmann_1_1basic__json_ac6a5eddd156c776ac75ff54cfe54a5bc_1ac6a5eddd156c776ac75ff54cfe54a5bc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>reference</name></member>
      <member refid="classnlohmann_1_1basic__json_ac77aed0925d447744676725ab0b6d535_1ac77aed0925d447744676725ab0b6d535" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rend</name></member>
      <member refid="classnlohmann_1_1basic__json_a4f73d4cee67ea328d785979c22af0ae1_1a4f73d4cee67ea328d785979c22af0ae1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rend</name></member>
      <member refid="classnlohmann_1_1basic__json_ac223d5560c2b05a208c88de67376c5f2_1ac223d5560c2b05a208c88de67376c5f2" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>reverse_iterator</name></member>
      <member refid="classnlohmann_1_1basic__json_a25e27ad0c6d53c01871c5485e1f75b96_1a25e27ad0c6d53c01871c5485e1f75b96" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>size</name></member>
      <member refid="classnlohmann_1_1basic__json_a39f2cd0b58106097e0e67bf185cc519b_1a39f2cd0b58106097e0e67bf185cc519b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>size_type</name></member>
      <member refid="classnlohmann_1_1basic__json_a61f8566a1a85a424c7266fb531dca005_1a61f8566a1a85a424c7266fb531dca005" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>string_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a66d4de311f79f2fe640793ab7a178781_1a66d4de311f79f2fe640793ab7a178781" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="classnlohmann_1_1basic__json_a65b0a24e1361a030ad0a661de22f6c8e_1a65b0a24e1361a030ad0a661de22f6c8e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="classnlohmann_1_1basic__json_ac31f12587d2f1a3be5ffc394aa9d72a4_1ac31f12587d2f1a3be5ffc394aa9d72a4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="classnlohmann_1_1basic__json_adaa1ed0a889d86c8e0216a3d66980f76_1adaa1ed0a889d86c8e0216a3d66980f76" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="classnlohmann_1_1basic__json_a2566783e190dec524bf3445b322873b8_1a2566783e190dec524bf3445b322873b8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_cbor</name></member>
      <member refid="classnlohmann_1_1basic__json_1a2f208f86f3fafaa8e9bc9374963485e4" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_cbor_internal</name></member>
      <member refid="classnlohmann_1_1basic__json_a09ca1dc273d226afe0ca83a9d7438d9c_1a09ca1dc273d226afe0ca83a9d7438d9c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_msgpack</name></member>
      <member refid="classnlohmann_1_1basic__json_1af7b03056b7891c59fee1811756b1a856" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_msgpack_internal</name></member>
      <member refid="classnlohmann_1_1basic__json_a2b2d781d7f2a4ee41bc0016e931cadf7_1a2b2d781d7f2a4ee41bc0016e931cadf7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>type</name></member>
      <member refid="classnlohmann_1_1basic__json_a4010e8e268fefd86da773c10318f2902_1a4010e8e268fefd86da773c10318f2902" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>type_error</name></member>
      <member refid="classnlohmann_1_1basic__json_ad6f550a2591b55766603c2c433e2f973_1ad6f550a2591b55766603c2c433e2f973" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>type_name</name></member>
      <member refid="classnlohmann_1_1basic__json_abb58a0ce5996bd3bc17a3dd954217af6_1abb58a0ce5996bd3bc17a3dd954217af6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>unflatten</name></member>
      <member refid="classnlohmann_1_1basic__json_a9fa223b26419f018f9b18cc516e3a8e5_1a9fa223b26419f018f9b18cc516e3a8e5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="classnlohmann_1_1basic__json_a1ad55f9d26934e05add021b2513a9ac1_1a1ad55f9d26934e05add021b2513a9ac1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="classnlohmann_1_1basic__json_a3284c24ad6b089558d78f256ada9c295_1a3284c24ad6b089558d78f256ada9c295" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="classnlohmann_1_1basic__json_af6a68b55f28fcce225017920de1435db_1af6a68b55f28fcce225017920de1435db" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="classnlohmann_1_1basic__json_ae8cbef097f7da18a781fc86587de6b90_1ae8cbef097f7da18a781fc86587de6b90" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value_t</name></member>
      <member refid="classnlohmann_1_1basic__json_a2b3297873b70c080837e8eedc4fec32f_1a2b3297873b70c080837e8eedc4fec32f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value_type</name></member>
      <member refid="classnlohmann_1_1basic__json_a42347bbce75ba5571e292a3540af30e0_1a42347bbce75ba5571e292a3540af30e0" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>~basic_json</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
